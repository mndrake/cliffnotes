`_tam_getGoogleTokenForAnalytics` <- function(){
  require(RGoogleAnalytics)
  require(lubridate)
  # As per Kan, this can be hard coded since Google limits acces per ViewID (tableID) and
  # not by clientID
  clientId <- "1066595427418-aeppbdhi7bj7g0osn8jpj4p6r9vus7ci.apps.googleusercontent.com"
  secret <-  "wGVbD4fttv_shYreB3PXcjDY"
 
  token <- NULL
  #if(file.exists("../rdata/ga_token.rds")){
  #  token <- readRDS("../rdata/ga_token.rds")
  #} else {
    # since Auth from RGoogleAnalytics does not work well
    # switch to use oauth_app and oauth2.0_token
    myapp <- oauth_app("google", clientId, secret)
    token <- oauth2.0_token(oauth_endpoints("google"), myapp,
                  scope = "https://www.googleapis.com/auth/analytics.readonly", cache = getOption("tam.httr_oauth_cache"))
    # Save the token object for future sessions
  #  saveRDS(token, file="../rdata/ga_token.rds")
  #}
  ValidateToken(token)
  token
}

`_tam_getGoogleAnalytics` <- function(tableId, lastNDays, dimensions, metrics){
  require(RGoogleAnalytics)
  require(lubridate)
 
  token <- `_tam_getGoogleTokenForAnalytics`()
  start_date <- as.character(today() - days(lastNDays))
  #end_date <- as.character(today() - days(1))
  end_date <- as.character(today())
  query.list <- Init(start.date = start_date,
                    end.date = end_date,
                    dimensions = dimensions,
                    metrics = metrics,
                    max.results = 10000,
                    table.id = tableId)

  ga.query <- QueryBuilder(query.list)
  ga.data <- GetReportData(ga.query, token)
  ga.data
}

`_tam_getGoogleProfile` <- function(){
  require(RGoogleAnalytics)
  require(lubridate)
  token <- `_tam_getGoogleTokenForAnalytics`()
  GetProfiles(token)
}
