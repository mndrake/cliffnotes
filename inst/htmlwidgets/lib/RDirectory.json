[
  {
    "category": "Number",
    "functions": [
      {
        "name": "abbreviate",
        "package": "base",
        "source": "exploratory doc",
        "description": "Abbreviate strings to at least minlength characters, such that they remain unique (if they were). First all spaces at the beginning of the string are stripped. Then (if necessary) any other spaces are stripped. Next, lower case vowels are removed (starting at the right) followed by lower case consonants. Finally if the abbreviation is still longer than minlength upper case letters are stripped.",
        "usage": [
          {
            "syntax": "abbreviate(```<column>```, minlength = ```<number>```, dot = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "abbreviate("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", minlength = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ", dot = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "minlength": "number",
              "dot": "logical"
            },
            "html": "abbreviate(<b><i>column</i></b>, minlength = <b><i>number</i></b>, dot = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "minlength\t(Optional)",
            "text": [
              "the minimum length of the abbreviations."
            ]
          },
          {
            "name": "dot\t(Optional)",
            "text": [
              "logical: should a dot (\".\") be appended?"
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "abbreviate(\"Exploratory\")",
            "comment": "Returns \"Expl\""
          },
          {
            "code": "abbreviate(\"Exploratory\", 3)",
            "comment": "Returns \"Exp\""
          }
        ],
        "tags": [
          "abbreviate",
          "initial"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nAbbreviate strings to at least minlength characters, such that they remain unique (if they were). First all spaces at the beginning of the string are stripped. Then (if necessary) any other spaces are stripped. Next, lower case vowels are removed (starting at the right) followed by lower case consonants. Finally if the abbreviation is still longer than minlength upper case letters are stripped.</p>\n\n<p><strong>Syntax</strong><br>\nabbreviate(<code>&lt;column&gt;</code>, minlength = <code>&lt;number&gt;</code>, dot = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>minlength (Optional) - the minimum length of the abbreviations.</li>\n<li>dot   (Optional) - logical: should a dot (&quot;.&quot;) be appended?</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nabbreviate(&quot;Exploratory&quot;)<br>\n<em>Returns &quot;Expl&quot;</em><br>\nabbreviate(&quot;Exploratory&quot;, 3)<br>\n<em>Returns &quot;Exp&quot;</em>  </p>\n"
      },
      {
        "name": "abs",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the absolute value.",
        "usage": [
          {
            "syntax": "abs(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "abs("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "abs(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [

        ],
        "tags": [
          "absolute"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the absolute value.</p>\n\n<p><strong>Syntax</strong><br>\nabs(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(abs = abs(ARR_DELAY))</p>\n"
      },
      {
        "name": "acos",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the inverse cosine of a value, in radians",
        "usage": [
          {
            "syntax": "acos(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "acos("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "acos(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = acos(X1))",
            "comment": "Create a new column for calculating the acos."
          }
        ],
        "tags": [
          "cosine",
          "inverse"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the inverse cosine of a value, in radians</p>\n\n<p><strong>Syntax</strong><br>\nacos(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = acos(X1))<br>\n<em>Create a new column for calculating the acos.</em>  </p>\n"
      },
      {
        "name": "acosh",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the inverse hyperbolic cosine of a number.",
        "usage": [
          {
            "syntax": "acosh(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "acosh("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "acosh(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = acosh(X1))",
            "comment": "Create a new column for calculating the acosh."
          }
        ],
        "tags": [
          "cosine",
          "inverse",
          "hyperbolic"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the inverse hyperbolic cosine of a number.</p>\n\n<p><strong>Syntax</strong><br>\nacosh(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = acosh(X1))<br>\n<em>Create a new column for calculating the acosh.</em>  </p>\n"
      },
      {
        "name": "asin",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the inverse sine of a value, in radians.",
        "usage": [
          {
            "syntax": "asin(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "asin("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "asin(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = asin(X1))",
            "comment": "Create a new column for calculating the asin."
          }
        ],
        "tags": [
          "sine",
          "inverse"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the inverse sine of a value, in radians.</p>\n\n<p><strong>Syntax</strong><br>\nasin(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = asin(X1))<br>\n<em>Create a new column for calculating the asin.</em>  </p>\n"
      },
      {
        "name": "asinh",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the inverse hyperbolic sine of a number.",
        "usage": [
          {
            "syntax": "asinh(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "asinh("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "asinh(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = asinh(X1))",
            "comment": "Create a new column for calculating the asinh."
          }
        ],
        "tags": [
          "sine",
          "inverse",
          "hyperbolic"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the inverse hyperbolic sine of a number.  </p>\n\n<p><strong>Syntax</strong><br>\nasinh(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = asinh(X1))<br>\n<em>Create a new column for calculating the asinh.</em>  </p>\n"
      },
      {
        "name": "atan",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the inverse tangent of a value, in radians.",
        "usage": [
          {
            "syntax": "atan(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "atan("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "atan(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = atan(X1))",
            "comment": "Create a new column for calculating the atan."
          }
        ],
        "tags": [
          "tangent",
          "inverse"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the inverse tangent of a value, in radians.</p>\n\n<p><strong>Syntax</strong><br>\natan(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = atan(X1))<br>\n<em>Create a new column for calculating the atan.</em>  </p>\n"
      },
      {
        "name": "atan2",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair (`x`,`y`), in radians.",
        "usage": [
          {
            "syntax": "atan2(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "atan2("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "atan2(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = atan2(X1, Y1))",
            "comment": "Create a new column for calculating the atan2."
          }
        ],
        "tags": [
          "tangent",
          "angle"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair (<code>x</code>,<code>y</code>), in radians.</p>\n\n<p><strong>Syntax</strong><br>\natan2(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = atan2(X1, Y1))<br>\n<em>Create a new column for calculating the atan2.</em>  </p>\n"
      },
      {
        "name": "atanh",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the inverse hyperbolic tangent of a number.",
        "usage": [
          {
            "syntax": "atanh(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "atanh("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "atanh(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = atanh(X1))",
            "comment": "Create a new column for calculating the atanh."
          }
        ],
        "tags": [
          "tangent",
          "inverse",
          "hyperbolic"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the inverse hyperbolic tangent of a number.</p>\n\n<p><strong>Syntax</strong><br>\natanh(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = atanh(X1))<br>\n<em>Create a new column for calculating the atanh.</em>  </p>\n"
      },
      {
        "name": "ceiling",
        "package": "base",
        "source": "exploratory doc",
        "description": "Rounds a number up to the nearest integer. ceiling(3.475) is 4",
        "usage": [
          {
            "syntax": "ceiling(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ceiling("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "ceiling(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "ceiling(3.475)",
            "comment": "Returns 4"
          }
        ],
        "tags": [
          "ceiling",
          "round",
          "truncate"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nRounds a number up to the nearest integer. ceiling(3.475) is 4</p>\n\n<p><strong>Syntax</strong><br>\nceiling(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nceiling(3.475)<br>\n<em>Returns 4</em>  </p>\n"
      },
      {
        "name": "cos",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the cosine of an angle provided in radians.",
        "usage": [
          {
            "syntax": "cos(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cos("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "cos(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = cos(X1))",
            "comment": "Create a new column for calculating the cos."
          }
        ],
        "tags": [
          "cosine"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the cosine of an angle provided in radians.</p>\n\n<p><strong>Syntax</strong><br>\ncos(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = cos(X1))<br>\n<em>Create a new column for calculating the cos.</em>  </p>\n"
      },
      {
        "name": "cosh",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the hyperbolic cosine of any real number.",
        "usage": [
          {
            "syntax": "cosh(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cosh("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "cosh(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = tanh(X1))",
            "comment": "Create a new column for calculating the cosh."
          }
        ],
        "tags": [
          "cosine",
          "hyperbolic"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the hyperbolic cosine of any real number.  </p>\n\n<p><strong>Syntax</strong><br>\ncosh(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = tanh(X1))<br>\n<em>Create a new column for calculating the cosh.</em>  </p>\n"
      },
      {
        "name": "cospi",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the cos(pi * <value>).",
        "usage": [
          {
            "syntax": "cospi(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cospi("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "cospi(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = cospi(X1))",
            "comment": "Create a new column for calculating the cospi."
          }
        ],
        "tags": [
          "cosine",
          "pi"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the cos(pi * <value>).</p>\n\n<p><strong>Syntax</strong><br>\ncospi(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = cospi(X1))<br>\n<em>Create a new column for calculating the cospi.</em>  </p>\n"
      },
      {
        "name": "cut",
        "package": "base",
        "source": "exploratory doc",
        "description": "Divides the range of values into intervals and return the values in x according to which interval they fall.",
        "usage": [
          {
            "syntax": "cut(```<column>```, breaks = ```<number>```, [labels = ```<text>```,",
            "tokens": [
              {
                "id": "0",
                "value": "cut("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", breaks = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ", [labels = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "6",
                "value": ","
              }
            ],
            "arguments": {
              "0": "column_num",
              "breaks": "number",
              "labels": "text"
            },
            "html": "cut(<b><i>column</i></b>, breaks = <b><i>number</i></b>, [labels = <b><i>text</i></b>,"
          },
          {
            "syntax": "include.lowest = ```<logical>```, right = ```<logical>```, dig.lab = ```<number>```),",
            "tokens": [
              {
                "id": "0",
                "value": "include.lowest = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "2",
                "value": ", right = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ", dig.lab = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "6",
                "value": "),"
              }
            ],
            "arguments": {
              "include.lowest": "logical",
              "right": "logical",
              "dig.lab": "number"
            },
            "html": "include.lowest = <b><i>logical</i></b>, right = <b><i>logical</i></b>, dig.lab = <b><i>number</i></b>),"
          },
          {
            "syntax": "ordered_result = ```<logical>```])",
            "tokens": [
              {
                "id": "0",
                "value": "ordered_result = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "2",
                "value": "])"
              }
            ],
            "arguments": {
              "ordered_result": "logical"
            },
            "html": "ordered_result = <b><i>logical</i></b>])"
          }
        ],
        "arguments": [
          {
            "name": "breaks",
            "text": [
              "either a numeric vector of two or more unique cut points or a single number (greater than or equal to 2) giving the number of intervals into which x is to be cut."
            ]
          },
          {
            "name": "labels (Optional)",
            "text": [
              "labels for the levels of the resulting category. By default, labels are constructed using \"(a,b]\" interval notation. If labels = FALSE, simple integer codes are returned instead of a factor."
            ]
          },
          {
            "name": "include.lowest (Optional)",
            "text": [
              "logical, indicating if an ‘x[i]’ equal to the lowest (or highest, for right = FALSE) ‘breaks’ value should be included."
            ]
          },
          {
            "name": "right (Optional)",
            "text": [
              "The default is TRUE. Indicating if the intervals should be closed on the right (and open on the left) or vice versa."
            ]
          },
          {
            "name": "dig.lab (Optional)",
            "text": [
              "integer which is used when labels are not given. It determines the number of digits used in formatting the break numbers. The default is 3."
            ]
          },
          {
            "name": "ordered_result (Optional)",
            "text": [
              "The default is FALSE. Decide whether the result is an ordered factor?"
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "cut(x, breaks = 5)",
            "comment": "Returns (0.991,2.8] (0.991,2.8] (2.8,4.6]   (2.8,4.6]   (4.6,6.4]   (4.6,6.4]   (6.4,8.2]   (6.4,8.2]   (8.2,10]   (8.2,10]"
          },
          {
            "code": "cut(x, breaks = 2)",
            "comment": "Returns (0.991,5.5] (0.991,5.5] (0.991,5.5] (0.991,5.5] (0.991,5.5] (5.5,10]    (5.5,10]    (5.5,10]    (5.5,10]   (5.5,10]"
          },
          {
            "code": "cut(x, breaks = 2, labels = c(1,2))",
            "comment": "Returns 1 1 1 1 1 2 2 2 2 2"
          },
          {
            "code": "cut(x, breaks = 2, labels = c(\"A\", \"B\"))",
            "comment": "Returns A A A A A B B B B B"
          },
          {
            "code": "mutate(a = cut(FL_DATE, breaks = 5, start.on.monday = FALSE))",
            "comment": "Returns one of the five buckets based on the date value"
          }
        ],
        "tags": [
          "cut",
          "divide",
          "bucket",
          "breaks"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nDivides the range of values into intervals and return the values in x according to which interval they fall.</p>\n\n<p><strong>Syntax</strong><br>\ncut(<code>&lt;column_num&gt;</code>, breaks = <code>&lt;number&gt;</code>, [labels = <code>&lt;text&gt;</code>,\n    include.lowest = <code>&lt;logical&gt;</code>, right = <code>&lt;logical&gt;</code>, dig.lab = <code>&lt;number&gt;</code>),\n    ordered_result = <code>&lt;logical&gt;</code>])</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>breaks - either a numeric vector of two or more unique cut points or a single number (greater than or equal to 2) giving the number of intervals into which x is to be cut.<br></li>\n<li>labels (Optional) - labels for the levels of the resulting category. By default, labels are constructed using &quot;(a,b]&quot; interval notation. If labels = FALSE, simple integer codes are returned instead of a factor.<br></li>\n<li>include.lowest (Optional) - logical, indicating if an ‘x[i]’ equal to the lowest (or highest, for right = FALSE) ‘breaks’ value should be included.<br></li>\n<li>right (Optional) - The default is TRUE. Indicating if the intervals should be closed on the right (and open on the left) or vice versa.<br></li>\n<li>dig.lab (Optional) - integer which is used when labels are not given. It determines the number of digits used in formatting the break numbers. The default is 3.</li>\n<li>ordered_result (Optional) - The default is FALSE. Decide whether the result is an ordered factor?<br></li>\n</ul>\n\n<p><strong>Example</strong><br>\n//x = c(1,2,3,4,5,6,7,8,9,10)<br>\ncut(x, breaks = 5)<br>\n<em>Returns (0.991,2.8] (0.991,2.8] (2.8,4.6]   (2.8,4.6]   (4.6,6.4]   (4.6,6.4]   (6.4,8.2]   (6.4,8.2]   (8.2,10]   (8.2,10]</em><br>\ncut(x, breaks = 2)<br>\n<em>Returns (0.991,5.5] (0.991,5.5] (0.991,5.5] (0.991,5.5] (0.991,5.5] (5.5,10]    (5.5,10]    (5.5,10]    (5.5,10]   (5.5,10]</em><br>\ncut(x, breaks = 2, labels = c(1,2))<br>\n<em>Returns 1 1 1 1 1 2 2 2 2 2</em><br>\ncut(x, breaks = 2, labels = c(&quot;A&quot;, &quot;B&quot;))<br>\n<em>Returns A A A A A B B B B B</em><br>\nmutate(a = cut(FL_DATE, breaks = 5, start.on.monday = FALSE))<br>\n<em>Returns one of the five buckets based on the date value</em>  </p>\n"
      },
      {
        "name": "exp",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns Euler's number, e (~2.718) raised to a power.",
        "usage": [
          {
            "syntax": "exp(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "exp("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "exp(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(revenue_exp = exp(revenue))",
            "comment": "Returns the exponential value of revenue"
          }
        ],
        "tags": [
          "exponential"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns Euler&#39;s number, e (~2.718) raised to a power.  </p>\n\n<p><strong>Syntax</strong><br>\nexp(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(revenue_exp = exp(revenue))<br>\n<em>Returns the exponential value of revenue</em>  </p>\n"
      },
      {
        "name": "floor",
        "package": "base",
        "source": "exploratory doc",
        "description": "Rounds a number down to the nearest integer. ceiling(3.475) is 3.",
        "usage": [
          {
            "syntax": "ceiling(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ceiling("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "ceiling(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "ceiling(3.475)",
            "comment": "Returns 3"
          }
        ],
        "tags": [
          "floor",
          "round",
          "truncate"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nRounds a number down to the nearest integer. ceiling(3.475) is 3.</p>\n\n<p><strong>Syntax</strong><br>\nceiling(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nceiling(3.475)<br>\n<em>Returns 3</em>  </p>\n"
      },
      {
        "name": "log",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns logarithms, by default natural logarithms.",
        "usage": [
          {
            "syntax": "log(```<column>```, base = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "log("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", base = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "base": "number"
            },
            "html": "log(<b><i>column</i></b>, base = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "base (Optional)",
            "text": [
              "a positive or complex number: the base with respect to which logarithms are computed. Defaults to e=exp(1)."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [

        ],
        "tags": [
          "logarithms"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns logarithms, by default natural logarithms.</p>\n\n<p><strong>Syntax</strong><br>\nlog(<code>&lt;column_num&gt;</code>, base = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>base (Optional) - a positive or complex number: the base with respect to which logarithms are computed. Defaults to e=exp(1).</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(Sales_log = log(Sales))</p>\n"
      },
      {
        "name": "log10",
        "package": "base",
        "source": "exploratory doc",
        "description": "Computes common (i.e., base 10) logarithms",
        "usage": [
          {
            "syntax": "log10(```<column>```, base = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "log10("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", base = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "base": "number"
            },
            "html": "log10(<b><i>column</i></b>, base = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "base (Optional)",
            "text": [
              "a positive or complex number: the base with respect to which logarithms are computed. Defaults to e=exp(1)."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [

        ],
        "tags": [
          "logarithms"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nComputes common (i.e., base 10) logarithms</p>\n\n<p><strong>Syntax</strong><br>\nlog10(<code>&lt;column_num&gt;</code>, base = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>base (Optional) - a positive or complex number: the base with respect to which logarithms are computed. Defaults to e=exp(1).</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(Sales_log = log10(Sales))</p>\n"
      },
      {
        "name": "log1p",
        "package": "base",
        "source": "exploratory doc",
        "description": "Computes log(1+x) accurately also for |x| << 1.",
        "usage": [
          {
            "syntax": "log1p(```<column>```, base = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "log1p("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", base = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "base": "number"
            },
            "html": "log1p(<b><i>column</i></b>, base = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "base (Optional)",
            "text": [
              "a positive or complex number: the base with respect to which logarithms are computed. Defaults to e=exp(1)."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [

        ],
        "tags": [
          "logarithms"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nComputes log(1+x) accurately also for |x| &lt;&lt; 1.  </p>\n\n<p><strong>Syntax</strong><br>\nlog1p(<code>&lt;column_num&gt;</code>, base = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>base (Optional) - a positive or complex number: the base with respect to which logarithms are computed. Defaults to e=exp(1).</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(Sales_log = log1p(Sales))</p>\n"
      },
      {
        "name": "log2",
        "package": "base",
        "source": "exploratory doc",
        "description": "computes binary (i.e., base 2) logarithms",
        "usage": [
          {
            "syntax": "log2(```<column>```, base = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "log2("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", base = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "base": "number"
            },
            "html": "log2(<b><i>column</i></b>, base = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "base (Optional)",
            "text": [
              "a positive or complex number: the base with respect to which logarithms are computed. Defaults to e=exp(1)."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [

        ],
        "tags": [
          "logarithms"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\ncomputes binary (i.e., base 2) logarithms</p>\n\n<p><strong>Syntax</strong><br>\nlog2(<code>&lt;column_num&gt;</code>, base = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>base (Optional) - a positive or complex number: the base with respect to which logarithms are computed. Defaults to e=exp(1).</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(Sales_log = log2(Sales))</p>\n"
      },
      {
        "name": "pmax",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the parallel maxima of the input values.",
        "usage": [
          {
            "syntax": "pmax(```<column>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "pmax("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num_logic_date",
              "na.rm": "logical"
            },
            "html": "pmax(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "pmax(x, y)",
            "comment": "Returns 3 3 3 4 5"
          },
          {
            "code": "mutate(a = pmax(ARR_DELAY, DEP_DELAY, na.rm = TRUE))",
            "comment": "Returns a bigger value between ARR\\_DELAY and DEP\\_DELAY values."
          }
        ],
        "tags": [
          "max",
          "multiple",
          "parallel"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the parallel maxima of the input values.</p>\n\n<p><strong>Syntax</strong><br>\npmax(<code>&lt;column_num_logic_date&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nx &lt;- c(1, 2, 3, 4, 5)<br>\ny &lt;- c(3, 3, 3, 3, 3)<br>\npmax(x, y)<br>\n<em>Returns 3 3 3 4 5</em><br>\nmutate(a = pmax(ARR_DELAY, DEP_DELAY, na.rm = TRUE))<br>\n<em>Returns a bigger value between ARR_DELAY and DEP_DELAY values.</em>  </p>\n"
      },
      {
        "name": "pmin",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the parallel minima of the input values.",
        "usage": [
          {
            "syntax": "pmin(```<column>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "pmin("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num_logic_date",
              "na.rm": "logical"
            },
            "html": "pmin(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "logical. Should missing values (including NaN) be removed?"
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "pmin(x, y)",
            "comment": "Returns 1 2 3 3 3"
          },
          {
            "code": "mutate(a = pmin(ARR_DELAY, DEP_DELAY, na.rm = TRUE))",
            "comment": "Returns a smaller value between ARR\\_DELAY and DEP\\_DELAY values."
          }
        ],
        "tags": [
          "min",
          "multiple",
          "parallel"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the parallel minima of the input values.</p>\n\n<p><strong>Syntax</strong><br>\npmin(<code>&lt;column_num_logic_date&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - logical. Should missing values (including NaN) be removed?</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nx &lt;- c(1, 2, 3, 4, 5)<br>\ny &lt;- c(3, 3, 3, 3, 3)<br>\npmin(x, y)<br>\n<em>Returns 1 2 3 3 3</em><br>\nmutate(a = pmin(ARR_DELAY, DEP_DELAY, na.rm = TRUE))<br>\n<em>Returns a smaller value between ARR_DELAY and DEP_DELAY values.</em>  </p>\n"
      },
      {
        "name": "round",
        "package": "base",
        "source": "exploratory doc",
        "description": "Rounds a number to a certain number of decimal places.",
        "usage": [
          {
            "syntax": "round(```<column>```, digits = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "round("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", digits = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "digits": "number"
            },
            "html": "round(<b><i>column</i></b>, digits = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "digits (Optional)",
            "text": [
              "number of digits"
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "round(3.475, digits=2)",
            "comment": "Returns 3.48"
          }
        ],
        "tags": [
          "round",
          "truncate"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nRounds a number to a certain number of decimal places.</p>\n\n<p><strong>Syntax</strong><br>\nround(<code>&lt;column_num&gt;</code>, digits = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>digits (Optional) - number of digits</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nround(3.475, digits=2)<br>\n<em>Returns 3.48</em>  </p>\n"
      },
      {
        "name": "scale",
        "package": "base",
        "source": "exploratory doc",
        "description": "Centers and/or scales the numeric values of a given column(s).",
        "usage": [
          {
            "syntax": "scale(```<column(s)>```, center = ```<logical>```, scale = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "scale("
              },
              {
                "id": "column(s)",
                "value": "<column(s)>"
              },
              {
                "id": "2",
                "value": ", center = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ", scale = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "__repeat__": "column",
              "center": "logical",
              "scale": "logical"
            },
            "html": "scale(<b><i>column(s)</i></b>, center = <b><i>logical</i></b>, scale = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "center (Optional)",
            "text": [
              "The default is TRUE. Either a logical value of TRUE or FALSE, or a numeric value as a center value. If it's TRUE then centering is done by subtracting the column means (omitting NAs) of the value, and if center is FALSE, no centering is done."
            ]
          },
          {
            "name": "scale (Optional)",
            "text": [
              "The default is TRUE. either a logical value of TRUE or FALSE, or a numeric value as a center value. When it's TRUE then scaling is done by dividing by the standard deviation when center is TRUE, so that it will end up calculating as ```(x - mean(x)) / sd(x)```. When scale is TRUE and center is FALSE then the scaling is done by dividing by the root-mean-square, which is ```x / sqrt(sum(x^2)/(length(x)-1))```. When it's a numeric value it will divide the input value by this numeric value."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "as.numeric(scale(x))  |  as.numeric(scale(x, center = 0))",
            "comment": "Returns -0.4584610 -0.4332246 -0.4079882 -0.3827518 -0.3575154  2.0399410. These are same as the below."
          },
          {
            "code": "as.numeric(scale(x, center = FALSE))",
            "comment": "Returns 0.02229944 0.04459888 0.06689832 0.08919776 0.11149720 2.22994404. This is same as the below."
          },
          {
            "code": "as.numeric(scale(x, center = 0, scale = max(x)))",
            "comment": "Returns 0.01 0.02 0.03 0.04 0.05 1.00"
          }
        ],
        "tags": [
          "scale",
          "normalize"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nCenters and/or scales the numeric values of a given column(s).</p>\n\n<p><strong>Syntax</strong><br>\nscale(<code>&lt;column(s)&gt;</code>, center = <code>&lt;logical&gt;</code>, scale = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>center (Optional) - The default is TRUE. Either a logical value of TRUE or FALSE, or a numeric value as a center value. If it&#39;s TRUE then centering is done by subtracting the column means (omitting NAs) of the value, and if center is FALSE, no centering is done.</li>\n<li>scale (Optional) - The default is TRUE. either a logical value of TRUE or FALSE, or a numeric value as a center value. When it&#39;s TRUE then scaling is done by dividing by the standard deviation when center is TRUE, so that it will end up calculating as <code>(x - mean(x)) / sd(x)</code>. When scale is TRUE and center is FALSE then the scaling is done by dividing by the root-mean-square, which is <code>x / sqrt(sum(x^2)/(length(x)-1))</code>. When it&#39;s a numeric value it will divide the input value by this numeric value.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\n// x &lt;- c(1, 2, 3, 4, 5, 100)<br>\nas.numeric(scale(x))  |  as.numeric(scale(x, center = 0))<br>\n<em>Returns -0.4584610 -0.4332246 -0.4079882 -0.3827518 -0.3575154  2.0399410. These are same as the below.</em><br>\n(x - mean(x)) / sd(x)  </p>\n\n<p>as.numeric(scale(x, center = FALSE))<br>\n<em>Returns 0.02229944 0.04459888 0.06689832 0.08919776 0.11149720 2.22994404. This is same as the below.</em><br>\nx / sqrt(sum(x^2)/(length(x)-1))    </p>\n\n<p>as.numeric(scale(x, center = 0, scale = max(x)))<br>\n<em>Returns 0.01 0.02 0.03 0.04 0.05 1.00</em>  </p>\n"
      },
      {
        "name": "sign",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns either 1, 0, or -1 depending on whether the input value is positive, zero, or negative, respectively.",
        "usage": [
          {
            "syntax": "sign(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "sign("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "sign(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "sign(x)",
            "comment": "Returns 1  1  1  0 -1 -1 -1"
          }
        ],
        "tags": [
          "sign",
          "positive",
          "negative"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns either 1, 0, or -1 depending on whether the input value is positive, zero, or negative, respectively.  </p>\n\n<p><strong>Syntax</strong><br>\nsign(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\n// x &lt;- c(1, 2, 10, 0, -1, -2, -10)<br>\nsign(x)<br>\n<em>Returns 1  1  1  0 -1 -1 -1</em>  </p>\n"
      },
      {
        "name": "signif",
        "package": "base",
        "source": "exploratory doc",
        "description": "Rounds the values in its first argument to the specified number of significant digits.",
        "usage": [
          {
            "syntax": "signif(```<column>```, digits = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "signif("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", digits = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "digits": "number"
            },
            "html": "signif(<b><i>column</i></b>, digits = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "digits (Optional)",
            "text": [
              "number of digits"
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "signif(3.475, digits=2)",
            "comment": "Returns 3.5"
          }
        ],
        "tags": [
          "significant"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nRounds the values in its first argument to the specified number of significant digits.</p>\n\n<p><strong>Syntax</strong><br>\nsignif(<code>&lt;column_num&gt;</code>, digits = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>digits (Optional) - number of digits</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nsignif(3.475, digits=2)<br>\n<em>Returns 3.5</em>  </p>\n"
      },
      {
        "name": "sin",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the sine of an angle provided in radians.",
        "usage": [
          {
            "syntax": "sin(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "sin("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "sin(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = sinh(X1))",
            "comment": "Create a new column for calculating the sinh."
          }
        ],
        "tags": [
          "sine"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the sine of an angle provided in radians.</p>\n\n<p><strong>Syntax</strong><br>\nsin(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = sinh(X1))<br>\n<em>Create a new column for calculating the sinh.</em>  </p>\n"
      },
      {
        "name": "sinh",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the hyperbolic sine of any real number.",
        "usage": [
          {
            "syntax": "sinh(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "sinh("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "sinh(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = sinh(X1))",
            "comment": "Create a new column for calculating the sinh."
          }
        ],
        "tags": [
          "sine",
          "hyperbolic"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the hyperbolic sine of any real number.  </p>\n\n<p><strong>Syntax</strong><br>\nsinh(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = sinh(X1))<br>\n<em>Create a new column for calculating the sinh.</em>  </p>\n"
      },
      {
        "name": "sinpi",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the sin(pi * <value>).",
        "usage": [
          {
            "syntax": "sinpi(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "sinpi("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "sinpi(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = sinpi(X1))",
            "comment": "Create a new column for calculating the sinpi."
          }
        ],
        "tags": [
          "sine",
          "pi"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the sin(pi * <value>).</p>\n\n<p><strong>Syntax</strong><br>\nsinpi(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = sinpi(X1))<br>\n<em>Create a new column for calculating the sinpi.</em>  </p>\n"
      },
      {
        "name": "sqrt",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the square root of the values.",
        "usage": [
          {
            "syntax": "sqrt(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "sqrt("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "sqrt(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(revenue_sq = sqrt(revenue))",
            "comment": "Returns the square root of revenue values"
          }
        ],
        "tags": [
          "square root"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the square root of the values.</p>\n\n<p><strong>Syntax</strong><br>\nsqrt(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(revenue_sq = sqrt(revenue))<br>\n<em>Returns the square root of revenue values</em>  </p>\n"
      },
      {
        "name": "tan",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the tangent of an angle provided in radians.",
        "usage": [
          {
            "syntax": "tan(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "tan("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "tan(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = sinh(X1))",
            "comment": "Create a new column for calculating the sinh."
          }
        ],
        "tags": [
          "tangent"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the tangent of an angle provided in radians.</p>\n\n<p><strong>Syntax</strong><br>\ntan(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = sinh(X1))<br>\n<em>Create a new column for calculating the sinh.</em>  </p>\n"
      },
      {
        "name": "tanh",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the hyperbolic tangent of any real number.",
        "usage": [
          {
            "syntax": "tanh(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "tanh("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "tanh(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = tanh(X1))",
            "comment": "Create a new column for calculating the tanh."
          }
        ],
        "tags": [
          "tangent",
          "hyperbolic"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the hyperbolic tangent of any real number.  </p>\n\n<p><strong>Syntax</strong><br>\ntanh(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = tanh(X1))<br>\n<em>Create a new column for calculating the tanh.</em>  </p>\n"
      },
      {
        "name": "tanpi",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the tan(pi * <value>).",
        "usage": [
          {
            "syntax": "tanpi(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "tanpi("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "tanpi(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(a = tanpi(X1))",
            "comment": "Create a new column for calculating the tanpi."
          }
        ],
        "tags": [
          "tangent",
          "pi"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the tan(pi * <value>).</p>\n\n<p><strong>Syntax</strong><br>\ntanpi(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nmutate(a = tanpi(X1))<br>\n<em>Create a new column for calculating the tanpi.</em>  </p>\n"
      },
      {
        "name": "trunc",
        "package": "base",
        "source": "exploratory doc",
        "description": "Truncates the numbers by omitting digits.",
        "usage": [
          {
            "syntax": "trunc(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "trunc("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "trunc(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "trunc(3.475)",
            "comment": "Returns 3"
          }
        ],
        "tags": [
          "truncate",
          "round"
        ],
        "categories": [
          "Number"
        ],
        "html": "<p><strong>Summary</strong><br>\nTruncates the numbers by omitting digits.</p>\n\n<p><strong>Syntax</strong><br>\ntrunc(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\ntrunc(3.475)<br>\n<em>Returns 3</em>  </p>\n"
      }
    ]
  },
  {
    "category": "Text",
    "functions": [
      {
        "name": "c",
        "package": "base",
        "source": "exploratory doc",
        "description": "This is a generic function which combines its arguments.",
        "usage": [
          {
            "syntax": "c(```<value1>```, ```<value2>```, ... , recursive = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "c("
              },
              {
                "id": "value1",
                "value": "<value1>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "value2",
                "value": "<value2>"
              },
              {
                "id": "4",
                "value": ", ... , recursive = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "value1",
              "1": "value2",
              "recursive": "logical"
            },
            "html": "c(<b><i>value1</i></b>, <b><i>value2</i></b>, ... , recursive = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "recursive (Optional)",
            "text": [
              "The default is FALSE. If recursive = TRUE, the function recursively descends through lists (and pairlists) combining all their elements into a vector."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "c(1:10)",
            "comment": "Returns 1  2  3  4  5  6  7  8  9 10"
          },
          {
            "code": "c(1:10, 1:3)",
            "comment": "Returns 1  2  3  4  5  6  7  8  9 10  1  2  3"
          },
          {
            "code": "c(\"a\", \"b\", \"c\")",
            "comment": "Returns \"a\" \"b\" \"c\""
          }
        ],
        "tags": [
          "combine",
          "list",
          "add"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nThis is a generic function which combines its arguments.  </p>\n\n<p><strong>Syntax</strong><br>\nc(<code>&lt;value1&gt;</code>, <code>&lt;value2&gt;</code>, ... , recursive = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>recursive (Optional) - The default is FALSE. If recursive = TRUE, the function recursively descends through lists (and pairlists) combining all their elements into a vector.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nc(1:10)<br>\n<em>Returns 1  2  3  4  5  6  7  8  9 10</em><br>\nc(1:10, 1:3)<br>\n<em>Returns 1  2  3  4  5  6  7  8  9 10  1  2  3</em><br>\nc(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)<br>\n<em>Returns &quot;a&quot; &quot;b&quot; &quot;c&quot;</em>  </p>\n"
      },
      {
        "name": "countrycode",
        "package": "countrycode",
        "source": "exploratory doc",
        "description": "Convert country names or codes to specified formats.",
        "usage": [
          {
            "syntax": "countrycode(```<column>```, origin=```<\"country.name\"|\"cowc\"|\"cown\"|\"iso3c\"|\"iso3n\"|\"iso2c\"|\"imf\"|\"fips104\"|\"fao\"|\"ioc\"|\"un\"| \"wb\">```, destination=```<\"country.name\"|\"continent\"|\"region\"|\"cowc\"|\"cown\"|\"iso3c\"|\"iso3n\"|\"iso2c\"|\"imf\"|\"fips104\"|\"fao\"|\"ioc\"|\"un\"| \"wb\">```)",
            "tokens": [
              {
                "id": "0",
                "value": "countrycode("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", origin="
              },
              {
                "id": "\"country.name\"|\"cowc\"|\"cown\"|\"iso3c\"|\"iso3n\"|\"iso2c\"|\"imf\"|\"fips104\"|\"fao\"|\"ioc\"|\"un\"| \"wb\"",
                "value": "<\"country.name\"|\"cowc\"|\"cown\"|\"iso3c\"|\"iso3n\"|\"iso2c\"|\"imf\"|\"fips104\"|\"fao\"|\"ioc\"|\"un\"| \"wb\">"
              },
              {
                "id": "4",
                "value": ", destination="
              },
              {
                "id": "\"country.name\"|\"continent\"|\"region\"|\"cowc\"|\"cown\"|\"iso3c\"|\"iso3n\"|\"iso2c\"|\"imf\"|\"fips104\"|\"fao\"|\"ioc\"|\"un\"| \"wb\"",
                "value": "<\"country.name\"|\"continent\"|\"region\"|\"cowc\"|\"cown\"|\"iso3c\"|\"iso3n\"|\"iso2c\"|\"imf\"|\"fips104\"|\"fao\"|\"ioc\"|\"un\"| \"wb\">"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "origin": "\"country.name\"|\"cowc\"|\"cown\"|\"iso3c\"|\"iso3n\"|\"iso2c\"|\"imf\"|\"fips104\"|\"fao\"|\"ioc\"|\"un\"| \"wb\"",
              "destination": "\"country.name\"|\"continent\"|\"region\"|\"cowc\"|\"cown\"|\"iso3c\"|\"iso3n\"|\"iso2c\"|\"imf\"|\"fips104\"|\"fao\"|\"ioc\"|\"un\"| \"wb\""
            },
            "html": "countrycode(<b><i>column</i></b>, origin=<b><i>\"country.name\"|\"cowc\"|\"cown\"|\"iso3c\"|\"iso3n\"|\"iso2c\"|\"imf\"|\"fips104\"|\"fao\"|\"ioc\"|\"un\"| \"wb\"</i></b>, destination=<b><i>\"country.name\"|\"continent\"|\"region\"|\"cowc\"|\"cown\"|\"iso3c\"|\"iso3n\"|\"iso2c\"|\"imf\"|\"fips104\"|\"fao\"|\"ioc\"|\"un\"| \"wb\"</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "origin",
            "text": [
              "Format of original data."
            ]
          },
          {
            "name": "destination",
            "text": [
              "Format of output data."
            ]
          }
        ],
        "return_value": "Country name.",
        "examples": [
          {
            "code": "countrycode(\"U.S.\", \"country.name\", \"iso2c\")",
            "comment": "Return US."
          },
          {
            "code": "countrycode(\"United States\", \"country.name\", \"iso2c\")",
            "comment": "Return US."
          },
          {
            "code": "countrycode(\"US\", \"iso2c\", \"iso3c\")",
            "comment": "Return USA."
          }
        ],
        "tags": [
          "Geo"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert country names or codes to specified formats. </p>\n\n<p><strong>Syntax</strong><br>\ncountrycode(<code>&lt;column_text&gt;</code>, origin=<code>&lt;&quot;country.name&quot;|&quot;cowc&quot;|&quot;cown&quot;|&quot;iso3c&quot;|&quot;iso3n&quot;|&quot;iso2c&quot;|&quot;imf&quot;|&quot;fips104&quot;|&quot;fao&quot;|&quot;ioc&quot;|&quot;un&quot;| &quot;wb&quot;&gt;</code>, destination=<code>&lt;&quot;country.name&quot;|&quot;continent&quot;|&quot;region&quot;|&quot;cowc&quot;|&quot;cown&quot;|&quot;iso3c&quot;|&quot;iso3n&quot;|&quot;iso2c&quot;|&quot;imf&quot;|&quot;fips104&quot;|&quot;fao&quot;|&quot;ioc&quot;|&quot;un&quot;| &quot;wb&quot;&gt;</code>)</p>\n\n<p><strong>Arguments</strong>\n* origin - Format of original data.\n* destination - Format of output data.</p>\n\n<p><strong>Return Value</strong><br>\nCountry name.</p>\n\n<p><strong>Example</strong><br>\ncountrycode(&quot;U.S.&quot;, &quot;country.name&quot;, &quot;iso2c&quot;)\n<em>Return US.</em></p>\n\n<p>countrycode(&quot;United States&quot;, &quot;country.name&quot;, &quot;iso2c&quot;)\n<em>Return US.</em></p>\n\n<p>countrycode(&quot;US&quot;, &quot;iso2c&quot;, &quot;iso3c&quot;)\n<em>Return USA.</em></p>\n"
      },
      {
        "name": "extract_numeric",
        "package": "tidyr",
        "source": "exploratory doc",
        "description": "Extract only the number from a given text. This is useful for strings that are supposed to be numbers with extra formatting (e.g. $1,200.34, -12%, X1, etc.).",
        "usage": [
          {
            "syntax": "extract_numeric(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "extract_numeric("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "extract_numeric(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "extract_numeric(\"$56,500.00\")",
            "comment": "Returns 56500"
          },
          {
            "code": "extract_numeric(\"-45%\")",
            "comment": "Returns -45"
          },
          {
            "code": "mutate(<new\\_column> = extract_numeric(<column>)",
            "comment": "Crate a new column to have only the extracted numbers from the original column."
          }
        ],
        "tags": [
          "extract",
          "only",
          "number"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract only the number from a given text. This is useful for strings that are supposed to be numbers with extra formatting (e.g. $1,200.34, -12%, X1, etc.).</p>\n\n<p><strong>Syntax</strong><br>\nextract_numeric(<code>&lt;column&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric   </p>\n\n<p><strong>Example</strong><br>\nextract_numeric(&quot;$56,500.00&quot;)<br>\n<em>Returns 56500</em><br>\nextract_numeric(&quot;-45%&quot;)<br>\n<em>Returns -45</em><br>\nmutate(<new\\_column> = extract_numeric(<column>)<br>\n<em>Crate a new column to have only the extracted numbers from the original column.</em>  </p>\n"
      },
      {
        "name": "get_sentiment",
        "package": "tam",
        "source": "exploratory doc",
        "description": "Returns sentiment types of positive or negative based on a given word(s).",
        "usage": [
          {
            "syntax": "get_sentiment(```<column>```, lexicon=```<\"nrc\"|\"bing\"|\"AFINN\">```)",
            "tokens": [
              {
                "id": "0",
                "value": "get_sentiment("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", lexicon="
              },
              {
                "id": "\"nrc\"|\"bing\"|\"AFINN\"",
                "value": "<\"nrc\"|\"bing\"|\"AFINN\">"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "lexicon": "\"nrc\"|\"bing\"|\"AFINN\""
            },
            "html": "get_sentiment(<b><i>column</i></b>, lexicon=<b><i>\"nrc\"|\"bing\"|\"AFINN\"</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "lexicon (Optional)",
            "text": [
              "The default is \"bing\". Set a type of dictionary among 'nrc', 'bing', and 'AFINN'."
            ]
          }
        ],
        "return_value": "Character (If lexicon is \"AFINN\", Numeric)",
        "examples": [
          {
            "code": "get_sentiment(\"good\")",
            "comment": "Return \"positive\"."
          },
          {
            "code": "get_sentiment(\"bad\", lexicon=\"AFINN\")",
            "comment": "Return -3."
          }
        ],
        "tags": [
          "Text"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns sentiment types of positive or negative based on a given word(s).</p>\n\n<p><strong>Syntax</strong><br>\nget_sentiment(<code>&lt;column_text&gt;</code>, lexicon=<code>&lt;&quot;nrc&quot;|&quot;bing&quot;|&quot;AFINN&quot;&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>lexicon (Optional) - The default is &quot;bing&quot;. Set a type of dictionary among &#39;nrc&#39;, &#39;bing&#39;, and &#39;AFINN&#39;.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter (If lexicon is &quot;AFINN&quot;, Numeric)</p>\n\n<p><strong>Example</strong><br>\nget_sentiment(&quot;good&quot;)<br>\n<em>Return &quot;positive&quot;.</em></p>\n\n<p>get_sentiment(&quot;bad&quot;, lexicon=&quot;AFINN&quot;)<br>\n<em>Return -3.</em></p>\n"
      },
      {
        "name": "iconv",
        "package": "base",
        "source": "exploratory doc",
        "description": "Convert a given text from one encoding to another.",
        "usage": [
          {
            "syntax": "iconv(```<column>```, from = ```<encoding>```, to = ```<encoding>```, sub = ```<text>```, mark = ```<logical>```, toRaw = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "iconv("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", from = "
              },
              {
                "id": "encoding",
                "value": "<encoding>"
              },
              {
                "id": "4",
                "value": ", to = "
              },
              {
                "id": "encoding",
                "value": "<encoding>"
              },
              {
                "id": "6",
                "value": ", sub = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "8",
                "value": ", mark = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "10",
                "value": ", toRaw = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "12",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "from": "encoding",
              "to": "encoding",
              "sub": "text",
              "mark": "logical",
              "toRaw": "logical"
            },
            "html": "iconv(<b><i>column</i></b>, from = <b><i>encoding</i></b>, to = <b><i>encoding</i></b>, sub = <b><i>text</i></b>, mark = <b><i>logical</i></b>, toRaw = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "from",
            "text": [
              "A character string describing the current encoding."
            ]
          },
          {
            "name": "to",
            "text": [
              "A character string describing the target encoding."
            ]
          },
          {
            "name": "sub (Optional)",
            "text": [
              "character string. If not NA it is used to replace any non-convertible bytes in the input. (This would normally be a single character, but can be more.) If \"byte\", the indication is \"<xx>\" with the hex code of the byte."
            ]
          },
          {
            "name": "mark (Optional)",
            "text": [
              "The default is FALSE. Should encodings be marked?"
            ]
          },
          {
            "name": "toRaw (Optional)",
            "text": [
              "The default is FALSE. Should a list of raw vectors be returned rather than a character vector?"
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "iconv(x, \"ISO_8859-1\", \"UTF-8\")",
            "comment": "Converts a given text from \"ISO_8859-1\" to \"UTF-8\"."
          }
        ],
        "tags": [
          "convert",
          "encoding",
          "character set",
          "internationalization"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a given text from one encoding to another.</p>\n\n<p><strong>Syntax</strong><br>\niconv(<code>&lt;column&gt;</code>, from = <code>&lt;encoding&gt;</code>, to = <code>&lt;encoding&gt;</code>, sub = <code>&lt;text&gt;</code>, mark = <code>&lt;logical&gt;</code>, toRaw = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>from - A character string describing the current encoding.<br></li>\n<li>to - A character string describing the target encoding.<br></li>\n<li>sub (Optional) - character string. If not NA it is used to replace any non-convertible bytes in the input. (This would normally be a single character, but can be more.) If &quot;byte&quot;, the indication is &quot;<xx>&quot; with the hex code of the byte.<br></li>\n<li>mark (Optional) - The default is FALSE. Should encodings be marked?<br></li>\n<li>toRaw (Optional) - The default is FALSE. Should a list of raw vectors be returned rather than a character vector?<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter    </p>\n\n<p><strong>Example</strong><br>\niconv(x, &quot;ISO_8859-1&quot;, &quot;UTF-8&quot;)<br>\n<em>Converts a given text from &quot;ISO</em>8859-1&quot; to &quot;UTF-8&quot;._</p>\n"
      },
      {
        "name": "ip_to_country",
        "package": "tam",
        "source": "exploratory doc",
        "description": "Returns country names from IP addresses.",
        "usage": [
          {
            "syntax": "ip_to_country(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ip_to_country("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "ip_to_country(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "ip_to_country(\"133.43.96.45\")",
            "comment": "returns \"Japan\"."
          }
        ],
        "tags": [
          "Geo"
        ],
        "categories": [
          "Text",
          "Geo"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns country names from IP addresses.</p>\n\n<p><strong>Syntax</strong><br>\nip_to_country(<code>&lt;column_text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nip_to_country(&quot;133.43.96.45&quot;)<br>\n<em>returns &quot;Japan&quot;.</em></p>\n"
      },
      {
        "name": "nchar",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns # of letters or size of a given value.",
        "usage": [
          {
            "syntax": "nchar(```<column>```, type = ```\"chars\"|\"bytes\"|\"width\"```, allowNA = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "nchar("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", type = "
              },
              {
                "id": "3",
                "value": "\"chars\"|\"bytes\"|\"width\""
              },
              {
                "id": "4",
                "value": ", allowNA = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "type": [
                "\"chars\"",
                "\"bytes\"",
                "\"width\""
              ],
              "allowNA": "logical"
            },
            "html": "nchar(<b><i>column</i></b>, type = ```\"chars\"|\"bytes\"|\"width\"```, allowNA = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "type (Optional)",
            "text": [
              "The default is \"chars\". Set a type to count a given characters among \"chars\", \"bytes\", or \"width\"."
            ]
          },
          {
            "name": "allowNA (Optional)",
            "text": [
              "The default is FALSE. Decide should NA be returned for invalid multibyte strings or \"bytes\"-encoded strings (rather than throwing an error)?"
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "nchar(\"Exploratory\")",
            "comment": "Returns 11"
          },
          {
            "code": "nchar(\"西田\")",
            "comment": "Returns 2"
          },
          {
            "code": "nchar(\"西田\", type = \"bytes\")",
            "comment": "Returns 6"
          }
        ],
        "tags": [
          "size",
          "number of letters",
          "count"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns # of letters or size of a given value.</p>\n\n<p><strong>Syntax</strong><br>\nnchar(<code>&lt;column&gt;</code>, type = <code>&quot;chars&quot;|&quot;bytes&quot;|&quot;width&quot;</code>, allowNA = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>type (Optional) - The default is &quot;chars&quot;. Set a type to count a given characters among &quot;chars&quot;, &quot;bytes&quot;, or &quot;width&quot;.</li>\n<li>allowNA (Optional) - The default is FALSE. Decide should NA be returned for invalid multibyte strings or &quot;bytes&quot;-encoded strings (rather than throwing an error)?</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nnchar(&quot;Exploratory&quot;)<br>\n<em>Returns 11</em><br>\nnchar(&quot;西田&quot;)<br>\n<em>Returns 2</em><br>\nnchar(&quot;西田&quot;, type = &quot;bytes&quot;)<br>\n<em>Returns 6</em>  </p>\n"
      },
      {
        "name": "parse_number",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Parse characters, extract numeric values, and convert to number data type including",
        "usage": [
          {
            "syntax": "parse_number(```<column>```, na = c(\"\", \"NA\"), locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_number("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na = c(\"\", \"NA\"), locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "locale": "locale"
            },
            "html": "parse_number(<b><i>column</i></b>, na = c(\"\", \"NA\"), locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na",
            "text": [
              "The default is null and \"NA\". Provide a list of text to be registered as NA."
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session locale using default_locale() function."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "parse_number(\"12345\")",
            "comment": "Returns 12345"
          },
          {
            "code": "parse_number(\"12345.10\")",
            "comment": "Returns 12345.1"
          },
          {
            "code": "parse_number(\"$12,345.10\")",
            "comment": "Returns 12345.1"
          },
          {
            "code": "parse_number(\"$12.20M\")",
            "comment": "Returns 12.2"
          },
          {
            "code": "parse_number(as.Date(\"2015-01-30\") - as.Date(\"2015-01-15\"))",
            "comment": "Returns 15"
          }
        ],
        "tags": [
          "Type Conversion",
          "Parse",
          "Numeric",
          "Number"
        ],
        "categories": [
          "Type Conversion",
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nParse characters, extract numeric values, and convert to number data type including</p>\n\n<p><strong>Syntax</strong><br>\nparse_number(<code>&lt;column&gt;</code>, na = c(&quot;&quot;, &quot;NA&quot;), locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na - The default is null and &quot;NA&quot;. Provide a list of text to be registered as NA.</li>\n<li>locale - The default is the session locale using default_locale() function.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nparse_number(&quot;12345&quot;)<br>\n<em>Returns 12345</em><br>\nparse_number(&quot;12345.10&quot;)<br>\n<em>Returns 12345.1</em><br>\nparse_number(&quot;$12,345.10&quot;)<br>\n<em>Returns 12345.1</em><br>\nparse_number(&quot;$12.20M&quot;)<br>\n<em>Returns 12.2</em><br>\nparse_number(as.Date(&quot;2015-01-30&quot;) - as.Date(&quot;2015-01-15&quot;))<br>\n<em>Returns 15</em>  </p>\n"
      },
      {
        "name": "str_c",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Concatenates multiple text from multiple columns.",
        "usage": [
          {
            "syntax": "str_c(```<column(s)>```, sep = ```<text>```, collapse = ```<text>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_c("
              },
              {
                "id": "column(s)",
                "value": "<column(s)>"
              },
              {
                "id": "2",
                "value": ", sep = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "4",
                "value": ", collapse = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "__repeat__": "column",
              "sep": "text",
              "collapse": "text"
            },
            "html": "str_c(<b><i>column(s)</i></b>, sep = <b><i>text</i></b>, collapse = <b><i>text</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "sep (Optional)",
            "text": [
              "specify a character to separate values. The default is no space."
            ]
          },
          {
            "name": "sep (Optional)",
            "text": [
              "specify a character(s) to combine all text into one single text."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_c(CARRIER, TAIL_NUM)",
            "comment": "Concatenate CARRIER and TAIL_NUM values."
          },
          {
            "code": "str_c(CARRIER, TAIL_NUM, sep = \"-\")",
            "comment": "Use dash as a separator to concatenate CARRIER and TAIL_NUM values."
          },
          {
            "code": "summarize(combined_text = str_c(CARRIER, collapse = \",\")",
            "comment": "Use comma ',' as a separator to combine all the CARRIER names into one text for each group."
          }
        ],
        "tags": [
          "concatenate",
          "merge",
          "add"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nConcatenates multiple text from multiple columns.</p>\n\n<p><strong>Syntax</strong><br>\nstr_c(<code>&lt;column(s)&gt;</code>, sep = <code>&lt;text&gt;</code>, collapse = <code>&lt;text&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>sep (Optional) - specify a character to separate values. The default is no space.</li>\n<li>sep (Optional) - specify a character(s) to combine all text into one single text.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_c(CARRIER, TAIL_NUM)<br>\n<em>Concatenate CARRIER and TAIL_NUM values.</em><br>\nstr_c(CARRIER, TAIL_NUM, sep = &quot;-&quot;)<br>\n<em>Use dash as a separator to concatenate CARRIER and TAIL_NUM values.</em><br>\nsummarize(combined_text = str_c(CARRIER, collapse = &quot;,&quot;)<br>\n<em>Use comma &#39;,&#39; as a separator to combine all the CARRIER names into one text for each group.</em>  </p>\n"
      },
      {
        "name": "str_clean",
        "package": "tam",
        "source": "exploratory doc",
        "description": "Cleans up text by removing escape characters (e.g. \\n, \\t), extra white spaces, extra period, and leading and trailing spaces.",
        "usage": [
          {
            "syntax": "str_clean(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_clean("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "str_clean(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_clean(\" Exploratory ..io \")",
            "comment": "returns \"Exploratory.io\"."
          }
        ],
        "tags": [
          "white space",
          "trim",
          "clean",
          "scrub"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nCleans up text by removing escape characters (e.g. \\n, \\t), extra white spaces, extra period, and leading and trailing spaces.</p>\n\n<p><strong>Syntax</strong><br>\nstr_clean(<code>&lt;column_text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter</p>\n\n<p><strong>Example</strong><br>\nstr_clean(&quot; Exploratory ..io &quot;)<br>\n<em>returns &quot;Exploratory.io&quot;.</em></p>\n"
      },
      {
        "name": "str_conv",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Convert text to a specified encoding. e.g. UTF-8",
        "usage": [
          {
            "syntax": "str_conv(```<column>```, ```<encoding>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_conv("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "encoding",
                "value": "<encoding>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "1": "encoding"
            },
            "html": "str_conv(<b><i>column</i></b>, <b><i>encoding</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "encoding",
            "text": [
              "String to re-encode."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [

        ],
        "tags": [
          "encoding",
          "convert",
          "character set"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert text to a specified encoding. e.g. UTF-8  </p>\n\n<p><strong>Syntax</strong><br>\nstr_conv(<code>&lt;column&gt;</code>, <code>&lt;encoding&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>encoding - String to re-encode.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_conv(&quot;Exploratory&quot;, &quot;UTF-8&quot;)  </p>\n"
      },
      {
        "name": "str_count",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Return number of letters or words in text data. You can also set a pattern to count only the matched pattern or text.",
        "usage": [
          {
            "syntax": "str_count(```<column>```, pattern = ```[<regular_expression>]```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_count("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", pattern = "
              },
              {
                "id": "3",
                "value": "[<regular_expression>]"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "str_count(<b><i>column</i></b>, pattern = ```[<regular_expression>]```)"
          },
          {
            "syntax": "str_count(```<column>```, pattern = ```[boundary(\"word\")]```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_count("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", pattern = "
              },
              {
                "id": "3",
                "value": "[boundary(\"word\")]"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "str_count(<b><i>column</i></b>, pattern = ```[boundary(\"word\")]```)"
          }
        ],
        "arguments": [
          {
            "name": "pattern (Optional)",
            "text": [
              "regular expression to match"
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "str_count(\"I'm traveling to New York on 1/1.\")",
            "comment": "returns 33 including punctuations and space"
          },
          {
            "code": "str_count(\"I'm traveling to New York on 1/1.\", \"New\")",
            "comment": "returns 1 by matching text 'New'"
          },
          {
            "code": "str_count(\"I'm traveling to New York on 1/1.\", \"[:alpha:]\")",
            "comment": "returns 22 counting only alphabet letters"
          },
          {
            "code": "str_count(\"I'm traveling to New York on 1/1.\", \"[:digit:]\")",
            "comment": "returns 2 counting only digit letters"
          },
          {
            "code": "str_count(\"I'm traveling to New York.\", boundary(\"word\"))",
            "comment": "returns 5 counting as words"
          },
          {
            "code": "str_count(\"I'm traveling to New York on 1/1.\", \".\")",
            "comment": "returns 33 because dot matches anything"
          },
          {
            "code": "str_count(\"I'm traveling to New York on 1/1.\", fixed(\".\"))",
            "comment": "returns 1 because dot is searching dot as letter with 'fixed()'"
          }
        ],
        "tags": [
          "letters",
          "words",
          "count",
          "number of"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn number of letters or words in text data. You can also set a pattern to count only the matched pattern or text.</p>\n\n<p><strong>Syntax</strong><br>\nstr_count(<code>&lt;column&gt;</code>, pattern = <code>[&lt;regular_expression&gt;]</code>)<br>\nstr_count(<code>&lt;column&gt;</code>, pattern = <code>[boundary(&quot;word&quot;)]</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>pattern (Optional) - regular expression to match</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric    </p>\n\n<p><strong>Example</strong><br>\nstr_count(&quot;I&#39;m traveling to New York on 1/1.&quot;)<br>\n<em>returns 33 including punctuations and space</em><br>\nstr_count(&quot;I&#39;m traveling to New York on 1/1.&quot;, &quot;New&quot;)<br>\n<em>returns 1 by matching text &#39;New&#39;</em><br>\nstr_count(&quot;I&#39;m traveling to New York on 1/1.&quot;, &quot;[:alpha:]&quot;)<br>\n<em>returns 22 counting only alphabet letters</em><br>\nstr_count(&quot;I&#39;m traveling to New York on 1/1.&quot;, &quot;[:digit:]&quot;)<br>\n<em>returns 2 counting only digit letters</em><br>\nstr_count(&quot;I&#39;m traveling to New York.&quot;, boundary(&quot;word&quot;))<br>\n<em>returns 5 counting as words</em><br>\nstr_count(&quot;I&#39;m traveling to New York on 1/1.&quot;, &quot;.&quot;)<br>\n<em>returns 33 because dot matches anything</em><br>\nstr_count(&quot;I&#39;m traveling to New York on 1/1.&quot;, fixed(&quot;.&quot;))<br>\n<em>returns 1 because dot is searching dot as letter with &#39;fixed()&#39;</em>  </p>\n"
      },
      {
        "name": "str_count_all",
        "package": "tam",
        "source": "exploratory doc",
        "description": "Count patterns from texts",
        "usage": [
          {
            "syntax": "str_count_all(```<column>```, patterns=```<character_vector>```, remove.zero=```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_count_all("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", patterns="
              },
              {
                "id": "character_vector",
                "value": "<character_vector>"
              },
              {
                "id": "4",
                "value": ", remove.zero="
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "patterns": "character_vector",
              "remove.zero": "logical"
            },
            "html": "str_count_all(<b><i>column</i></b>, patterns=<b><i>character_vector</i></b>, remove.zero=<b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "patterns",
            "text": [
              "Pattern to count. They can be regex."
            ]
          },
          {
            "name": "remove.zero",
            "text": [
              "The default is TRUE. Set whether you want to keep the text patterns with zero count."
            ]
          }
        ],
        "return_value": "List of data frame",
        "examples": [
          {
            "code": "str_count_all(\"I ate banana, apple, and peach yesterday, and banana, peach today.\", patterns=c(\"apple\", \"banana\"), remove.zero=TRUE)",
            "comment": "Returns a list column of data frames with 'apple' and 'banana' columns."
          }
        ],
        "tags": [
          "count",
          "regex"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nCount patterns from texts</p>\n\n<p><strong>Syntax</strong><br>\nstr_count_all(<code>&lt;column_text&gt;</code>, patterns=<code>&lt;character_vector&gt;</code>, remove.zero=<code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>patterns - Pattern to count. They can be regex.</li>\n<li>remove.zero - The default is TRUE. Set whether you want to keep the text patterns with zero count.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nList of data frame</p>\n\n<p><strong>Example</strong><br>\nstr_count_all(&quot;I ate banana, apple, and peach yesterday, and banana, peach today.&quot;, patterns=c(&quot;apple&quot;, &quot;banana&quot;), remove.zero=TRUE)<br>\n<em>Returns a list column of data frames with &#39;apple&#39; and &#39;banana&#39; columns.</em></p>\n"
      },
      {
        "name": "str_detect",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Return TRUE or FALSE based on whether Text data contains a given text or not",
        "usage": [
          {
            "syntax": "str_detect(```<column>```, ```<pattern>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_detect("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "pattern",
                "value": "<pattern>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "1": "pattern"
            },
            "html": "str_detect(<b><i>column</i></b>, <b><i>pattern</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "pattern",
            "text": [
              "text or regular expression to look for."
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "str_detect(\"New York\", \"New\")",
            "comment": "returns TRUE because there is 'New' in the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"[:alpha:]\")",
            "comment": "returns TRUE because there are alphabet letters in the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"[:digit:]\")",
            "comment": "returns TRUE because there are numeric (digit) letters in the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"^New\")",
            "comment": "returns TRUE because there is \"New\" text at the beginning of the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"New$\")",
            "comment": "returns TRUE because there is no \"New\" text at the end of the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"N.w\")",
            "comment": "returns TRUE because 'New' starts with 'N' and ends with 'w'"
          },
          {
            "code": "str_detect(\"New York on 1/1.\", fixed(\"N.w\"))",
            "comment": "returns FALSE because 'N.w' exact matching letters don't exist"
          },
          {
            "code": "str_detect(\"New York on 1/1.\", c(\"New\", \"Old\"))",
            "comment": "returns TRUE because a given text matches with one of matching texts"
          }
        ],
        "tags": [
          "matching",
          "detect",
          "find",
          "exist"
        ],
        "categories": [
          "Text",
          "Logical",
          "List"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn TRUE or FALSE based on whether Text data contains a given text or not</p>\n\n<p><strong>Syntax</strong><br>\nstr_detect(<code>&lt;column&gt;</code>, <code>&lt;pattern&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>pattern - text or regular expression to look for.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nstr_detect(&quot;New York&quot;, &quot;New&quot;)<br>\n<em>returns TRUE because there is &#39;New&#39; in the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;[:alpha:]&quot;)<br>\n<em>returns TRUE because there are alphabet letters in the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;[:digit:]&quot;)<br>\n<em>returns TRUE because there are numeric (digit) letters in the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;^New&quot;)<br>\n<em>returns TRUE because there is &quot;New&quot; text at the beginning of the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;New$&quot;)<br>\n<em>returns TRUE because there is no &quot;New&quot; text at the end of the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;N.w&quot;)<br>\n<em>returns TRUE because &#39;New&#39; starts with &#39;N&#39; and ends with &#39;w&#39;</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, fixed(&quot;N.w&quot;))<br>\n<em>returns FALSE because &#39;N.w&#39; exact matching letters don&#39;t exist</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, c(&quot;New&quot;, &quot;Old&quot;))<br>\n<em>returns TRUE because a given text matches with one of matching texts</em>  </p>\n"
      },
      {
        "name": "str_dup",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Repeat text values.",
        "usage": [
          {
            "syntax": "str_dup(```<column>```, times = ```<numeber>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_dup("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", times = "
              },
              {
                "id": "numeber",
                "value": "<numeber>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "times": "numeber"
            },
            "html": "str_dup(<b><i>column</i></b>, times = <b><i>numeber</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "times",
            "text": [
              "number to repeat"
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_dup(\"wow\", 2)",
            "comment": "returns \"wowwow\"."
          }
        ],
        "tags": [
          "duplicate",
          "copy"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nRepeat text values.</p>\n\n<p><strong>Syntax</strong><br>\nstr_dup(<code>&lt;column_text&gt;</code>, times = <code>&lt;numeber&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>times - number to repeat<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_dup(&quot;wow&quot;, 2)<br>\n<em>returns &quot;wowwow&quot;.</em>  </p>\n"
      },
      {
        "name": "str_extract",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Extract only letters that match with a given letters or patterns",
        "usage": [
          {
            "syntax": "str_extract(```<column>```, ```<pattern>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_extract("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "pattern",
                "value": "<pattern>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "1": "pattern"
            },
            "html": "str_extract(<b><i>column</i></b>, <b><i>pattern</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "pattern",
            "text": [
              "text or regular expression to look for."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_extract(\"ABCabc123\", \"[A-Za-z]+\")",
            "comment": "returns \"ABCabc\" extracting only alphabet letters."
          },
          {
            "code": "str_extract(\"ABCabc123\", \"[:alpha:]+\")",
            "comment": "returns \"ABCabc\" extracting only alphabet letters."
          },
          {
            "code": "str_extract(\"ABCabc123\", \"[0-9]+\")",
            "comment": "returns \"123\" extracting only numbers"
          },
          {
            "code": "str_extract(\"ABCabc123\", \"[:digit:]+\")",
            "comment": "returns \"123\" extracting only numbers"
          }
        ],
        "tags": [
          "extract",
          "take out"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract only letters that match with a given letters or patterns</p>\n\n<p><strong>Syntax</strong><br>\nstr_extract(<code>&lt;column_text&gt;</code>, <code>&lt;pattern&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>pattern - text or regular expression to look for.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_extract(&quot;ABCabc123&quot;, &quot;[A-Za-z]+&quot;)<br>\n<em>returns &quot;ABCabc&quot; extracting only alphabet letters.</em><br>\nstr_extract(&quot;ABCabc123&quot;, &quot;[:alpha:]+&quot;)<br>\n<em>returns &quot;ABCabc&quot; extracting only alphabet letters.</em><br>\nstr_extract(&quot;ABCabc123&quot;, &quot;[0-9]+&quot;)<br>\n<em>returns &quot;123&quot; extracting only numbers</em><br>\nstr_extract(&quot;ABCabc123&quot;, &quot;[:digit:]+&quot;)<br>\n<em>returns &quot;123&quot; extracting only numbers</em>   </p>\n"
      },
      {
        "name": "str_length",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Return number of letters in text data.",
        "usage": [
          {
            "syntax": "str_length(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_length("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "str_length(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "str_length(\"I'm traveling to New York.\")",
            "comment": "Returns 26 including punctuations and space"
          }
        ],
        "tags": [
          "letters",
          "count",
          "length",
          "number of"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn number of letters in text data.  </p>\n\n<p><strong>Syntax</strong><br>\nstr_length(<code>&lt;column&gt;</code>)    </p>\n\n<p><strong>Return Value</strong><br>\nNumeric    </p>\n\n<p><strong>Example</strong><br>\nstr_length(&quot;I&#39;m traveling to New York.&quot;)<br>\n<em>Returns 26 including punctuations and space</em></p>\n"
      },
      {
        "name": "str_pad",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Add white spaces to text values to make the total length to be exact a specified number.",
        "usage": [
          {
            "syntax": "str_pad(```<column>```, width = ```<number>```, side = ```\"left\"|\"right\"|\"both\"```, pad = ```<text>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_pad("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", width = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ", side = "
              },
              {
                "id": "5",
                "value": "\"left\"|\"right\"|\"both\""
              },
              {
                "id": "6",
                "value": ", pad = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "width": "number",
              "side": [
                "\"left\"",
                "\"right\"",
                "\"both\""
              ],
              "pad": "text"
            },
            "html": "str_pad(<b><i>column</i></b>, width = <b><i>number</i></b>, side = ```\"left\"|\"right\"|\"both\"```, pad = <b><i>text</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "width",
            "text": [
              "Minimum width of padded strings."
            ]
          },
          {
            "name": "side (Optional)",
            "text": [
              "The default is \"left\". Side on which padding character is added (left, right or both)."
            ]
          },
          {
            "name": "pad (Optional)",
            "text": [
              "The default is a space. Single padding character."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_pad(\"Exploratory\", 3)",
            "comment": "returns \"Exploratory\" because 3 is less than number of the original given text."
          },
          {
            "code": "str_pad(\"Exploratory\", 30, \"left\")",
            "comment": "returns \"                   Exploratory\" to make the length of the text to be 30 by adding white spaces."
          }
        ],
        "tags": [
          "padding",
          "white space"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nAdd white spaces to text values to make the total length to be exact a specified number.</p>\n\n<p><strong>Syntax</strong><br>\nstr_pad(<code>&lt;column_text&gt;</code>, width = <code>&lt;number&gt;</code>, side = <code>&quot;left&quot;|&quot;right&quot;|&quot;both&quot;</code>, pad = <code>&lt;text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>width - Minimum width of padded strings.</li>\n<li>side (Optional) - The default is &quot;left&quot;. Side on which padding character is added (left, right or both).</li>\n<li>pad (Optional) - The default is a space. Single padding character.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_pad(&quot;Exploratory&quot;, 3)<br>\n<em>returns &quot;Exploratory&quot; because 3 is less than number of the original given text.</em><br>\nstr_pad(&quot;Exploratory&quot;, 30, &quot;left&quot;)<br>\n<em>returns &quot;                   Exploratory&quot; to make the length of the text to be 30 by adding white spaces.</em>  </p>\n"
      },
      {
        "name": "str_replace",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Replace letters that matches with a given letters or expressions",
        "usage": [
          {
            "syntax": "str_replace(```<column>```, ```<pattern>```, ```<replacement>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_replace("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "pattern",
                "value": "<pattern>"
              },
              {
                "id": "4",
                "value": ", "
              },
              {
                "id": "replacement",
                "value": "<replacement>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "1": "pattern",
              "2": "replacement"
            },
            "html": "str_replace(<b><i>column</i></b>, <b><i>pattern</i></b>, <b><i>replacement</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "pattern",
            "text": [
              "text or regular expression to look for"
            ]
          },
          {
            "name": "replacement",
            "text": [
              "text to replace with"
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_replace(\"I am traveling to New York!!\", \"York\", \"Jersey\")",
            "comment": "returns \"I am traveling to New Jersey\""
          },
          {
            "code": "str_replace(\"I am traveling to New York!!\", \"[:punct:]\", \"\")",
            "comment": "returns \"I am traveling to New York!\" replacing only the first matching punctuation. You want to use str_replace_all() to replace them all."
          },
          {
            "code": "str_replace(\"New York New\", \"^New\", \"Old\")",
            "comment": "returns \"Old York New\" by finding \"New\" at the beginning and replace it with \"Old\""
          },
          {
            "code": "str_replace(\"New York New.\", \"New$\", \"Old\")",
            "comment": "returns \"New York Old\" by finding \"New\" at the end and replace it with \"Old\""
          },
          {
            "code": "str_replace(\"New York\", str_sub(\"New York\", 4, 8), \"\")",
            "comment": "returns \"New\"."
          }
        ],
        "tags": [
          "replace",
          "substitute",
          "update",
          "change"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nReplace letters that matches with a given letters or expressions</p>\n\n<p><strong>Syntax</strong><br>\nstr_replace(<code>&lt;column&gt;</code>, <code>&lt;pattern&gt;</code>, <code>&lt;replacement&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>pattern - text or regular expression to look for<br></li>\n<li>replacement - text to replace with</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_replace(&quot;I am traveling to New York!!&quot;, &quot;York&quot;, &quot;Jersey&quot;)<br>\n<em>returns &quot;I am traveling to New Jersey&quot;</em><br>\nstr_replace(&quot;I am traveling to New York!!&quot;, &quot;[:punct:]&quot;, &quot;&quot;)<br>\n<em>returns &quot;I am traveling to New York!&quot; replacing only the first matching punctuation. You want to use str_replace_all() to replace them all.</em><br>\nstr_replace(&quot;New York New&quot;, &quot;^New&quot;, &quot;Old&quot;)<br>\n<em>returns &quot;Old York New&quot; by finding &quot;New&quot; at the beginning and replace it with &quot;Old&quot;</em><br>\nstr_replace(&quot;New York New.&quot;, &quot;New$&quot;, &quot;Old&quot;)<br>\n<em>returns &quot;New York Old&quot; by finding &quot;New&quot; at the end and replace it with &quot;Old&quot;</em><br>\nstr_replace(&quot;New York&quot;, str_sub(&quot;New York&quot;, 4, 8), &quot;&quot;)<br>\n<em>returns &quot;New&quot;.</em>  </p>\n"
      },
      {
        "name": "str_replace_all",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Replace letters that matches with a given letters or expressions",
        "usage": [
          {
            "syntax": "str_replace_all(```<column>```, ```<pattern>```, ```<replacement>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_replace_all("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "pattern",
                "value": "<pattern>"
              },
              {
                "id": "4",
                "value": ", "
              },
              {
                "id": "replacement",
                "value": "<replacement>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "1": "pattern",
              "2": "replacement"
            },
            "html": "str_replace_all(<b><i>column</i></b>, <b><i>pattern</i></b>, <b><i>replacement</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "pattern",
            "text": [
              "text or regular expression to look for"
            ]
          },
          {
            "name": "replacement",
            "text": [
              "text to replace with"
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_replace_all(\"I am traveling to New York!!\", \"[:punct:]\", \"\")",
            "comment": "returns \"I am traveling to New York\""
          }
        ],
        "tags": [
          "replace",
          "substitute",
          "update",
          "change"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nReplace letters that matches with a given letters or expressions</p>\n\n<p><strong>Syntax</strong><br>\nstr_replace_all(<code>&lt;column&gt;</code>, <code>&lt;pattern&gt;</code>, <code>&lt;replacement&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>pattern - text or regular expression to look for<br></li>\n<li>replacement - text to replace with</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_replace_all(&quot;I am traveling to New York!!&quot;, &quot;[:punct:]&quot;, &quot;&quot;)<br>\n<em>returns &quot;I am traveling to New York&quot;</em>  </p>\n"
      },
      {
        "name": "str_replace_na",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Replace NA values to a specific Text",
        "usage": [
          {
            "syntax": "str_replace_na(```<column>```, ```<replacement>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_replace_na("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "replacement",
                "value": "<replacement>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "1": "replacement"
            },
            "html": "str_replace_na(<b><i>column</i></b>, <b><i>replacement</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "replacement",
            "text": [
              "text to replace with"
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_replace_na(ARR_DELAY, \"Not Available\")",
            "comment": "Returns \"Not Available\" for NA in ARR_DELAY column."
          }
        ],
        "tags": [
          "replace",
          "substitute",
          "update",
          "change"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nReplace NA values to a specific Text</p>\n\n<p><strong>Syntax</strong><br>\nstr_replace_na(<code>&lt;column&gt;</code>, <code>&lt;replacement&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>replacement - text to replace with<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_replace_na(ARR_DELAY, &quot;Not Available&quot;)<br>\n<em>Returns &quot;Not Available&quot; for NA in ARR</em>DELAY column._</p>\n"
      },
      {
        "name": "str_split",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Split a given text into multiple text by a given separator. It will return a list so you want to unnest the newly created column with unnest() function.",
        "usage": [
          {
            "syntax": "str_split(```<column>```, pattern = ```<pattern>```, n = ```<numeric>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_split("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", pattern = "
              },
              {
                "id": "pattern",
                "value": "<pattern>"
              },
              {
                "id": "4",
                "value": ", n = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "pattern": "pattern",
              "n": "numeric"
            },
            "html": "str_split(<b><i>column</i></b>, pattern = <b><i>pattern</i></b>, n = <b><i>numeric</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "pattern",
            "text": [
              "text or regular expression to look for."
            ]
          },
          {
            "name": "n (Optional)",
            "text": [
              "number of pieces to return. Default (Inf) uses all possible split positions."
            ]
          }
        ],
        "return_value": "List",
        "examples": [
          {
            "code": "str_split(\"a, b, c\", \",\")",
            "comment": "returns \"a\"  \" b\" \" c\" in a list format."
          },
          {
            "code": "str_split(\"a, b, c\", \",\", 2)",
            "comment": "returns \"a\"  and \" b, c\" in a list format."
          },
          {
            "code": "mutate(y = str_split(text_a, \",\")) %>% unnest()",
            "comment": "First split a given text column, this will create a list column. Then, unnest() function will break the list by given each element of the list its own row."
          },
          {
            "code": "unnest(y = str_split(text_a, \",\"))",
            "comment": "This is equivalent of the above command."
          }
        ],
        "tags": [
          "padding",
          "white space"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nSplit a given text into multiple text by a given separator. It will return a list so you want to unnest the newly created column with unnest() function.</p>\n\n<p><strong>Syntax</strong><br>\nstr_split(<code>&lt;column_text&gt;</code>, pattern = <code>&lt;pattern&gt;</code>, n = <code>&lt;numeric&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>pattern - text or regular expression to look for.</li>\n<li>n (Optional) - number of pieces to return. Default (Inf) uses all possible split positions.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nList    </p>\n\n<p><strong>Example</strong><br>\nstr_split(&quot;a, b, c&quot;, &quot;,&quot;)<br>\n<em>returns &quot;a&quot;  &quot; b&quot; &quot; c&quot; in a list format.</em><br>\nstr_split(&quot;a, b, c&quot;, &quot;,&quot;, 2)<br>\n<em>returns &quot;a&quot;  and &quot; b, c&quot; in a list format.</em><br>\nmutate(y = str_split(text_a, &quot;,&quot;)) %&gt;% unnest()<br>\n<em>First split a given text column, this will create a list column. Then, unnest() function will break the list by given each element of the list its own row.</em>\nunnest(y = str_split(text_a, &quot;,&quot;))<br>\n<em>This is equivalent of the above command.</em>  </p>\n"
      },
      {
        "name": "str_sub",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Extract letters from Text values based on the position",
        "usage": [
          {
            "syntax": "str_sub(```<column>```, ```<start>```, ```<end>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_sub("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "start",
                "value": "<start>"
              },
              {
                "id": "4",
                "value": ", "
              },
              {
                "id": "end",
                "value": "<end>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "1": "start",
              "2": "end"
            },
            "html": "str_sub(<b><i>column</i></b>, <b><i>start</i></b>, <b><i>end</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "start",
            "text": [
              "a position of the first letter"
            ]
          },
          {
            "name": "end",
            "text": [
              "a position of the last letter"
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_sub(\"Kevin Spacey\", start = 7, end = 12)",
            "comment": "returns \"Spacey\". Starts from 7 to 12."
          },
          {
            "code": "str_sub(\"Kevin Spacey\", start = 7)",
            "comment": "returns \"Spacey\". Starts from 7 to the end."
          },
          {
            "code": "str_sub(Text, start = -6)",
            "comment": "returns \"Spacey\". Last 6 letters."
          }
        ],
        "tags": [
          "substring",
          "extract",
          "portion",
          "start",
          "end"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract letters from Text values based on the position  </p>\n\n<p><strong>Syntax</strong><br>\nstr_sub(<code>&lt;column_text&gt;</code>, <code>&lt;start&gt;</code>, <code>&lt;end&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>start - a position of the first letter</li>\n<li>end - a position of the last letter<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_sub(&quot;Kevin Spacey&quot;, start = 7, end = 12)<br>\n<em>returns &quot;Spacey&quot;. Starts from 7 to 12.</em><br>\nstr_sub(&quot;Kevin Spacey&quot;, start = 7)<br>\n<em>returns &quot;Spacey&quot;. Starts from 7 to the end.</em><br>\nstr_sub(Text, start = -6)<br>\n<em>returns &quot;Spacey&quot;. Last 6 letters.</em>  </p>\n"
      },
      {
        "name": "str_to_lower",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Convert text to lowercase",
        "usage": [
          {
            "syntax": "str_to_lower(```<column>```, locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_to_lower("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "locale": "locale"
            },
            "html": "str_to_lower(<b><i>column</i></b>, locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "locale (Optional)",
            "text": [
              "Locale to use for the transformation."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_to_upper(\"CALIFORNIA\")",
            "comment": "Returns \"california\""
          }
        ],
        "tags": [
          "lowercase",
          "uppercase",
          "small"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert text to lowercase</p>\n\n<p><strong>Syntax</strong><br>\nstr_to_lower(<code>&lt;column&gt;</code>, locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>locale (Optional) - Locale to use for the transformation.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_to_upper(&quot;CALIFORNIA&quot;)<br>\n<em>Returns &quot;california&quot;</em>  </p>\n"
      },
      {
        "name": "str_to_title",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Convert text to Title-case",
        "usage": [
          {
            "syntax": "str_to_title(```<column>```, locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_to_title("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "locale": "locale"
            },
            "html": "str_to_title(<b><i>column</i></b>, locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "locale (Optional)",
            "text": [
              "Locale to use for the transformation."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_to_title(\"CALIFORNIA\")",
            "comment": "Returns \"California\""
          }
        ],
        "tags": [
          "title",
          "uppercase",
          "lowercase"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert text to Title-case</p>\n\n<p><strong>Syntax</strong><br>\nstr_to_title(<code>&lt;column&gt;</code>, locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>locale (Optional) - Locale to use for the transformation.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_to_title(&quot;CALIFORNIA&quot;)<br>\n<em>Returns &quot;California&quot;</em>  </p>\n"
      },
      {
        "name": "str_to_upper",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Convert text to UPPERCASE",
        "usage": [
          {
            "syntax": "str_to_upper(```<column>```, locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_to_upper("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "locale": "locale"
            },
            "html": "str_to_upper(<b><i>column</i></b>, locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "locale (Optional)",
            "text": [
              "Locale to use for the transformation."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_to_upper(\"california\")",
            "comment": "Returns \"CALIFORNIA\""
          },
          {
            "code": "str_to_upper(\"i\", \"en\")",
            "comment": "Seting English locale would return 'i'"
          },
          {
            "code": "str_to_upper(\"i\", \"tr\")",
            "comment": "Setting Turkish locale would return dotted 'I' in capital"
          }
        ],
        "tags": [
          "uppercase",
          "lowercase",
          "capitalize",
          "big"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert text to UPPERCASE</p>\n\n<p><strong>Syntax</strong><br>\nstr_to_upper(<code>&lt;column&gt;</code>, locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>locale (Optional) - Locale to use for the transformation.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_to_upper(&quot;california&quot;)<br>\n<em>Returns &quot;CALIFORNIA&quot;</em><br>\nstr_to_upper(&quot;i&quot;, &quot;en&quot;)<br>\n<em>Seting English locale would return &#39;i&#39;</em><br>\nstr_to_upper(&quot;i&quot;, &quot;tr&quot;)<br>\n<em>Setting Turkish locale would return dotted &#39;I&#39; in capital</em>  </p>\n"
      },
      {
        "name": "str_trim",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Trim (or remove) white spaces in Text values",
        "usage": [
          {
            "syntax": "str_trim(```<column>```, side = ```\"both\"|\"left\"|\"right\"```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_trim("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", side = "
              },
              {
                "id": "3",
                "value": "\"both\"|\"left\"|\"right\""
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "side": [
                "\"both\"",
                "\"left\"",
                "\"right\""
              ]
            },
            "html": "str_trim(<b><i>column</i></b>, side = ```\"both\"|\"left\"|\"right\"```)"
          }
        ],
        "arguments": [
          {
            "name": "side (Optional)",
            "text": [
              "The default is \"both\". Side on which white space to be removed. (left, right or both)."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "str_trim(\"  String with trailing and leading white space\\t\")",
            "comment": "returns \"String with trailing and leading white space\"."
          },
          {
            "code": "str_trim(\"\\n\\nString with trailing and leading white space\\n\\n\")",
            "comment": "returns \"String with trailing and leading white space\"."
          }
        ],
        "tags": [
          "trim",
          "remove"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nTrim (or remove) white spaces in Text values</p>\n\n<p><strong>Syntax</strong><br>\nstr_trim(<code>&lt;column_text&gt;</code>, side = <code>&quot;both&quot;|&quot;left&quot;|&quot;right&quot;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>side (Optional) - The default is &quot;both&quot;. Side on which white space to be removed. (left, right or both).</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nstr_trim(&quot;  String with trailing and leading white space\\t&quot;)<br>\n<em>returns &quot;String with trailing and leading white space&quot;.</em><br>\nstr_trim(&quot;\\n\\nString with trailing and leading white space\\n\\n&quot;)<br>\n<em>returns &quot;String with trailing and leading white space&quot;.</em>  </p>\n"
      },
      {
        "name": "word",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Extract First / Last Nth Word in Text data",
        "usage": [
          {
            "syntax": "word(```<column>```, ```<start>```, ```<end>```, sep = ```<text>```)",
            "tokens": [
              {
                "id": "0",
                "value": "word("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "start",
                "value": "<start>"
              },
              {
                "id": "4",
                "value": ", "
              },
              {
                "id": "end",
                "value": "<end>"
              },
              {
                "id": "6",
                "value": ", sep = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "1": "start",
              "2": "end",
              "sep": "text"
            },
            "html": "word(<b><i>column</i></b>, <b><i>start</i></b>, <b><i>end</i></b>, sep = <b><i>text</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "start (Optional)",
            "text": [
              "an integer number indicating a position of the first word to extract."
            ]
          },
          {
            "name": "end (Optional)",
            "text": [
              "an integer number indicating a position of the last word to extract."
            ]
          },
          {
            "name": "sep (Optional)",
            "text": [
              "set a character(s) to separate words."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "word(\"I am traveling to New York\", 1)",
            "comment": "returns \"I\"."
          },
          {
            "code": "word(\"I am traveling to New York\", 1, 3)",
            "comment": "returns \"I am traveling\""
          },
          {
            "code": "word(\"I am traveling to New York\", 2)",
            "comment": "returns \"am\"."
          },
          {
            "code": "word(\"I am traveling to New York\", -1)",
            "comment": "returns \"York\""
          },
          {
            "code": "word(\"I am traveling to New York\", 2, -1)",
            "comment": "returns \"am traveling to New York\""
          },
          {
            "code": "word(\"123-456-789\", 1, sep = \"-\")",
            "comment": "returns \"123\"."
          },
          {
            "code": "word(\"123.456.789\", 1, sep = \".\")",
            "comment": "returns null. You want to use fixed() to make the dot literally mean dot."
          },
          {
            "code": "word(\"123.4568.789\", 1, sep = fixed(\".\"))",
            "comment": "returns \"123\"."
          }
        ],
        "tags": [
          "word",
          "extract",
          "retrieve"
        ],
        "categories": [
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract First / Last Nth Word in Text data</p>\n\n<p><strong>Syntax</strong><br>\nword(<code>&lt;column_text&gt;</code>, <code>&lt;start&gt;</code>, <code>&lt;end&gt;</code>, sep = <code>&lt;text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>start (Optional) - an integer number indicating a position of the first word to extract.<br></li>\n<li>end (Optional) - an integer number indicating a position of the last word to extract.</li>\n<li>sep (Optional) - set a character(s) to separate words.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nword(&quot;I am traveling to New York&quot;, 1)<br>\n<em>returns &quot;I&quot;.</em><br>\nword(&quot;I am traveling to New York&quot;, 1, 3)<br>\n<em>returns &quot;I am traveling&quot;</em><br>\nword(&quot;I am traveling to New York&quot;, 2)<br>\n<em>returns &quot;am&quot;.</em><br>\nword(&quot;I am traveling to New York&quot;, -1)<br>\n<em>returns &quot;York&quot;</em><br>\nword(&quot;I am traveling to New York&quot;, 2, -1)<br>\n<em>returns &quot;am traveling to New York&quot;</em><br>\nword(&quot;123-456-789&quot;, 1, sep = &quot;-&quot;)<br>\n<em>returns &quot;123&quot;.</em>\nword(&quot;123.456.789&quot;, 1, sep = &quot;.&quot;)<br>\n<em>returns null. You want to use fixed() to make the dot literally mean dot.</em><br>\nword(&quot;123.4568.789&quot;, 1, sep = fixed(&quot;.&quot;))<br>\n<em>returns &quot;123&quot;.</em>  </p>\n"
      }
    ]
  },
  {
    "category": "Date",
    "functions": [
      {
        "name": "ceiling_date",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Rounds date/time up to the nearest integer value of the specified time unit.",
        "usage": [
          {
            "syntax": "ceiling_date(```<column>```, unit = ```<unit>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ceiling_date("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", unit = "
              },
              {
                "id": "unit",
                "value": "<unit>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date",
              "unit": "unit"
            },
            "html": "ceiling_date(<b><i>column</i></b>, unit = <b><i>unit</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "unit",
            "text": [
              "second, minute, hour, day, week, month, year, or quarter"
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "ceiling_date(A, \"second\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "ceiling_date(A, \"minute\")",
            "comment": "returns \"2015-10-01 06:11:00 UTC\""
          },
          {
            "code": "ceiling_date(A, \"hour\")",
            "comment": "returns \"2015-10-01 07:00:00 UTC\""
          },
          {
            "code": "ceiling_date(A, \"day\")",
            "comment": "returns \"2015-10-02 UTC\""
          },
          {
            "code": "ceiling_date(A, \"week\")",
            "comment": "returns \"2015-10-04 UTC\""
          },
          {
            "code": "ceiling_date(A, \"month\")",
            "comment": "returns \"2015-11-01 UTC\""
          },
          {
            "code": "ceiling_date(A, \"quarter\")",
            "comment": "returns \"2016-01-01 UTC\""
          },
          {
            "code": "ceiling_date(A, \"year\")",
            "comment": "returns \"2016-01-01 UTC\""
          }
        ],
        "tags": [
          "round",
          "ceiling",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nRounds date/time up to the nearest integer value of the specified time unit.</p>\n\n<p><strong>Syntax</strong><br>\nceiling_date(<code>&lt;column_date&gt;</code>, unit = <code>&lt;unit&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>unit - second, minute, hour, day, week, month, year, or quarter</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nceiling_date(A, &quot;second&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nceiling_date(A, &quot;minute&quot;)<br>\n<em>returns &quot;2015-10-01 06:11:00 UTC&quot;</em><br>\nceiling_date(A, &quot;hour&quot;)<br>\n<em>returns &quot;2015-10-01 07:00:00 UTC&quot;</em><br>\nceiling_date(A, &quot;day&quot;)<br>\n<em>returns &quot;2015-10-02 UTC&quot;</em><br>\nceiling_date(A, &quot;week&quot;)<br>\n<em>returns &quot;2015-10-04 UTC&quot;</em><br>\nceiling_date(A, &quot;month&quot;)<br>\n<em>returns &quot;2015-11-01 UTC&quot;</em><br>\nceiling_date(A, &quot;quarter&quot;)<br>\n<em>returns &quot;2016-01-01 UTC&quot;</em><br>\nceiling_date(A, &quot;year&quot;)<br>\n<em>returns &quot;2016-01-01 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "date_decimal",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Converts numeric data calculated as a fraction of the year to date data type.",
        "usage": [
          {
            "syntax": "date_decimal(```<column>```, tz = ```<timezone>```)",
            "tokens": [
              {
                "id": "0",
                "value": "date_decimal("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "tz": "timezone"
            },
            "html": "date_decimal(<b><i>column</i></b>, tz = <b><i>timezone</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "date_decimal(2015.953)",
            "comment": "Returns \"2015-12-14 20:16:47 UTC\""
          }
        ],
        "tags": [

        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConverts numeric data calculated as a fraction of the year to date data type.</p>\n\n<p><strong>Syntax</strong><br>\ndate_decimal(<code>&lt;column_num&gt;</code>, tz = <code>&lt;timezone&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\ndate_decimal(2015.953)<br>\n<em>Returns &quot;2015-12-14 20:16:47 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "day",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract Day",
        "usage": [
          {
            "syntax": "day(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "day("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date"
            },
            "html": "day(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "day(\"2015-10-01 06:15:30\")",
            "comment": "returns 1"
          }
        ],
        "tags": [
          "day",
          "extract",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract Day</p>\n\n<p><strong>Syntax</strong><br>\nday(<code>&lt;column_date&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric         </p>\n\n<p><strong>Example</strong><br>\nday(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 1</em></p>\n"
      },
      {
        "name": "days",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert a number to day periods so you can use it for further calculations.",
        "usage": [
          {
            "syntax": "days(```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "days("
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "number"
            },
            "html": "days(<b><i>number</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "days(1)",
            "comment": "returns \"1d 0H 0M 0S\""
          },
          {
            "code": "ymd_hms(\"2015-10-01 06:15:30\") + days(1)",
            "comment": "returns \"2015-10-02 06:15:30 UTC\""
          }
        ],
        "tags": [
          "days",
          "add"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a number to day periods so you can use it for further calculations.  </p>\n\n<p><strong>Syntax</strong><br>\ndays(<code>&lt;number&gt;</code>)  </p>\n\n<p><strong>Return Value</strong><br>\nPeriod           </p>\n\n<p><strong>Example</strong><br>\ndays(1)\n<em>returns &quot;1d 0H 0M 0S&quot;</em><br>\nymd_hms(&quot;2015-10-01 06:15:30&quot;) + days(1)<br>\n<em>returns &quot;2015-10-02 06:15:30 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "decimal_date",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Converts date data to numeric data type by calculating the date to a fraction of the year.",
        "usage": [
          {
            "syntax": "decimal_date(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "decimal_date("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date"
            },
            "html": "decimal_date(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "decimal_date(ymd(\"2015-12-15\"))",
            "comment": "Returns 2015.953"
          }
        ],
        "tags": [

        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConverts date data to numeric data type by calculating the date to a fraction of the year.   </p>\n\n<p><strong>Syntax</strong><br>\ndecimal_date(<code>&lt;column_date&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric       </p>\n\n<p><strong>Example</strong><br>\ndecimal_date(ymd(&quot;2015-12-15&quot;))<br>\n<em>Returns 2015.953</em>  </p>\n"
      },
      {
        "name": "difftime",
        "package": "base",
        "source": "exploratory doc",
        "description": "Calculates the difference between two given dates/times.",
        "usage": [
          {
            "syntax": "difftime(```<column>```, ```<column>```, tz = ```<timezone>```, units = ```<difftime_units>```)",
            "tokens": [
              {
                "id": "0",
                "value": "difftime("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "4",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "6",
                "value": ", units = "
              },
              {
                "id": "difftime_units",
                "value": "<difftime_units>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date",
              "1": "column_date",
              "tz": "timezone",
              "units": "difftime_units"
            },
            "html": "difftime(<b><i>column</i></b>, <b><i>column</i></b>, tz = <b><i>timezone</i></b>, units = <b><i>difftime_units</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "specify which timezone to use to read the given data."
            ]
          },
          {
            "name": "units (Optional)",
            "text": [
              "specify an unit to return the result with. The default is \"auto', which would use the most appropriate unit based on the given data. Possible values: years, months, weeks, days, hours, mins, seconds."
            ]
          }
        ],
        "return_value": "Difftime",
        "examples": [
          {
            "code": "difftime(\"2015-12-10\", \"2015-12-30\"))",
            "comment": "Returns Time difference of -20 days."
          },
          {
            "code": "difftime(\"2015-12-10\", \"2015-12-30\", unit = \"hours\")",
            "comment": "Returns Time difference of -480 hours."
          },
          {
            "code": "as.numeric(difftime(\"2015-12-10\", \"2015-12-30\"))",
            "comment": "Returns -20."
          },
          {
            "code": "as.numeric(difftime(\"2015-12-10\", \"2015-12-30\"), units = \"hours\")",
            "comment": "Returns -480."
          }
        ],
        "tags": [

        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nCalculates the difference between two given dates/times.</p>\n\n<p><strong>Syntax</strong><br>\ndifftime(<code>&lt;column_date&gt;</code>, <code>&lt;column_date&gt;</code>, tz = <code>&lt;timezone&gt;</code>, units = <code>&lt;difftime_units&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - specify which timezone to use to read the given data.</li>\n<li>units (Optional) - specify an unit to return the result with. The default is &quot;auto&#39;, which would use the most appropriate unit based on the given data. Possible values: years, months, weeks, days, hours, mins, seconds.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nDifftime  </p>\n\n<p><strong>Example</strong><br>\ndifftime(&quot;2015-12-10&quot;, &quot;2015-12-30&quot;))<br>\n<em>Returns Time difference of -20 days.</em><br>\ndifftime(&quot;2015-12-10&quot;, &quot;2015-12-30&quot;, unit = &quot;hours&quot;)<br>\n<em>Returns Time difference of -480 hours.</em>\nas.numeric(difftime(&quot;2015-12-10&quot;, &quot;2015-12-30&quot;))<br>\n<em>Returns -20.</em><br>\nas.numeric(difftime(&quot;2015-12-10&quot;, &quot;2015-12-30&quot;), units = &quot;hours&quot;)<br>\n<em>Returns -480.</em>  </p>\n"
      },
      {
        "name": "dmy",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains only Date, but not Time.",
        "usage": [
          {
            "syntax": "dmy(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "dmy("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "dmy(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "dmy(\"10-01-2015\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "dmy(\"10/01/2015\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "dmy(\"Created on 10 1 2015\")",
            "comment": "returns \"2015-10-01 UTC\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains only Date, but not Time.</p>\n\n<p><strong>Syntax</strong><br>\ndmy(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\ndmy(&quot;10-01-2015&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\ndmy(&quot;10/01/2015&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\ndmy(&quot;Created on 10 1 2015&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "dmy_h",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "dmy_h(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "dmy_h("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "dmy_h(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "dmy_h(\"10-01-2015 06:10\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          },
          {
            "code": "dmy_h(\"Created on 10 1 2015, at 6:10AM\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          },
          {
            "code": "dmy_h(\"10-01-2015 06\", truncated = 1)",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          }
        ],
        "tags": [

        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\ndmy_h(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\ndmy_h(&quot;10-01-2015 06:10&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em><br>\ndmy_h(&quot;Created on 10 1 2015, at 6:10AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em><br>\ndmy_h(&quot;10-01-2015 06&quot;, truncated = 1)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em>    </p>\n"
      },
      {
        "name": "dmy_hm",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "dmy_hm(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "dmy_hm("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "dmy_hm(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "dmy_hm(\"01-10-2015 06:10\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          },
          {
            "code": "dmy_hm(\"Created on 1 10 2015, at 6:10AM\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          },
          {
            "code": "dmy_hm(\"01-10-2015 06\", truncated = 1)",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          }
        ],
        "tags": [

        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\ndmy_hm(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\ndmy_hm(&quot;01-10-2015 06:10&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em><br>\ndmy_hm(&quot;Created on 1 10 2015, at 6:10AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em><br>\ndmy_hm(&quot;01-10-2015 06&quot;, truncated = 1)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em>    </p>\n"
      },
      {
        "name": "dmy_hms",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "dmy_hms(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "dmy_hms("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "dmy_hms(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "dmy_hms(\"01-10-2015 06:10:15\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "dmy_hms(\"01/10/2015 06:10:15\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "dmy_hms(\"Created on 1 10 2015, at 06:10:15 AM\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "dmy_hms(\"01-10-2015 06\")",
            "comment": "returns NA, because there is not enough data for Date and Time parsing."
          },
          {
            "code": "dmy_hms(\"01-10-2015 06\", truncated = 2)",
            "comment": "returns \"2015-10-01 06:00:00 UTC\" as expected"
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\ndmy_hms(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\ndmy_hms(&quot;01-10-2015 06:10:15&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\ndmy_hms(&quot;01/10/2015 06:10:15&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\ndmy_hms(&quot;Created on 1 10 2015, at 06:10:15 AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\ndmy_hms(&quot;01-10-2015 06&quot;)<br>\n<em>returns NA, because there is not enough data for Date and Time parsing.</em><br>\ndmy_hms(&quot;01-10-2015 06&quot;, truncated = 2)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot; as expected</em>    </p>\n"
      },
      {
        "name": "duration",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Create a duration",
        "usage": [
          {
            "syntax": "duration(```<number>```, units = ```<units>```)",
            "tokens": [
              {
                "id": "0",
                "value": "duration("
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "2",
                "value": ", units = "
              },
              {
                "id": "units",
                "value": "<units>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "number",
              "units": "units"
            },
            "html": "duration(<b><i>number</i></b>, units = <b><i>units</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "units",
            "text": [
              "seconds, minutes, hours, days, weeks, years"
            ]
          }
        ],
        "return_value": "Duration",
        "examples": [
          {
            "code": "duration(1.5, \"minutes\")",
            "comment": "returns 90s"
          },
          {
            "code": "duration(mins = 1.5)",
            "comment": "returns 90s"
          }
        ],
        "tags": [
          "duration"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nCreate a duration</p>\n\n<p><strong>Syntax</strong><br>\nduration(<code>&lt;number&gt;</code>, units = <code>&lt;units&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>units - seconds, minutes, hours, days, weeks, years</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nDuration        </p>\n\n<p><strong>Example</strong><br>\nduration(1.5, &quot;minutes&quot;)\n<em>returns 90s</em><br>\nduration(mins = 1.5)\n<em>returns 90s</em>  </p>\n"
      },
      {
        "name": "dym",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains only Date, but not Time.",
        "usage": [
          {
            "syntax": "dym(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "dym("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "dym(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "dym(\"01-2015-10\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "dym(\"01/2015/10\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "dym(\"Created on 1 2015 10\")",
            "comment": "returns \"2015-10-01 UTC\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains only Date, but not Time.</p>\n\n<p><strong>Syntax</strong><br>\ndym(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\ndym(&quot;01-2015-10&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\ndym(&quot;01/2015/10&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\ndym(&quot;Created on 1 2015 10&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "floor_date",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Rounds date/time down to the nearest integer value of the specified time unit.",
        "usage": [
          {
            "syntax": "floor_date(```<column>```, unit = ```<unit>```)",
            "tokens": [
              {
                "id": "0",
                "value": "floor_date("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", unit = "
              },
              {
                "id": "unit",
                "value": "<unit>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date",
              "unit": "unit"
            },
            "html": "floor_date(<b><i>column</i></b>, unit = <b><i>unit</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "unit",
            "text": [
              "second, minute, hour, day, week, month, year, or quarter"
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "floor_date(A, \"second\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "floor_date(A, \"minute\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          },
          {
            "code": "floor_date(A, \"hour\")",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          },
          {
            "code": "floor_date(A, \"day\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "floor_date(A, \"week\")",
            "comment": "returns \"2015-09-27 UTC\""
          },
          {
            "code": "floor_date(A, \"month\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "floor_date(A, \"quarter\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "floor_date(A, \"year\")",
            "comment": "returns \"2015-01-01 UTC\""
          }
        ],
        "tags": [
          "round",
          "floor",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nRounds date/time down to the nearest integer value of the specified time unit.</p>\n\n<p><strong>Syntax</strong><br>\nfloor_date(<code>&lt;column_date&gt;</code>, unit = <code>&lt;unit&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>unit - second, minute, hour, day, week, month, year, or quarter</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nfloor_date(A, &quot;second&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nfloor_date(A, &quot;minute&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em><br>\nfloor_date(A, &quot;hour&quot;)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em><br>\nfloor_date(A, &quot;day&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\nfloor_date(A, &quot;week&quot;)<br>\n<em>returns &quot;2015-09-27 UTC&quot;</em><br>\nfloor_date(A, &quot;month&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\nfloor_date(A, &quot;quarter&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\nfloor_date(A, &quot;year&quot;)<br>\n<em>returns &quot;2015-01-01 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "here",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Get current time in your local timezone",
        "usage": [
          {
            "syntax": "here()",
            "tokens": [
              {
                "id": "0",
                "value": "here()"
              }
            ],
            "arguments": {
            },
            "html": "here()"
          }
        ],
        "arguments": [

        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "here()",
            "comment": "returns \"2015-12-31 00:04:59 PST\""
          }
        ],
        "tags": [
          "here",
          "current time",
          "current date",
          "today",
          "now",
          "sysdate"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nGet current time in your local timezone</p>\n\n<p><strong>Syntax</strong><br>\nhere()  </p>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nhere()<br>\n<em>returns &quot;2015-12-31 00:04:59 PST&quot;</em>  </p>\n"
      },
      {
        "name": "hm",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert text to Period data type if a given column holds values that look like Hours and Minutes",
        "usage": [
          {
            "syntax": "hm(```<column>```, tz = ```<timezone>```)",
            "tokens": [
              {
                "id": "0",
                "value": "hm("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone"
            },
            "html": "hm(<b><i>column</i></b>, tz = <b><i>timezone</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          }
        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "hm(\"06:10\")",
            "comment": "returns \"6H 10M 0S\""
          },
          {
            "code": "hm(\"06:10\", \"UTC\")",
            "comment": "returns \"6H 10M 0S\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert text to Period data type if a given column holds values that look like Hours and Minutes</p>\n\n<p><strong>Syntax</strong><br>\nhm(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPeriod       </p>\n\n<p><strong>Example</strong><br>\nhm(&quot;06:10&quot;)<br>\n<em>returns &quot;6H 10M 0S&quot;</em><br>\nhm(&quot;06:10&quot;, &quot;UTC&quot;)<br>\n<em>returns &quot;6H 10M 0S&quot;</em>  </p>\n"
      },
      {
        "name": "hms",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert text to Period data type if a given column holds values that look like Time",
        "usage": [
          {
            "syntax": "hms(```<column>```, tz = ```<timezone>```)",
            "tokens": [
              {
                "id": "0",
                "value": "hms("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone"
            },
            "html": "hms(<b><i>column</i></b>, tz = <b><i>timezone</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          }
        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "hms(\"06:10:15\")",
            "comment": "returns \"6H 10M 15S\""
          },
          {
            "code": "hms(\"06:10:15\", \"UTC\")",
            "comment": "returns \"6H 10M 15S\""
          },
          {
            "code": "hms(\"Created at 06:10:15 AM\")",
            "comment": "returns \"6H 10M 15S\""
          },
          {
            "code": "hms(\"Finished in 9 hours, 20 min and 4 seconds\")",
            "comment": "returns \"6H 10M 15S\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert text to Period data type if a given column holds values that look like Time</p>\n\n<p><strong>Syntax</strong><br>\nhms(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPeriod       </p>\n\n<p><strong>Example</strong><br>\nhms(&quot;06:10:15&quot;)<br>\n<em>returns &quot;6H 10M 15S&quot;</em><br>\nhms(&quot;06:10:15&quot;, &quot;UTC&quot;)<br>\n<em>returns &quot;6H 10M 15S&quot;</em><br>\nhms(&quot;Created at 06:10:15 AM&quot;)<br>\n<em>returns &quot;6H 10M 15S&quot;</em><br>\nhms(&quot;Finished in 9 hours, 20 min and 4 seconds&quot;)<br>\n<em>returns &quot;6H 10M 15S&quot;</em>  </p>\n"
      },
      {
        "name": "hour",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract hour",
        "usage": [
          {
            "syntax": "hour(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "hour("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date"
            },
            "html": "hour(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Integer",
        "examples": [
          {
            "code": "hour(\"2015-10-01 06:15:30\")",
            "comment": "returns 6"
          }
        ],
        "tags": [
          "hour",
          "extract",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract hour</p>\n\n<p><strong>Syntax</strong><br>\nhour(<code>&lt;column_date&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nInteger          </p>\n\n<p><strong>Example</strong><br>\nhour(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 6</em></p>\n"
      },
      {
        "name": "hours",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert a number to hour periods so you can use it for further calculations.",
        "usage": [
          {
            "syntax": "hours(```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "hours("
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "number"
            },
            "html": "hours(<b><i>number</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "hours(1)",
            "comment": "returns \"1H 0M 0S\""
          },
          {
            "code": "ymd_hms(\"2015-10-01 06:15:30\") + hours(1)",
            "comment": "returns \"2015-10-01 07:15:30 UTC\""
          }
        ],
        "tags": [
          "hours",
          "add"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a number to hour periods so you can use it for further calculations.  </p>\n\n<p><strong>Syntax</strong><br>\nhours(<code>&lt;number&gt;</code>)  </p>\n\n<p><strong>Return Value</strong><br>\nPeriod           </p>\n\n<p><strong>Example</strong><br>\nhours(1)\n<em>returns &quot;1H 0M 0S&quot;</em><br>\nymd_hms(&quot;2015-10-01 06:15:30&quot;) + hours(1)\n<em>returns &quot;2015-10-01 07:15:30 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "interval",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Return intervals between two dates. You can use this result to get the duration by either dividing by a given units such as days, weeks, etc, OR converting it to numeric data type with \"as.numeric()\".",
        "usage": [
          {
            "syntax": "interval(```<column>```, ```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "interval("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date",
              "1": "column_date"
            },
            "html": "interval(<b><i>column</i></b>, <b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Interval",
        "examples": [
          {
            "code": "interval(\"2015-10-01\", \"2015-10-18\")",
            "comment": "returns 2015-10-01 UTC--2015-10-18 UTC"
          },
          {
            "code": "interval(\"2015-10-01\", \"2015-10-18\") %/% days(1)",
            "comment": "returns 17"
          },
          {
            "code": "as.numeric(interval(\"2015-10-01\", \"2015-10-18\"), units = \"days\")",
            "comment": "returns 17"
          },
          {
            "code": "interval(\"2015-10-01\", \"2015-10-18\") %/% weeks(1)",
            "comment": "returns 2"
          }
        ],
        "tags": [
          "interval",
          "duration",
          "difference",
          "between"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn intervals between two dates. You can use this result to get the duration by either dividing by a given units such as days, weeks, etc, OR converting it to numeric data type with &quot;as.numeric()&quot;.</p>\n\n<p><strong>Syntax</strong><br>\ninterval(<code>&lt;column_date&gt;</code>, <code>&lt;column_date&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nInterval       </p>\n\n<p><strong>Example</strong><br>\ninterval(&quot;2015-10-01&quot;, &quot;2015-10-18&quot;)<br>\n<em>returns 2015-10-01 UTC--2015-10-18 UTC</em><br>\ninterval(&quot;2015-10-01&quot;, &quot;2015-10-18&quot;) %/% days(1)<br>\n<em>returns 17</em><br>\nas.numeric(interval(&quot;2015-10-01&quot;, &quot;2015-10-18&quot;), units = &quot;days&quot;)<br>\n<em>returns 17</em><br>\ninterval(&quot;2015-10-01&quot;, &quot;2015-10-18&quot;) %/% weeks(1)<br>\n<em>returns 2</em>  </p>\n"
      },
      {
        "name": "mday",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract Day of Month",
        "usage": [
          {
            "syntax": "mday(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "mday("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date"
            },
            "html": "mday(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mday(\"2015-10-01 06:15:30\")",
            "comment": "returns 1"
          }
        ],
        "tags": [
          "day of month",
          "extract"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract Day of Month  </p>\n\n<p><strong>Syntax</strong><br>\nmday(<code>&lt;column_date&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric         </p>\n\n<p><strong>Example</strong><br>\nmday(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 1</em></p>\n"
      },
      {
        "name": "mdy",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains only Date, but not Time.",
        "usage": [
          {
            "syntax": "mdy(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "mdy("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "mdy(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "locale (Optional)",
            "text": [
              "Specify a locale to parse the date data."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "mdy(\"01-10-2015\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "mdy(\"01/10/2015\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "mdy(\"Created on 1 10 2015\")",
            "comment": "returns \"2015-10-01 UTC\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains only Date, but not Time.</p>\n\n<p><strong>Syntax</strong><br>\nmdy(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>locale (Optional) - Specify a locale to parse the date data.</li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nmdy(&quot;01-10-2015&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\nmdy(&quot;01/10/2015&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\nmdy(&quot;Created on 1 10 2015&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "mdy_h",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "mdy_h(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "mdy_h("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "mdy_h(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "mdy_h(\"10-01-2015 06\")",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          },
          {
            "code": "mdy_h(\"Created on 10 1 2015 6 AM\")",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\nmdy_h(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.</li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nmdy_h(&quot;10-01-2015 06&quot;)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em><br>\nmdy_h(&quot;Created on 10 1 2015 6 AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "mdy_hm",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "mdy_hm(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "mdy_hm("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "mdy_hm(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "mdy_hm(\"10-01-2015T06:10\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          },
          {
            "code": "mdy_hm(\"Created on 10 1 2015, at 6:10 AM\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\nmdy_hm(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.</li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nmdy_hm(&quot;10-01-2015T06:10&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em><br>\nmdy_hm(&quot;Created on 10 1 2015, at 6:10 AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "mdy_hms",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "mdy_hms(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "mdy_hms("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "mdy_hms(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "mdy_hms(\"10-01-2015T06:10:15\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "mdy_hms(\"10/01/2015T06:10:15\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "mdy_hms(\"Created on 10 1 2015\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "mdy_hms(\"10-01-2015 06\")",
            "comment": "returns NA, because there is not enough data for Date and Time parsing."
          },
          {
            "code": "mdy_hms(\"10-01-2015 06\", truncated = 2)",
            "comment": "returns \"2015-10-01 06:00:00 UTC\" as expected"
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\nmdy_hms(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.</li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nmdy_hms(&quot;10-01-2015T06:10:15&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nmdy_hms(&quot;10/01/2015T06:10:15&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nmdy_hms(&quot;Created on 10 1 2015&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nmdy_hms(&quot;10-01-2015 06&quot;)<br>\n<em>returns NA, because there is not enough data for Date and Time parsing.</em><br>\nmdy_hms(&quot;10-01-2015 06&quot;, truncated = 2)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot; as expected</em>    </p>\n"
      },
      {
        "name": "milliseconds",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert a number to milliseconds periods so you can use it for further calculations.",
        "usage": [
          {
            "syntax": "milliseconds(```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "milliseconds("
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "number"
            },
            "html": "milliseconds(<b><i>number</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "milliseconds(1)",
            "comment": "returns \"1S\""
          },
          {
            "code": "ymd_hms(\"2015-10-01 06:15:30\") + milliseconds(1)",
            "comment": "returns \"2015-10-01 06:15:31 UTC\""
          }
        ],
        "tags": [
          "milliseconds",
          "add"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a number to milliseconds periods so you can use it for further calculations.  </p>\n\n<p><strong>Syntax</strong><br>\nmilliseconds(<code>&lt;number&gt;</code>)  </p>\n\n<p><strong>Return Value</strong><br>\nPeriod           </p>\n\n<p><strong>Example</strong><br>\nmilliseconds(1)\n<em>returns &quot;1S&quot;</em><br>\nymd_hms(&quot;2015-10-01 06:15:30&quot;) + milliseconds(1)<br>\n<em>returns &quot;2015-10-01 06:15:31 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "minute",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract minute",
        "usage": [
          {
            "syntax": "minute(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "minute("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date"
            },
            "html": "minute(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Integer",
        "examples": [
          {
            "code": "minute(\"2015-10-01 06:15:30\")",
            "comment": "returns 15"
          }
        ],
        "tags": [
          "minute",
          "extract",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract minute</p>\n\n<p><strong>Syntax</strong><br>\nminute(<code>&lt;column_date&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nInteger         </p>\n\n<p><strong>Example</strong><br>\nminute(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 15</em></p>\n"
      },
      {
        "name": "minutes",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert a number to minute periods so you can use it for further calculations.",
        "usage": [
          {
            "syntax": "minutes(```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "minutes("
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "number"
            },
            "html": "minutes(<b><i>number</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "minutes(1)_",
            "comment": "returns \"1M 0S\""
          },
          {
            "code": "ymd_hms(\"2015-10-01 06:15:30\") + minutes(1)",
            "comment": "returns \"2015-10-01 06:16:30 UTC\""
          }
        ],
        "tags": [
          "minutes",
          "add"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a number to minute periods so you can use it for further calculations.  </p>\n\n<p><strong>Syntax</strong><br>\nminutes(<code>&lt;number&gt;</code>)  </p>\n\n<p><strong>Return Value</strong><br>\nPeriod           </p>\n\n<p><strong>Example</strong><br>\nminutes(1)_<br>\n<em>returns &quot;1M 0S&quot;</em><br>\nymd_hms(&quot;2015-10-01 06:15:30&quot;) + minutes(1)<br>\n<em>returns &quot;2015-10-01 06:16:30 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "month",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract Month",
        "usage": [
          {
            "syntax": "month(```<column>```, label = ```<logical>```, abbr = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "month("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", label = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ", abbr = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date",
              "label": "logical",
              "abbr": "logical"
            },
            "html": "month(<b><i>column</i></b>, label = <b><i>logical</i></b>, abbr = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "label (Optional)",
            "text": [
              "Default is FALSE. If TRUE it will return text (e.g. January), if FALSE it will retun as number (e.g. 7)"
            ]
          },
          {
            "name": "abbr (Optional)",
            "text": [
              "Default is TRUE. FALSE will display the month of the year as an ordered factor of character strings, such as \"January.\" TRUE will display an abbreviated version of the label, such as \"Jan\"."
            ]
          }
        ],
        "return_value": "Numeric or Text",
        "examples": [
          {
            "code": "month(\"2015-10-01 06:15:30\")",
            "comment": "returns 10"
          },
          {
            "code": "month(\"2015-10-01 06:15:30\", label = TRUE)",
            "comment": "returns October"
          },
          {
            "code": "month(\"2015-10-01 06:15:30\", label = TRUE, abbr = TRUE)",
            "comment": "returns Oct"
          }
        ],
        "tags": [
          "month",
          "extract",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract Month  </p>\n\n<p><strong>Syntax</strong><br>\nmonth(<code>&lt;column_date&gt;</code>, label = <code>&lt;logical&gt;</code>, abbr = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>label (Optional) - Default is FALSE. If TRUE it will return text (e.g. January), if FALSE it will retun as number (e.g. 7)</li>\n<li>abbr (Optional) - Default is TRUE. FALSE will display the month of the year as an ordered factor of character strings, such as &quot;January.&quot; TRUE will display an abbreviated version of the label, such as &quot;Jan&quot;.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric or Text           </p>\n\n<p><strong>Example</strong><br>\nmonth(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 10</em>\nmonth(&quot;2015-10-01 06:15:30&quot;, label = TRUE)<br>\n<em>returns October</em>\nmonth(&quot;2015-10-01 06:15:30&quot;, label = TRUE, abbr = TRUE)<br>\n<em>returns Oct</em></p>\n"
      },
      {
        "name": "months",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert a number to month periods so you can use it for further calculations.",
        "usage": [
          {
            "syntax": "months(```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "months("
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "number"
            },
            "html": "months(<b><i>number</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "months(1)",
            "comment": "returns \"1m 0d 0H 0M 0S\""
          },
          {
            "code": "ymd_hms(\"2015-10-01 06:15:30\") + months(1)",
            "comment": "returns \"2015-11-01 06:15:30 UTC\""
          }
        ],
        "tags": [
          "months",
          "add"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a number to month periods so you can use it for further calculations.  </p>\n\n<p><strong>Syntax</strong><br>\nmonths(<code>&lt;number&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nPeriod           </p>\n\n<p><strong>Example</strong><br>\nmonths(1)\n<em>returns &quot;1m 0d 0H 0M 0S&quot;</em><br>\nymd_hms(&quot;2015-10-01 06:15:30&quot;) + months(1)<br>\n<em>returns &quot;2015-11-01 06:15:30 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "ms",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert text to Period data type if a given column holds values that look like Minutes and Seconds",
        "usage": [
          {
            "syntax": "ms(```<column>```, tz = ```<timezone>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ms("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone"
            },
            "html": "ms(<b><i>column</i></b>, tz = <b><i>timezone</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones. [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          }
        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "ms(\"10:15\")",
            "comment": "returns \"10M 15S\""
          },
          {
            "code": "ms(\"10:15\", \"UTC\")",
            "comment": "returns \"10M 15S\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert text to Period data type if a given column holds values that look like Minutes and Seconds</p>\n\n<p><strong>Syntax</strong><br>\nms(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones. <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPeriod       </p>\n\n<p><strong>Example</strong><br>\nms(&quot;10:15&quot;)<br>\n<em>returns &quot;10M 15S&quot;</em><br>\nms(&quot;10:15&quot;, &quot;UTC&quot;)<br>\n<em>returns &quot;10M 15S&quot;</em>  </p>\n"
      },
      {
        "name": "myd",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains only Date, but not Time.",
        "usage": [
          {
            "syntax": "myd(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "myd("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "myd(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "locale (Optional)",
            "text": [
              "Specify a locale to parse the date data."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "myd(\"01-2015-10\")",
            "comment": "returns \"2015-01-10 UTC\""
          },
          {
            "code": "myd(\"01/2015/10\")",
            "comment": "returns \"2015-01-10 UTC\""
          },
          {
            "code": "myd(\"Created on 1 2015 10\")",
            "comment": "returns \"2015-01-10 UTC\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains only Date, but not Time.</p>\n\n<p><strong>Syntax</strong><br>\nmyd(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>locale (Optional) - Specify a locale to parse the date data.</li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nmyd(&quot;01-2015-10&quot;)<br>\n<em>returns &quot;2015-01-10 UTC&quot;</em><br>\nmyd(&quot;01/2015/10&quot;)<br>\n<em>returns &quot;2015-01-10 UTC&quot;</em><br>\nmyd(&quot;Created on 1 2015 10&quot;)<br>\n<em>returns &quot;2015-01-10 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "now",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Returns current date and time. A similar function 'today()' returns only date.",
        "usage": [
          {
            "syntax": "now(tzone = ```<timezone>```)",
            "tokens": [
              {
                "id": "0",
                "value": "now(tzone = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "tzone": "timezone"
            },
            "html": "now(tzone = <b><i>timezone</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tzone (Optional)",
            "text": [
              "Set a time zone for the date to be returned. The default is the sytem time zone of your computer. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "now()",
            "comment": "returns \"2015-12-31 08:04:59 PST\""
          },
          {
            "code": "now(\"GMT\")",
            "comment": "returns \"2015-12-31 08:04:59 PST\""
          },
          {
            "code": "now(\"America/Los_Angeles\")",
            "comment": "returns \"2015-12-31 00:04:59 PST\""
          }
        ],
        "tags": [
          "today",
          "now",
          "current date",
          "current time",
          "sysdate"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns current date and time. A similar function &#39;today()&#39; returns only date.</p>\n\n<p><strong>Syntax</strong><br>\nnow(tzone = <code>&lt;timezone&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tzone (Optional) - Set a time zone for the date to be returned. The default is the sytem time zone of your computer. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nnow()<br>\n<em>returns &quot;2015-12-31 08:04:59 PST&quot;</em><br>\nnow(&quot;GMT&quot;)<br>\n<em>returns &quot;2015-12-31 08:04:59 PST&quot;</em><br>\nnow(&quot;America/Los_Angeles&quot;)<br>\n<em>returns &quot;2015-12-31 00:04:59 PST&quot;</em>  </p>\n"
      },
      {
        "name": "parse_date",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert a given data to Date data type. Date data type doesn't include Time. The default formats follow the rules of the ISO 8601 international standard which expresses a day as \"%Y-%m-%d\" (e.g. \"2001-02-03\").",
        "usage": [
          {
            "syntax": "parse_date(```<column>```, format = ```<date_format>```, local = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_date("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", format = "
              },
              {
                "id": "date_format",
                "value": "<date_format>"
              },
              {
                "id": "4",
                "value": ", local = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "format": "date_format",
              "local": "locale"
            },
            "html": "parse_date(<b><i>column</i></b>, format = <b><i>date_format</i></b>, local = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "format (Optional)",
            "text": [
              "specify a date format to read the given data. If not specified, it will try \"%Y-%m-%d\" then \"%Y/%m/%d\"",
              "- %d - Day of the month (decimal number)",
              "- %m - \tMonth (decimal number)",
              "- %b - \tMonth (abbreviated)",
              "- %B - \tMonth (full name)",
              "- %y - \tYear (2 digit)",
              "- %Y - \tYear (4 digit)"
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session default locale. Set the date related configuration like time zone, encoding, decimal mark, and day/month names."
            ]
          }
        ],
        "return_value": "Date",
        "examples": [
          {
            "code": "parse_date(\"2015-10-10\")",
            "comment": "Returns \"2015-10-10\""
          },
          {
            "code": "parse_date(\"2015-10-10\", locale = locale(tz = \"America/Los_Angeles\"))",
            "comment": "Returns \"2015-10-10\""
          },
          {
            "code": "parse_date(\"10-10-10\", format = \"%d-%m-%y\")",
            "comment": "Returns \"2015-10-10\""
          },
          {
            "code": "parse_date(\"10-JAN-10\", format = \"%d-%b-%y\")",
            "comment": "Returns \"2015-01-10\""
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion",
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a given data to Date data type. Date data type doesn&#39;t include Time. The default formats follow the rules of the ISO 8601 international standard which expresses a day as &quot;%Y-%m-%d&quot; (e.g. &quot;2001-02-03&quot;).</p>\n\n<p><strong>Syntax</strong><br>\nparse_date(<code>&lt;column&gt;</code>, format = <code>&lt;date_format&gt;</code>, local = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>format (Optional) - specify a date format to read the given data. If not specified, it will try &quot;%Y-%m-%d&quot; then &quot;%Y/%m/%d&quot;\n\n<ul>\n<li>%d - Day of the month (decimal number)</li>\n<li>%m -    Month (decimal number)</li>\n<li>%b -    Month (abbreviated)</li>\n<li>%B -    Month (full name)</li>\n<li>%y -    Year (2 digit)</li>\n<li>%Y -    Year (4 digit)</li>\n</ul></li>\n<li>locale - The default is the session default locale. Set the date related configuration like time zone, encoding, decimal mark, and day/month names.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nDate  </p>\n\n<p><strong>Example</strong><br>\nparse_date(&quot;2015-10-10&quot;)<br>\n<em>Returns &quot;2015-10-10&quot;</em>\nparse_date(&quot;2015-10-10&quot;, locale = locale(tz = &quot;America/Los_Angeles&quot;))\n<em>Returns &quot;2015-10-10&quot;</em>\nparse_date(&quot;10-10-10&quot;, format = &quot;%d-%m-%y&quot;)\n<em>Returns &quot;2015-10-10&quot;</em>\nparse_date(&quot;10-JAN-10&quot;, format = &quot;%d-%b-%y&quot;)\n<em>Returns &quot;2015-01-10&quot;</em></p>\n"
      },
      {
        "name": "parse_datetime",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert data to Date/Time data type.",
        "usage": [
          {
            "syntax": "parse_datetime(```<column>```, format = ```<date_time_format>```, locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_datetime("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", format = "
              },
              {
                "id": "date_time_format",
                "value": "<date_time_format>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "format": "date_time_format",
              "locale": "locale"
            },
            "html": "parse_datetime(<b><i>column</i></b>, format = <b><i>date_time_format</i></b>, locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "format (Optional)",
            "text": [
              "specify a date format to read the given data. If not specified, it will try \"%Y-%m-%d\" then \"%Y/%m/%d\"",
              "- %Y - 4-digit year",
              "- %y - 2-digit year",
              "- %m - Decimal month",
              "- %b - Abbreviated month",
              "- %B - Full month",
              "- %d - Decimal date",
              "- %H - Decimal hours (24 hour)",
              "- %I - Decimal hours (12 hour)",
              "- %M - Decimal minute",
              "- %z - Offset from GMT",
              "- %Z - Time zone (character)",
              "- %a - Abbreviated weekday",
              "- %A - Full weekday",
              "- %j - Decimal day of the year",
              "- %p - Locale-specific AM/PM",
              "- %S - Decimal second",
              "- %U - Decimal week of the year (starting on Sunday)",
              "- %w - Decimal Weekday (0=Sunday)",
              "- %W - Decimal week of the year (starting on Monday)",
              "- %x - Locale-specific Date",
              "- %X - Locale-specific Time",
              "- %c - Locale-specific date and time"
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session default locale. Set the date/time related configuration like time zone, encoding, decimal mark, and day/month names."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "parse_datetime(\"2015-10-10 13:10:05\")",
            "comment": "Returns \"2015-10-10 13:10:05 PDT\""
          },
          {
            "code": "parse_datetime(\"2015-10-10 13:10:05\", locale = locale(tz = \"America/Los_Angeles\"))",
            "comment": "Returns \"2015-10-10 13:10:05 PDT\""
          },
          {
            "code": "parse_datetime(\"2015-10-10 13:10:05\", locale = locale(tz = \"Asia/Tokyo\"))",
            "comment": "Returns \"2015-10-10 13:10:05 JST\""
          },
          {
            "code": "parse_datetime(\"2015-10-15T13:10:05\")",
            "comment": "Returns \"2015-10-05 13:10:00 PDT\""
          },
          {
            "code": "parse_datetime(\"05-10-15T13:10:05\", format = \"%d-%m-%yT%H:%M:%S\")",
            "comment": "Returns \"2015-10-05 13:10:00 PDT\""
          },
          {
            "code": "parse_datetime(\"2010/01/01 12:00\", \"%Y/%m/%d %H:%M\", locale = locale(tz = \"US/Central\"))",
            "comment": "Returns \"2010-01-01 12:00:00 CST\""
          },
          {
            "code": "parse_datetime(\"2010/01/01 12:00\", \"%Y/%m/%d %H:%M\", locale = locale(tz = \"US/Eastern\"))",
            "comment": "Returns \"2010-01-01 12:00:00 EST\""
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion",
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to Date/Time data type.</p>\n\n<p><strong>Syntax</strong><br>\nparse_datetime(<code>&lt;column&gt;</code>, format = <code>&lt;date_time_format&gt;</code>, locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>format (Optional) - specify a date format to read the given data. If not specified, it will try &quot;%Y-%m-%d&quot; then &quot;%Y/%m/%d&quot;\n\n<ul>\n<li>%Y - 4-digit year<br></li>\n<li>%y - 2-digit year<br></li>\n<li>%m - Decimal month<br></li>\n<li>%b - Abbreviated month<br></li>\n<li>%B - Full month<br></li>\n<li>%d - Decimal date<br></li>\n<li>%H - Decimal hours (24 hour)<br></li>\n<li>%I - Decimal hours (12 hour)<br></li>\n<li>%M - Decimal minute<br></li>\n<li>%z - Offset from GMT</li>\n<li>%Z - Time zone (character)</li>\n<li>%a - Abbreviated weekday<br></li>\n<li>%A - Full weekday<br></li>\n<li>%j - Decimal day of the year<br></li>\n<li>%p - Locale-specific AM/PM<br></li>\n<li>%S - Decimal second<br></li>\n<li>%U - Decimal week of the year (starting on Sunday)<br></li>\n<li>%w - Decimal Weekday (0=Sunday)<br></li>\n<li>%W - Decimal week of the year (starting on Monday)<br></li>\n<li>%x - Locale-specific Date<br></li>\n<li>%X - Locale-specific Time</li>\n<li>%c - Locale-specific date and time<br></li>\n</ul></li>\n<li>locale - The default is the session default locale. Set the date/time related configuration like time zone, encoding, decimal mark, and day/month names.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct  </p>\n\n<p><strong>Example</strong><br>\nparse_datetime(&quot;2015-10-10 13:10:05&quot;)\n<em>Returns &quot;2015-10-10 13:10:05 PDT&quot;</em><br>\nparse_datetime(&quot;2015-10-10 13:10:05&quot;, locale = locale(tz = &quot;America/Los_Angeles&quot;))\n<em>Returns &quot;2015-10-10 13:10:05 PDT&quot;</em><br>\nparse_datetime(&quot;2015-10-10 13:10:05&quot;, locale = locale(tz = &quot;Asia/Tokyo&quot;))\n<em>Returns &quot;2015-10-10 13:10:05 JST&quot;</em><br>\nparse_datetime(&quot;2015-10-15T13:10:05&quot;)\n<em>Returns &quot;2015-10-05 13:10:00 PDT&quot;</em><br>\nparse_datetime(&quot;05-10-15T13:10:05&quot;, format = &quot;%d-%m-%yT%H:%M:%S&quot;)\n<em>Returns &quot;2015-10-05 13:10:00 PDT&quot;</em><br>\nparse_datetime(&quot;2010/01/01 12:00&quot;, &quot;%Y/%m/%d %H:%M&quot;, locale = locale(tz = &quot;US/Central&quot;))\n<em>Returns &quot;2010-01-01 12:00:00 CST&quot;</em>\nparse_datetime(&quot;2010/01/01 12:00&quot;, &quot;%Y/%m/%d %H:%M&quot;, locale = locale(tz = &quot;US/Eastern&quot;))\n<em>Returns &quot;2010-01-01 12:00:00 EST&quot;</em></p>\n"
      },
      {
        "name": "parse_time",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert data to Time data type.",
        "usage": [
          {
            "syntax": "parse_time(```<column>```, format = ```<time_format>```, locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_time("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", format = "
              },
              {
                "id": "time_format",
                "value": "<time_format>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "format": "time_format",
              "locale": "locale"
            },
            "html": "parse_time(<b><i>column</i></b>, format = <b><i>time_format</i></b>, locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "format (Optional)",
            "text": [
              "specify a date format to read the given data. If not specified, it will try \"%Y-%m-%d\" then \"%Y/%m/%d\"",
              "- %H - Decimal hours (24 hour)",
              "- %I - Decimal hours (12 hour)",
              "- %M - Decimal minute",
              "- %S - Decimal second",
              "- %z - Offset from GMT",
              "- %Z - Time zone (character)",
              "- %p - Locale-specific AM/PM"
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session default locale. Set the date/time related configuration like time zone, encoding, decimal mark, and day/month names."
            ]
          }
        ],
        "return_value": "time",
        "examples": [
          {
            "code": "parse_time(\"13:10:05\")",
            "comment": "Returns \"13:10:05\""
          },
          {
            "code": "parse_time(\"13:10:05\", locale = locale(tz = \"America/Los_Angeles\"))",
            "comment": "Returns \"13:10:05\""
          },
          {
            "code": "parse_time(\"10:20:15 PM\")",
            "comment": "Returns \"22:20:15\""
          },
          {
            "code": "parse_time(\"10:20:15 午後\", local = locale(\"ja\"))",
            "comment": "Returns \"22:20:15\""
          }
        ],
        "tags": [
          "Time",
          "Convert"
        ],
        "categories": [
          "Type Conversion",
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to Time data type.</p>\n\n<p><strong>Syntax</strong><br>\nparse_time(<code>&lt;column&gt;</code>, format = <code>&lt;time_format&gt;</code>, locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>format (Optional) - specify a date format to read the given data. If not specified, it will try &quot;%Y-%m-%d&quot; then &quot;%Y/%m/%d&quot;\n\n<ul>\n<li>%H - Decimal hours (24 hour)<br></li>\n<li>%I - Decimal hours (12 hour)<br></li>\n<li>%M - Decimal minute<br></li>\n<li>%S - Decimal second<br></li>\n<li>%z - Offset from GMT</li>\n<li>%Z - Time zone (character)</li>\n<li>%p - Locale-specific AM/PM<br></li>\n</ul></li>\n<li>locale - The default is the session default locale. Set the date/time related configuration like time zone, encoding, decimal mark, and day/month names.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\ntime   </p>\n\n<p><strong>Example</strong><br>\nparse_time(&quot;13:10:05&quot;)<br>\n<em>Returns &quot;13:10:05&quot;</em><br>\nparse_time(&quot;13:10:05&quot;, locale = locale(tz = &quot;America/Los_Angeles&quot;))<br>\n<em>Returns &quot;13:10:05&quot;</em><br>\nparse_time(&quot;10:20:15 PM&quot;)\n<em>Returns &quot;22:20:15&quot;</em><br>\nparse_time(&quot;10:20:15 午後&quot;, local = locale(&quot;ja&quot;))<br>\n<em>Returns &quot;22:20:15&quot;</em>  </p>\n"
      },
      {
        "name": "qday",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract Day of Quarter",
        "usage": [
          {
            "syntax": "qday(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "qday("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date"
            },
            "html": "qday(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "qday(\"2015-10-01 06:15:30\")",
            "comment": "returns 7"
          }
        ],
        "tags": [
          "day of quarter",
          "extract"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract Day of Quarter  </p>\n\n<p><strong>Syntax</strong><br>\nqday(<code>&lt;column_date&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric         </p>\n\n<p><strong>Example</strong><br>\nqday(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 7</em></p>\n"
      },
      {
        "name": "rollback",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Calculate the last day of the previous month or to the first day of the month based on a given date.",
        "usage": [
          {
            "syntax": "rollback(```<column>```, roll_to_first = ```<logical>```, preserve_hms = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "rollback("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", roll_to_first = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ", preserve_hms = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date",
              "roll_to_first": "logical",
              "preserve_hms": "logical"
            },
            "html": "rollback(<b><i>column</i></b>, roll_to_first = <b><i>logical</i></b>, preserve_hms = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "roll_to_first (Optional)",
            "text": [
              "The default is FALSE. Rollback to the first day of the month instead of the last day of the previous month"
            ]
          },
          {
            "name": "preserve_hms (Optional)",
            "text": [
              "The default is TRUE. Retains the same hour, minute, and second information? If FALSE, the new date will be at 00:00:00."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "rollback(\"2015-03-03 06:15:30\")",
            "comment": "returns \"2010-02-28 06:15:30 UTC\""
          },
          {
            "code": "rollback(\"2015-03-03 06:15:30\", roll_to_first = TRUE)",
            "comment": "returns \"2010-03-01 06:15:30 UTC\""
          },
          {
            "code": "rollback(\"2015-03-03 06:15:30\", preserve_hms = FALSE)",
            "comment": "returns \"2010-02-28 UTC\""
          }
        ],
        "tags": [
          "rollback",
          "last day",
          "first day",
          "month ago",
          "previous month",
          "current month",
          "beginning of the month",
          "end of the last month"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nCalculate the last day of the previous month or to the first day of the month based on a given date.</p>\n\n<p><strong>Syntax</strong><br>\nrollback(<code>&lt;column_date&gt;</code>, roll_to_first = <code>&lt;logical&gt;</code>, preserve_hms = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>roll_to_first (Optional) - The default is FALSE. Rollback to the first day of the month instead of the last day of the previous month</li>\n<li>preserve_hms (Optional) - The default is TRUE. Retains the same hour, minute, and second information? If FALSE, the new date will be at 00:00:00.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct  </p>\n\n<p><strong>Example</strong><br>\nrollback(&quot;2015-03-03 06:15:30&quot;)<br>\n<em>returns &quot;2010-02-28 06:15:30 UTC&quot;</em>  </p>\n\n<p>rollback(&quot;2015-03-03 06:15:30&quot;, roll_to_first = TRUE)<br>\n<em>returns &quot;2010-03-01 06:15:30 UTC&quot;</em>  </p>\n\n<p>rollback(&quot;2015-03-03 06:15:30&quot;, preserve_hms = FALSE)<br>\n<em>returns &quot;2010-02-28 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "round_date",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Rounds date/time to the nearest integer value of the specified time unit.",
        "usage": [
          {
            "syntax": "round_date(```<column>```, unit = ```<unit>```)",
            "tokens": [
              {
                "id": "0",
                "value": "round_date("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", unit = "
              },
              {
                "id": "unit",
                "value": "<unit>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date",
              "unit": "unit"
            },
            "html": "round_date(<b><i>column</i></b>, unit = <b><i>unit</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "unit",
            "text": [
              "an unit to round. - second, minute, hour, day, week, month, year, or quarter"
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "round_date(\"2015-10-01 06:10:15 UTC\", \"second\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "round_date(\"2015-10-01 06:10:15 UTC\", \"minute\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          },
          {
            "code": "round_date(\"2015-10-01 06:10:15 UTC\", \"hour\")",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          },
          {
            "code": "round_date(\"2015-10-01 06:10:15 UTC\", \"day\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "round_date(\"2015-10-01 06:10:15 UTC\", \"week\")",
            "comment": "returns \"2015-10-04 UTC\""
          },
          {
            "code": "round_date(\"2015-10-01 06:10:15 UTC\", \"month\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "round_date(\"2015-10-01 06:10:15 UTC\", \"quarter\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "round_date(\"2015-10-01 06:10:15 UTC\", \"year\")",
            "comment": "returns \"2015-01-01 UTC\""
          }
        ],
        "tags": [
          "round",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nRounds date/time to the nearest integer value of the specified time unit.</p>\n\n<p><strong>Syntax</strong><br>\nround_date(<code>&lt;column_date&gt;</code>, unit = <code>&lt;unit&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>unit - an unit to round. - second, minute, hour, day, week, month, year, or quarter</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nround_date(&quot;2015-10-01 06:10:15 UTC&quot;, &quot;second&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nround_date(&quot;2015-10-01 06:10:15 UTC&quot;, &quot;minute&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em>\nround_date(&quot;2015-10-01 06:10:15 UTC&quot;, &quot;hour&quot;)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em><br>\nround_date(&quot;2015-10-01 06:10:15 UTC&quot;, &quot;day&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\nround_date(&quot;2015-10-01 06:10:15 UTC&quot;, &quot;week&quot;)<br>\n<em>returns &quot;2015-10-04 UTC&quot;</em><br>\nround_date(&quot;2015-10-01 06:10:15 UTC&quot;, &quot;month&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\nround_date(&quot;2015-10-01 06:10:15 UTC&quot;, &quot;quarter&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\nround_date(&quot;2015-10-01 06:10:15 UTC&quot;, &quot;year&quot;)<br>\n<em>returns &quot;2015-01-01 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "second",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract second",
        "usage": [
          {
            "syntax": "second(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "second("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date"
            },
            "html": "second(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Integer",
        "examples": [
          {
            "code": "second(\"2015-10-01 06:15:30\")",
            "comment": "returns 30"
          }
        ],
        "tags": [
          "second",
          "extract",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract second</p>\n\n<p><strong>Syntax</strong><br>\nsecond(<code>&lt;column_date&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nInteger         </p>\n\n<p><strong>Example</strong><br>\nsecond(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 30</em></p>\n"
      },
      {
        "name": "seconds",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert a number to second periods so you can use it for further calculations.",
        "usage": [
          {
            "syntax": "seconds(```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "seconds("
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "number"
            },
            "html": "seconds(<b><i>number</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "seconds(1)",
            "comment": "returns \"1S\""
          },
          {
            "code": "ymd_hms(\"2015-10-01 06:15:30\") + seconds(1)",
            "comment": "returns \"2015-10-01 06:15:31 UTC\""
          }
        ],
        "tags": [
          "seconds",
          "add"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a number to second periods so you can use it for further calculations.  </p>\n\n<p><strong>Syntax</strong><br>\nseconds(<code>&lt;number&gt;</code>)  </p>\n\n<p><strong>Return Value</strong><br>\nPeriod           </p>\n\n<p><strong>Example</strong><br>\nseconds(1)\n<em>returns &quot;1S&quot;</em><br>\nymd_hms(&quot;2015-10-01 06:15:30&quot;) + seconds(1)<br>\n<em>returns &quot;2015-10-01 06:15:31 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "time_length",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Calculate the exact time length between two dates.",
        "usage": [
          {
            "syntax": "time_length(```<interval_or_duration>```, unit = ```<unit>```)",
            "tokens": [
              {
                "id": "0",
                "value": "time_length("
              },
              {
                "id": "interval_or_duration",
                "value": "<interval_or_duration>"
              },
              {
                "id": "2",
                "value": ", unit = "
              },
              {
                "id": "unit",
                "value": "<unit>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "interval_or_duration",
              "unit": "unit"
            },
            "html": "time_length(<b><i>interval_or_duration</i></b>, unit = <b><i>unit</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "unit",
            "text": [
              "The default is \"second\" - second, minute, hour, day, week, month, year"
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "time_length(interval(\"2015-10-01\", \"2015-10-18\"), \"day\")",
            "comment": "returns 17"
          },
          {
            "code": "time_length(interval(\"2015-10-01\", \"2015-10-18\"), \"month\")",
            "comment": "returns 0.5483871"
          },
          {
            "code": "trunc(time_length(interval(\"2015-10-01\", \"2015-10-18\"), \"month\"))",
            "comment": "returns 0"
          },
          {
            "code": "round(time_length(interval(\"2015-10-01\", \"2015-10-18\"), \"month\"))",
            "comment": "returns 1"
          }
        ],
        "tags": [
          "interval",
          "duration",
          "difference",
          "between"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nCalculate the exact time length between two dates.</p>\n\n<p><strong>Syntax</strong><br>\ntime_length(<code>&lt;interval_or_duration&gt;</code>, unit = <code>&lt;unit&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>unit - The default is &quot;second&quot; - second, minute, hour, day, week, month, year</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric         </p>\n\n<p><strong>Example</strong><br>\ntime_length(interval(&quot;2015-10-01&quot;, &quot;2015-10-18&quot;), &quot;day&quot;)<br>\n<em>returns 17</em><br>\ntime_length(interval(&quot;2015-10-01&quot;, &quot;2015-10-18&quot;), &quot;month&quot;)<br>\n<em>returns 0.5483871</em><br>\ntrunc(time_length(interval(&quot;2015-10-01&quot;, &quot;2015-10-18&quot;), &quot;month&quot;))<br>\n<em>returns 0</em><br>\nround(time_length(interval(&quot;2015-10-01&quot;, &quot;2015-10-18&quot;), &quot;month&quot;))<br>\n<em>returns 1</em>  </p>\n"
      },
      {
        "name": "today",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Returns current date without time. A similar function 'now()' returns date including time.",
        "usage": [
          {
            "syntax": "today(tzone = ```<timezone>```)",
            "tokens": [
              {
                "id": "0",
                "value": "today(tzone = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "tzone": "timezone"
            },
            "html": "today(tzone = <b><i>timezone</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tzone (Optional)",
            "text": [
              "Set a time zone for the date to be returned. The default is the sytem time zone of your computer. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          }
        ],
        "return_value": "Date",
        "examples": [
          {
            "code": "today(\"GMT\")",
            "comment": "returns \"2015-12-31\""
          },
          {
            "code": "today(\"America/Los_Angeles\")",
            "comment": "returns \"2015-12-31\""
          }
        ],
        "tags": [
          "today",
          "now",
          "current date",
          "sysdate"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns current date without time. A similar function &#39;now()&#39; returns date including time.</p>\n\n<p><strong>Syntax</strong><br>\ntoday(tzone = <code>&lt;timezone&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tzone (Optional) - Set a time zone for the date to be returned. The default is the sytem time zone of your computer. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nDate   </p>\n\n<p><strong>Example</strong><br>\ntoday(&quot;GMT&quot;)<br>\n<em>returns &quot;2015-12-31&quot;</em>  </p>\n\n<p>today(&quot;America/Los_Angeles&quot;)<br>\n<em>returns &quot;2015-12-31&quot;</em>  </p>\n"
      },
      {
        "name": "wday",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract day of the week as a decimal number (01-07, Sunday is 1) or as Text (e.g. Sunday). The Text can be a full text or an abbreviated text. Sunday vs. Sun",
        "usage": [
          {
            "syntax": "wday(```<column>```, label = ```<logical>```, abbr = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "wday("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", label = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ", abbr = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date",
              "label": "logical",
              "abbr": "logical"
            },
            "html": "wday(<b><i>column</i></b>, label = <b><i>logical</i></b>, abbr = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "label (Optional)",
            "text": [
              "Default is FALSE. If TRUE it will return text (e.g. Saturday), if FALSE it will retun as number (e.g. 7)"
            ]
          },
          {
            "name": "abbr (Optional)",
            "text": [
              "Default is TRUE. FALSE will display the day of the week as an ordered factor of character strings, such as \"Sunday.\" TRUE will display an abbreviated version of the label, such as \"Sun\"."
            ]
          }
        ],
        "return_value": "Numeric or Text",
        "examples": [
          {
            "code": "wday(\"2015-10-01 06:15:30\")",
            "comment": "returns 5"
          },
          {
            "code": "wday(A, label = TRUE)",
            "comment": "returns Thurs"
          },
          {
            "code": "wday(A, label = TRUE, abbr=FALSE)",
            "comment": "returns Thursday"
          }
        ],
        "tags": [
          "day of week",
          "extract"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract day of the week as a decimal number (01-07, Sunday is 1) or as Text (e.g. Sunday). The Text can be a full text or an abbreviated text. Sunday vs. Sun  </p>\n\n<p><strong>Syntax</strong><br>\nwday(<code>&lt;column_date&gt;</code>, label = <code>&lt;logical&gt;</code>, abbr = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>label (Optional) - Default is FALSE. If TRUE it will return text (e.g. Saturday), if FALSE it will retun as number (e.g. 7)</li>\n<li>abbr (Optional) - Default is TRUE. FALSE will display the day of the week as an ordered factor of character strings, such as &quot;Sunday.&quot; TRUE will display an abbreviated version of the label, such as &quot;Sun&quot;.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric or Text          </p>\n\n<p><strong>Example</strong><br>\nwday(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 5</em><br>\nwday(A, label = TRUE)<br>\n<em>returns Thurs</em><br>\nwday(A, label = TRUE, abbr=FALSE)<br>\n<em>returns Thursday</em></p>\n"
      },
      {
        "name": "week",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract Week",
        "usage": [
          {
            "syntax": "week(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "week("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date"
            },
            "html": "week(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "week(\"2015-10-01 06:15:30\")",
            "comment": "returns 40"
          }
        ],
        "tags": [
          "week",
          "extract",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract Week  </p>\n\n<p><strong>Syntax</strong><br>\nweek(<code>&lt;column_date&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric         </p>\n\n<p><strong>Example</strong><br>\nweek(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 40</em></p>\n"
      },
      {
        "name": "weeks",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert a number to week periods so you can use it for further calculations.",
        "usage": [
          {
            "syntax": "weeks(```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "weeks("
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "number"
            },
            "html": "weeks(<b><i>number</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "weeks(1)",
            "comment": "returns \"7d 0H 0M 0S\""
          },
          {
            "code": "ymd_hms(\"2015-10-01 06:15:30\") + weeks(1)",
            "comment": "returns \"2015-10-08 06:15:30 UTC\""
          }
        ],
        "tags": [
          "weeks",
          "add"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a number to week periods so you can use it for further calculations.  </p>\n\n<p><strong>Syntax</strong><br>\nweeks(<code>&lt;number&gt;</code>)  </p>\n\n<p><strong>Return Value</strong><br>\nPeriod           </p>\n\n<p><strong>Example</strong><br>\nweeks(1)\n<em>returns &quot;7d 0H 0M 0S&quot;</em><br>\nymd_hms(&quot;2015-10-01 06:15:30&quot;) + weeks(1)<br>\n<em>returns &quot;2015-10-08 06:15:30 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "yday",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract Day of Year",
        "usage": [
          {
            "syntax": "yday(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "yday("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date"
            },
            "html": "yday(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "yday(\"2015-10-01 06:15:30\")",
            "comment": "returns 274"
          }
        ],
        "tags": [
          "day of year",
          "extract"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract Day of Year  </p>\n\n<p><strong>Syntax</strong><br>\nyday(<code>&lt;column_date&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric         </p>\n\n<p><strong>Example</strong><br>\nyday(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 274</em></p>\n"
      },
      {
        "name": "ydm",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains only Date, but not Time.",
        "usage": [
          {
            "syntax": "ydm(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ydm("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "ydm(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "locale (Optional)",
            "text": [
              "Specify a locale to parse the date data."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "ydm(\"2015-10-01\")",
            "comment": "returns \"\"2015-01-10 UTC\"\""
          },
          {
            "code": "ydm(\"2015/10/01\")",
            "comment": "returns \"\"2015-01-10 UTC\"\""
          },
          {
            "code": "ydm(\"Created on 2015 10 1\")",
            "comment": "returns \"\"2015-01-10 UTC\"\""
          }
        ],
        "tags": [
          "convert",
          "date",
          "transform"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains only Date, but not Time.</p>\n\n<p><strong>Syntax</strong><br>\nydm(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.</li>\n<li>locale (Optional) - Specify a locale to parse the date data.</li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nydm(&quot;2015-10-01&quot;)<br>\n<em>returns &quot;&quot;2015-01-10 UTC&quot;&quot;</em><br>\nydm(&quot;2015/10/01&quot;)<br>\n<em>returns &quot;&quot;2015-01-10 UTC&quot;&quot;</em><br>\nydm(&quot;Created on 2015 10 1&quot;)<br>\n<em>returns &quot;&quot;2015-01-10 UTC&quot;&quot;</em>  </p>\n"
      },
      {
        "name": "ydm_h",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "ydm_h(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ydm_h("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "ydm_h(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "ydm_h(\"2015-01-10T06\")",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          },
          {
            "code": "ydm_h(\"2015/01/10 06\")",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          },
          {
            "code": "ydm_h(\"Created on 15-01-10 at 6 AM\")",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\nydm_h(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nydm_h(&quot;2015-01-10T06&quot;)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em><br>\nydm_h(&quot;2015/01/10 06&quot;)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em><br>\nydm_h(&quot;Created on 15-01-10 at 6 AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "ydm_hm",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "ydm_hm(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ydm_hm("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "ydm_hm(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "ydm_hm(\"2015-01-10 06:10\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          },
          {
            "code": "ydm_hm(\"2015/01/10 06:00 UTC\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "ydm_hm(\"Created on 15-01-10 at 06:10 AM\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\nydm_hm(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nydm_hm(&quot;2015-01-10 06:10&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em><br>\nydm_hm(&quot;2015/01/10 06:00 UTC&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nydm_hm(&quot;Created on 15-01-10 at 06:10 AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "year",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Extract Year",
        "usage": [
          {
            "syntax": "year(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "year("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_date"
            },
            "html": "year(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "year(\"2015-10-01 06:15:30\")",
            "comment": "returns 2015"
          }
        ],
        "tags": [
          "year",
          "extract",
          "date"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract Year</p>\n\n<p><strong>Syntax</strong><br>\nyear(<code>&lt;column_date&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric         </p>\n\n<p><strong>Example</strong><br>\nyear(&quot;2015-10-01 06:15:30&quot;)<br>\n<em>returns 2015</em>  </p>\n"
      },
      {
        "name": "years",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert a number to year periods so you can use it for further calculations.",
        "usage": [
          {
            "syntax": "years(```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "years("
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "number"
            },
            "html": "years(<b><i>number</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Period",
        "examples": [
          {
            "code": "ymd_hms(\"2015-10-01 06:15:30\") + years(1)",
            "comment": "returns \"2016-10-01 06:15:30 UTC\""
          }
        ],
        "tags": [
          "years",
          "add"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a number to year periods so you can use it for further calculations.  </p>\n\n<p><strong>Syntax</strong><br>\nyears(<code>&lt;number&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nPeriod           </p>\n\n<p><strong>Example</strong><br>\nymd_hms(&quot;2015-10-01 06:15:30&quot;) + years(1)<br>\n<em>returns &quot;2016-10-01 06:15:30 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "ymd",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains only Date, but not Time.",
        "usage": [
          {
            "syntax": "ymd(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ymd("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "ymd(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "locale (Optional)",
            "text": [
              "Specify a locale to parse the date data."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "ymd(\"2015-10-01\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "ymd(\"2015/10/01\")",
            "comment": "returns \"2015-10-01 UTC\""
          },
          {
            "code": "ymd(\"Created on 2015 10 1\")",
            "comment": "returns \"2015-10-01 UTC\""
          }
        ],
        "tags": [
          "convert",
          "date",
          "transform"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains only Date, but not Time.</p>\n\n<p><strong>Syntax</strong><br>\nymd(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>locale (Optional) - Specify a locale to parse the date data.</li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nymd(&quot;2015-10-01&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\nymd(&quot;2015/10/01&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em><br>\nymd(&quot;Created on 2015 10 1&quot;)<br>\n<em>returns &quot;2015-10-01 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "ymd_h",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "ymd_h(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ymd_h("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "ymd_h(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "ymd_h(\"2015-10-01T06\")",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          },
          {
            "code": "ymd_h(\"2015/10/01 06\")",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          },
          {
            "code": "ymd_h(\"Created on 15-10-01 at 6 AM\")",
            "comment": "returns \"2015-10-01 06:00:00 UTC\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\nymd_h(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nymd_h(&quot;2015-10-01T06&quot;)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em><br>\nymd_h(&quot;2015/10/01 06&quot;)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em><br>\nymd_h(&quot;Created on 15-10-01 at 6 AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "ymd_hm",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "ymd_hm(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ymd_hm("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "ymd_hm(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "ymd_hm(\"2015-10-01 06:10\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          },
          {
            "code": "ymd_hm(\"2015/10/01 06:00 UTC\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "ymd_hm(\"Created on 15-10-01 at 06:10 AM\")",
            "comment": "returns \"2015-10-01 06:10:00 UTC\""
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\nymd_hm(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nymd_hm(&quot;2015-10-01 06:10&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em><br>\nymd_hm(&quot;2015/10/01 06:00 UTC&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nymd_hm(&quot;Created on 15-10-01 at 06:10 AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:00 UTC&quot;</em>  </p>\n"
      },
      {
        "name": "ymd_hms",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "ydm_hms(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ydm_hms("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "ydm_hms(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "ydm_hms(\"2015-01-10T06:10:15\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "ydm_hms(\"2015/01/10 06:10:15 UTC\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "ydm_hms(\"Created on 15-01-10 at 06:10:15  AM\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "ydm_hms(\"2015-01-10 06\")",
            "comment": "returns NA, because there is not enough data for Date and Time parsing."
          },
          {
            "code": "ydm_hms(\"2015-01-10 06\", truncated = 2)",
            "comment": "returns \"2015-10-01 06:00:00 UTC\" as expected"
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\nydm_hms(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nydm_hms(&quot;2015-01-10T06:10:15&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nydm_hms(&quot;2015/01/10 06:10:15 UTC&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nydm_hms(&quot;Created on 15-01-10 at 06:10:15  AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nydm_hms(&quot;2015-01-10 06&quot;)<br>\n<em>returns NA, because there is not enough data for Date and Time parsing.</em><br>\nydm_hms(&quot;2015-01-10 06&quot;, truncated = 2)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot; as expected</em>    </p>\n"
      },
      {
        "name": "ymd_hms",
        "package": "lubridate",
        "source": "exploratory doc",
        "description": "Convert Character or Number to Date / Period when data contains Date and Time.",
        "usage": [
          {
            "syntax": "ymd_hms(```<column>```, tz = ```<timezone>```, locale = ```<locale>```, truncated = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ymd_hms("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ", truncated = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "tz": "timezone",
              "locale": "locale",
              "truncated": "number"
            },
            "html": "ymd_hms(<b><i>column</i></b>, tz = <b><i>timezone</i></b>, locale = <b><i>locale</i></b>, truncated = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "tz (Optional)",
            "text": [
              "Specify which time zone to parse the date with. You can find a list of time zones [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
            ]
          },
          {
            "name": "truncated (Optional)",
            "text": [
              "Set number to indicate how many formats can be missing."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "ymd_hms(\"2015-10-01T06:10:15\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "ymd_hms(\"2015/10/01 06:10:15 UTC\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "ymd_hms(\"Created on 15-10-01 at 06:10:15  AM\")",
            "comment": "returns \"2015-10-01 06:10:15 UTC\""
          },
          {
            "code": "ymd_hms(\"2015-10-01 06\")",
            "comment": "returns NA, because there is not enough data for Date and Time parsing."
          },
          {
            "code": "ymd_hms(\"2015-10-01 06\", truncated = 2)",
            "comment": "returns \"2015-10-01 06:00:00 UTC\" as expected"
          }
        ],
        "tags": [
          "convert",
          "transform",
          "date",
          "time"
        ],
        "categories": [
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert Character or Number to Date / Period when data contains Date and Time.</p>\n\n<p><strong>Syntax</strong><br>\nymd_hms(<code>&lt;column&gt;</code>, tz = <code>&lt;timezone&gt;</code>, locale = <code>&lt;locale&gt;</code>, truncated = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>tz (Optional) - Specify which time zone to parse the date with. You can find a list of time zones <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">here</a>.<br></li>\n<li>truncated (Optional) - Set number to indicate how many formats can be missing.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct     </p>\n\n<p><strong>Example</strong><br>\nymd_hms(&quot;2015-10-01T06:10:15&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nymd_hms(&quot;2015/10/01 06:10:15 UTC&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nymd_hms(&quot;Created on 15-10-01 at 06:10:15  AM&quot;)<br>\n<em>returns &quot;2015-10-01 06:10:15 UTC&quot;</em><br>\nymd_hms(&quot;2015-10-01 06&quot;)<br>\n<em>returns NA, because there is not enough data for Date and Time parsing.</em><br>\nymd_hms(&quot;2015-10-01 06&quot;, truncated = 2)<br>\n<em>returns &quot;2015-10-01 06:00:00 UTC&quot; as expected</em>    </p>\n"
      }
    ]
  },
  {
    "category": "Logical",
    "functions": [
      {
        "name": "!",
        "package": "base",
        "source": "exploratory doc",
        "description": "Reverses the meaning of the following condition. It is a logical negation and has a similar meaning as 'Not'.",
        "usage": [
          {
            "syntax": "!<condition>",
            "tokens": [
              {
                "id": "0",
                "value": "!<condition>"
              }
            ],
            "arguments": {
            },
            "html": "!<condition>"
          }
        ],
        "arguments": [

        ],
        "return_value": null,
        "examples": [
          {
            "code": "filter(!is.na(Population))",
            "comment": "Keep the row if Population value is NOT NA"
          },
          {
            "code": "filter(!str_detect(City, \"Francisco\"))",
            "comment": "Keep the row if City value does NOT include text 'Francisco'."
          },
          {
            "code": "filter(!Sales > 500)",
            "comment": "Keep the row if Sales value is NOT greater than 500."
          }
        ],
        "tags": [

        ],
        "categories": [
          "Logical"
        ],
        "html": "<p><strong>Summary</strong><br>\nReverses the meaning of the following condition. It is a logical negation and has a similar meaning as &#39;Not&#39;.</p>\n\n<p><strong>Syntax</strong><br>\n!<condition></p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong>  </p>\n\n<p><strong>Example</strong><br>\nfilter(!is.na(Population))<br>\n<em>Keep the row if Population value is NOT NA</em><br>\nfilter(!str_detect(City, &quot;Francisco&quot;))<br>\n<em>Keep the row if City value does NOT include text &#39;Francisco&#39;.</em><br>\nfilter(!Sales &gt; 500)<br>\n<em>Keep the row if Sales value is NOT greater than 500.</em></p>\n"
      },
      {
        "name": "all",
        "package": "base",
        "source": "exploratory doc",
        "description": "Return TRUE if the condition is satisfied for all the rows or a group of rows.",
        "usage": [
          {
            "syntax": "all(```<condition>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "all("
              },
              {
                "id": "condition",
                "value": "<condition>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "condition",
              "na.rm": "logical"
            },
            "html": "all(<b><i>condition</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "summarize(is_matched_all = all(userid == username))",
            "comment": "Return TRUE if all the userid values and username values are same, otherwise FALSE."
          },
          {
            "code": "summarize(is_matched_all = all(revenue > 500))",
            "comment": "Return TRUE if all the revenue values are greater than 500, otherwise FALSE."
          }
        ],
        "tags": [
          "all",
          "condition"
        ],
        "categories": [
          "Logical",
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn TRUE if the condition is satisfied for all the rows or a group of rows.</p>\n\n<p><strong>Syntax</strong><br>\nall(<code>&lt;condition&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nsummarize(is_matched_all = all(userid == username))<br>\n<em>Return TRUE if all the userid values and username values are same, otherwise FALSE.</em>\nsummarize(is_matched_all = all(revenue &gt; 500))<br>\n<em>Return TRUE if all the revenue values are greater than 500, otherwise FALSE.</em></p>\n"
      },
      {
        "name": "any",
        "package": "base",
        "source": "exploratory doc",
        "description": "Return TRUE if the condition is satisfied for any of the rows or a group of rows.",
        "usage": [
          {
            "syntax": "any(```<condition>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "any("
              },
              {
                "id": "condition",
                "value": "<condition>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "condition",
              "na.rm": "logical"
            },
            "html": "any(<b><i>condition</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "summarize(is_matched_all = any(userid == username))",
            "comment": "Return TRUE if any of the userid values and username values are same, otherwise FALSE."
          },
          {
            "code": "summarize(is_matched_all = all(revenue > 500))",
            "comment": "Return TRUE if any of the revenue values are greater than 500, otherwise FALSE."
          }
        ],
        "tags": [
          "any",
          "condition"
        ],
        "categories": [
          "Logical",
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn TRUE if the condition is satisfied for any of the rows or a group of rows.</p>\n\n<p><strong>Syntax</strong><br>\nany(<code>&lt;condition&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nsummarize(is_matched_all = any(userid == username))<br>\n<em>Return TRUE if any of the userid values and username values are same, otherwise FALSE.</em>\nsummarize(is_matched_all = all(revenue &gt; 500))<br>\n<em>Return TRUE if any of the revenue values are greater than 500, otherwise FALSE.</em></p>\n"
      },
      {
        "name": "duplicated",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns a logical value (TRUE or FALSE) indicating if it is a duplicated value or rows.",
        "usage": [
          {
            "syntax": "duplicated(```<column(s)>```, incomparables = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "duplicated("
              },
              {
                "id": "column(s)",
                "value": "<column(s)>"
              },
              {
                "id": "2",
                "value": ", incomparables = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "__repeat__": "column",
              "incomparables": "logical"
            },
            "html": "duplicated(<b><i>column(s)</i></b>, incomparables = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "incomparables (Optional)",
            "text": [
              "a vector of values that cannot be compared. FALSE is a special value, meaning that all values can be compared, and may be the only value accepted for methods other than the default."
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "duplicated(x)",
            "comment": "Returns FALSE FALSE FALSE  TRUE  TRUE"
          },
          {
            "code": "duplicated(x, incomparables = \"a\")",
            "comment": "Returns FALSE FALSE FALSE FALSE  TRUE"
          },
          {
            "code": "mutate(a = duplicated(ARR_TIME))",
            "comment": "Returns TRUE or FALSE for each row"
          },
          {
            "code": "filter(duplicated(ARR_TIME, ARR_DELAY))",
            "comment": "Keep only the duplicated rows"
          },
          {
            "code": "summarise(a = sum(!duplicated(ARR_TIME)))",
            "comment": "Returns # of NOT duplicated values for each group. This is same as the below."
          }
        ],
        "tags": [
          "duplicated",
          "same",
          "identical"
        ],
        "categories": [
          "Logical"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns a logical value (TRUE or FALSE) indicating if it is a duplicated value or rows.</p>\n\n<p><strong>Syntax</strong><br>\nduplicated(<code>&lt;column(s)&gt;</code>, incomparables = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>incomparables (Optional) - a vector of values that cannot be compared. FALSE is a special value, meaning that all values can be compared, and may be the only value accepted for methods other than the default.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical    </p>\n\n<p><strong>Example</strong><br>\n// x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;b&quot;)<br>\nduplicated(x)<br>\n<em>Returns FALSE FALSE FALSE  TRUE  TRUE</em>\nduplicated(x, incomparables = &quot;a&quot;)<br>\n<em>Returns FALSE FALSE FALSE FALSE  TRUE</em><br>\nmutate(a = duplicated(ARR_TIME))\n<em>Returns TRUE or FALSE for each row</em><br>\nfilter(duplicated(ARR_TIME, ARR_DELAY))<br>\n<em>Keep only the duplicated rows</em><br>\nsummarise(a = sum(!duplicated(ARR_TIME)))<br>\n<em>Returns # of NOT duplicated values for each group. This is same as the below.</em><br>\nsummarise(a = sum(length(unique(ARR_TIME))))  </p>\n"
      },
      {
        "name": "ifelse",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns different values based on the conditional result.",
        "usage": [
          {
            "syntax": "ifelse(```<condition>```, ```<return_value_when_TRUE>```, ```<return_value_when_FALSE>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ifelse("
              },
              {
                "id": "condition",
                "value": "<condition>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "return_value_when_TRUE",
                "value": "<return_value_when_TRUE>"
              },
              {
                "id": "4",
                "value": ", "
              },
              {
                "id": "return_value_when_FALSE",
                "value": "<return_value_when_FALSE>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "condition",
              "1": "return_value_when_TRUE",
              "2": "return_value_when_FALSE"
            },
            "html": "ifelse(<b><i>condition</i></b>, <b><i>return_value_when_TRUE</i></b>, <b><i>return_value_when_FALSE</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "condition",
            "text": [
              "a condition to test."
            ]
          },
          {
            "name": "return_value_when_yes",
            "text": [
              "return value when the condition test returns TRUE."
            ]
          },
          {
            "name": "return_value_when_no",
            "text": [
              "return value when the condition test returns FALSE."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "ifelse(x > 3, \"Bigger\", \"Smaller\")",
            "comment": "Returns \"Smaller\" \"Smaller\" \"Smaller\" \"Bigger\"  \"Bigger\""
          }
        ],
        "tags": [
          "if",
          "case",
          "condition",
          "when"
        ],
        "categories": [
          "Logical"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns different values based on the conditional result.</p>\n\n<p><strong>Syntax</strong><br>\nifelse(<code>&lt;condition&gt;</code>, <code>&lt;return_value_when_TRUE&gt;</code>, <code>&lt;return_value_when_FALSE&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>condition - a condition to test.</li>\n<li>return_value_when_yes - return value when the condition test returns TRUE.</li>\n<li>return_value_when_no - return value when the condition test returns FALSE.</li>\n</ul>\n\n<p><strong>Return Value</strong>   </p>\n\n<p><strong>Example</strong><br>\n//x &lt;- 1:5<br>\nifelse(x &gt; 3, &quot;Bigger&quot;, &quot;Smaller&quot;)<br>\n<em>Returns &quot;Smaller&quot; &quot;Smaller&quot; &quot;Smaller&quot; &quot;Bigger&quot;  &quot;Bigger&quot;</em></p>\n"
      },
      {
        "name": "is.na",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns TRUE when it is NA.",
        "usage": [
          {
            "syntax": "is.na(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "is.na("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "is.na(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "filter(is.na(ARR_DELAY))",
            "comment": "Keep only rows where ARR_DELAY is NA"
          },
          {
            "code": "filter(!is.na(ARR_DELAY))",
            "comment": "Keep only rows where ARR_DELAY is NOT NA"
          }
        ],
        "tags": [
          "na",
          "null",
          "blank"
        ],
        "categories": [
          "Logical"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns TRUE when it is NA.</p>\n\n<p><strong>Syntax</strong><br>\nis.na(<code>&lt;column&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nfilter(is.na(ARR_DELAY))<br>\n<em>Keep only rows where ARR_DELAY is NA</em><br>\nfilter(!is.na(ARR_DELAY))<br>\n<em>Keep only rows where ARR</em>DELAY is NOT NA_  </p>\n"
      },
      {
        "name": "is.null",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns TRUE when it is null.",
        "usage": [
          {
            "syntax": "is.null(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "is.null("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "is.null(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "filter(is.null(ARR_DELAY))",
            "comment": "Keep only rows where ARR_DELAY is null"
          },
          {
            "code": "filter(!is.null(ARR_DELAY))",
            "comment": "Keep only rows where ARR_DELAY is NOT null"
          }
        ],
        "tags": [
          "na",
          "null",
          "blank"
        ],
        "categories": [
          "Logical"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns TRUE when it is null.</p>\n\n<p><strong>Syntax</strong><br>\nis.null(<code>&lt;column&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nfilter(is.null(ARR_DELAY))<br>\n<em>Keep only rows where ARR_DELAY is null</em><br>\nfilter(!is.null(ARR_DELAY))<br>\n<em>Keep only rows where ARR</em>DELAY is NOT null_  </p>\n"
      },
      {
        "name": "isTRUE",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns true if and only if a given value is a length-one logical vector whose only element is TRUE.",
        "usage": [
          {
            "syntax": "isTRUE(<logical>)",
            "tokens": [
              {
                "id": "0",
                "value": "isTRUE(<logical>)"
              }
            ],
            "arguments": {
            },
            "html": "isTRUE(<logical>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "isTRUE(TRUE)",
            "comment": "Returns TRUE"
          },
          {
            "code": "isTRUE(FALSE)",
            "comment": "Returns FALSE"
          },
          {
            "code": "summarise(a = isTRUE(mean(ARR_DELAY) > 120))",
            "comment": "Returns TRUE or FALSE based on the average of ARR_DELAY for each group."
          }
        ],
        "tags": [
          "true"
        ],
        "categories": [
          "Logical"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns true if and only if a given value is a length-one logical vector whose only element is TRUE.</p>\n\n<p><strong>Syntax</strong><br>\nisTRUE(<logical>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nLogical    </p>\n\n<p><strong>Example</strong><br>\nisTRUE(TRUE)<br>\n<em>Returns TRUE</em><br>\nisTRUE(FALSE)<br>\n<em>Returns FALSE</em><br>\nsummarise(a = isTRUE(mean(ARR_DELAY) &gt; 120))<br>\n<em>Returns TRUE or FALSE based on the average of ARR</em>DELAY for each group._  </p>\n"
      },
      {
        "name": "parse_logical",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert data to Logical (Boolean) data type.",
        "usage": [
          {
            "syntax": "parse_logical(```<column>```, na = c(\"\", \"NA\"), locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_logical("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na = c(\"\", \"NA\"), locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "locale": "locale"
            },
            "html": "parse_logical(<b><i>column</i></b>, na = c(\"\", \"NA\"), locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na",
            "text": [
              "The default is null and \"NA\". Provide a list of text to be registered as NA."
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session locale."
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "parse_logical(\"TRUE\")",
            "comment": "Returns TRUE"
          },
          {
            "code": "parse_logical(\"T\")",
            "comment": "Returns TRUE"
          }
        ],
        "tags": [
          "logical",
          "convert"
        ],
        "categories": [
          "Type Conversion",
          "Logical"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to Logical (Boolean) data type.</p>\n\n<p><strong>Syntax</strong><br>\nparse_logical(<code>&lt;column&gt;</code>, na = c(&quot;&quot;, &quot;NA&quot;), locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na - The default is null and &quot;NA&quot;. Provide a list of text to be registered as NA.</li>\n<li>locale - The default is the session locale.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nparse_logical(&quot;TRUE&quot;)<br>\n<em>Returns TRUE</em><br>\nparse_logical(&quot;T&quot;)<br>\n<em>Returns TRUE</em>  </p>\n"
      },
      {
        "name": "str_detect",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Return TRUE or FALSE based on whether Text data contains a given text or not",
        "usage": [
          {
            "syntax": "str_detect(```<column>```, ```<pattern>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_detect("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "pattern",
                "value": "<pattern>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "1": "pattern"
            },
            "html": "str_detect(<b><i>column</i></b>, <b><i>pattern</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "pattern",
            "text": [
              "text or regular expression to look for."
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "str_detect(\"New York\", \"New\")",
            "comment": "returns TRUE because there is 'New' in the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"[:alpha:]\")",
            "comment": "returns TRUE because there are alphabet letters in the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"[:digit:]\")",
            "comment": "returns TRUE because there are numeric (digit) letters in the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"^New\")",
            "comment": "returns TRUE because there is \"New\" text at the beginning of the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"New$\")",
            "comment": "returns TRUE because there is no \"New\" text at the end of the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"N.w\")",
            "comment": "returns TRUE because 'New' starts with 'N' and ends with 'w'"
          },
          {
            "code": "str_detect(\"New York on 1/1.\", fixed(\"N.w\"))",
            "comment": "returns FALSE because 'N.w' exact matching letters don't exist"
          },
          {
            "code": "str_detect(\"New York on 1/1.\", c(\"New\", \"Old\"))",
            "comment": "returns TRUE because a given text matches with one of matching texts"
          }
        ],
        "tags": [
          "matching",
          "detect",
          "find",
          "exist"
        ],
        "categories": [
          "Text",
          "Logical",
          "List"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn TRUE or FALSE based on whether Text data contains a given text or not</p>\n\n<p><strong>Syntax</strong><br>\nstr_detect(<code>&lt;column&gt;</code>, <code>&lt;pattern&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>pattern - text or regular expression to look for.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nstr_detect(&quot;New York&quot;, &quot;New&quot;)<br>\n<em>returns TRUE because there is &#39;New&#39; in the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;[:alpha:]&quot;)<br>\n<em>returns TRUE because there are alphabet letters in the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;[:digit:]&quot;)<br>\n<em>returns TRUE because there are numeric (digit) letters in the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;^New&quot;)<br>\n<em>returns TRUE because there is &quot;New&quot; text at the beginning of the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;New$&quot;)<br>\n<em>returns TRUE because there is no &quot;New&quot; text at the end of the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;N.w&quot;)<br>\n<em>returns TRUE because &#39;New&#39; starts with &#39;N&#39; and ends with &#39;w&#39;</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, fixed(&quot;N.w&quot;))<br>\n<em>returns FALSE because &#39;N.w&#39; exact matching letters don&#39;t exist</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, c(&quot;New&quot;, &quot;Old&quot;))<br>\n<em>returns TRUE because a given text matches with one of matching texts</em>  </p>\n"
      },
      {
        "name": "which",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the TRUE indices of a logical object or based on the condition.",
        "usage": [
          {
            "syntax": "which(```<condition>```, arr.ind = ```<logical>```, useNames = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "which("
              },
              {
                "id": "condition",
                "value": "<condition>"
              },
              {
                "id": "2",
                "value": ", arr.ind = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ", useNames = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "condition",
              "arr.ind": "logical",
              "useNames": "logical"
            },
            "html": "which(<b><i>condition</i></b>, arr.ind = <b><i>logical</i></b>, useNames = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "arr.ind (Optional)",
            "text": [
              "TRUE or FALSE, whether it returns array indices when the input is an array?"
            ]
          },
          {
            "name": "useNames (Optional)",
            "text": [
              "TRUE or FALSE, indicating if the value of arrayInd() should have (non-null) dimnames at all."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "which(x == \"c\")",
            "comment": "Returns 3"
          },
          {
            "code": "select(which(sapply(., is.numeric)))",
            "comment": "Returns only numeric columns."
          }
        ],
        "tags": [

        ],
        "categories": [
          "Logical"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the TRUE indices of a logical object or based on the condition.</p>\n\n<p><strong>Syntax</strong><br>\nwhich(<code>&lt;condition&gt;</code>, arr.ind = <code>&lt;logical&gt;</code>, useNames = <code>&lt;logical&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>arr.ind (Optional) - TRUE or FALSE, whether it returns array indices when the input is an array?</li>\n<li>useNames (Optional) - TRUE or FALSE, indicating if the value of arrayInd() should have (non-null) dimnames at all.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nx &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;)<br>\nwhich(x == &quot;c&quot;)<br>\n<em>Returns 3</em><br>\nselect(which(sapply(., is.numeric)))<br>\n<em>Returns only numeric columns.</em>  </p>\n"
      },
      {
        "name": "xor",
        "package": "base",
        "source": "exploratory doc",
        "description": "Performs an exclusive-or check across two values and return TRUE when only one of them is TRUE.",
        "usage": [
          {
            "syntax": "xor(```<value1>```, ```<value2>```)",
            "tokens": [
              {
                "id": "0",
                "value": "xor("
              },
              {
                "id": "value1",
                "value": "<value1>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "value2",
                "value": "<value2>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "value1",
              "1": "value2"
            },
            "html": "xor(<b><i>value1</i></b>, <b><i>value2</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "xor(TRUE, TRUE)",
            "comment": "Returns FALSE"
          },
          {
            "code": "xor(FALSE, TRUE)",
            "comment": "Returns TRUE"
          },
          {
            "code": "xor(FALSE, FALSE)",
            "comment": "Returns FALSE"
          }
        ],
        "tags": [
          "or",
          "exclusive-or",
          "logical"
        ],
        "categories": [
          "Logical"
        ],
        "html": "<p><strong>Summary</strong><br>\nPerforms an exclusive-or check across two values and return TRUE when only one of them is TRUE.</p>\n\n<p><strong>Syntax</strong><br>\nxor(<code>&lt;value1&gt;</code>, <code>&lt;value2&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nLogical    </p>\n\n<p><strong>Example</strong><br>\nxor(TRUE, TRUE)<br>\n<em>Returns FALSE</em><br>\nxor(FALSE, TRUE)<br>\n<em>Returns TRUE</em><br>\nxor(FALSE, FALSE)<br>\n<em>Returns FALSE</em>  </p>\n"
      }
    ]
  },
  {
    "category": "Aggregate",
    "functions": [
      {
        "name": "IQR",
        "package": "stats",
        "source": "exploratory doc",
        "description": "computes interquartile range of the x values",
        "usage": [
          {
            "syntax": "IQR(```<column>```, na.rm = ```<logical>```, type = ```1|2|3|4|5|6|7|8|9```)",
            "tokens": [
              {
                "id": "0",
                "value": "IQR("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ", type = "
              },
              {
                "id": "5",
                "value": "1|2|3|4|5|6|7|8|9"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num_logic_date",
              "na.rm": "logical",
              "type": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "html": "IQR(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>, type = ```1|2|3|4|5|6|7|8|9```)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          },
          {
            "name": "type (Optional)",
            "text": [
              "The default is 8. An integer selecting one of the many quantile algorithms, see [here](http://159.203.251.0/quantile-type) for the detail."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "IQR(x)",
            "comment": "Returns 4.5"
          }
        ],
        "tags": [
          "interquartile"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\ncomputes interquartile range of the x values</p>\n\n<p><strong>Syntax</strong><br>\nIQR(<code>&lt;column_num_logic_date&gt;</code>, na.rm = <code>&lt;logical&gt;</code>, type = <code>1|2|3|4|5|6|7|8|9</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n<li>type (Optional) - The default is 8. An integer selecting one of the many quantile algorithms, see <a href=\"http://159.203.251.0/quantile-type\">here</a> for the detail.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\n// x &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)<br>\nIQR(x)<br>\n<em>Returns 4.5</em></p>\n"
      },
      {
        "name": "all",
        "package": "base",
        "source": "exploratory doc",
        "description": "Return TRUE if the condition is satisfied for all the rows or a group of rows.",
        "usage": [
          {
            "syntax": "all(```<condition>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "all("
              },
              {
                "id": "condition",
                "value": "<condition>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "condition",
              "na.rm": "logical"
            },
            "html": "all(<b><i>condition</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "summarize(is_matched_all = all(userid == username))",
            "comment": "Return TRUE if all the userid values and username values are same, otherwise FALSE."
          },
          {
            "code": "summarize(is_matched_all = all(revenue > 500))",
            "comment": "Return TRUE if all the revenue values are greater than 500, otherwise FALSE."
          }
        ],
        "tags": [
          "all",
          "condition"
        ],
        "categories": [
          "Logical",
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn TRUE if the condition is satisfied for all the rows or a group of rows.</p>\n\n<p><strong>Syntax</strong><br>\nall(<code>&lt;condition&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nsummarize(is_matched_all = all(userid == username))<br>\n<em>Return TRUE if all the userid values and username values are same, otherwise FALSE.</em>\nsummarize(is_matched_all = all(revenue &gt; 500))<br>\n<em>Return TRUE if all the revenue values are greater than 500, otherwise FALSE.</em></p>\n"
      },
      {
        "name": "any",
        "package": "base",
        "source": "exploratory doc",
        "description": "Return TRUE if the condition is satisfied for any of the rows or a group of rows.",
        "usage": [
          {
            "syntax": "any(```<condition>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "any("
              },
              {
                "id": "condition",
                "value": "<condition>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "condition",
              "na.rm": "logical"
            },
            "html": "any(<b><i>condition</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "summarize(is_matched_all = any(userid == username))",
            "comment": "Return TRUE if any of the userid values and username values are same, otherwise FALSE."
          },
          {
            "code": "summarize(is_matched_all = all(revenue > 500))",
            "comment": "Return TRUE if any of the revenue values are greater than 500, otherwise FALSE."
          }
        ],
        "tags": [
          "any",
          "condition"
        ],
        "categories": [
          "Logical",
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn TRUE if the condition is satisfied for any of the rows or a group of rows.</p>\n\n<p><strong>Syntax</strong><br>\nany(<code>&lt;condition&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nsummarize(is_matched_all = any(userid == username))<br>\n<em>Return TRUE if any of the userid values and username values are same, otherwise FALSE.</em>\nsummarize(is_matched_all = all(revenue &gt; 500))<br>\n<em>Return TRUE if any of the revenue values are greater than 500, otherwise FALSE.</em></p>\n"
      },
      {
        "name": "length",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the length of the values.",
        "usage": [
          {
            "syntax": "length(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "length("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "length(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "summarize(text_length = length(TAIL_NUM))",
            "comment": "Returns # of values for each group"
          },
          {
            "code": "summarize(text_length = length(unique(TAIL_NUM)))",
            "comment": "Returns # of unique values of 'TAIL\\_NUM' for each group"
          }
        ],
        "tags": [
          "length",
          "numbers",
          "count",
          "items"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the length of the values.</p>\n\n<p><strong>Syntax</strong><br>\nlength(<code>&lt;column&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nsummarize(text_length = length(TAIL_NUM))<br>\n<em>Returns # of values for each group</em><br>\nsummarize(text_length = length(unique(TAIL_NUM)))<br>\n<em>Returns # of unique values of &#39;TAIL_NUM&#39; for each group</em>  </p>\n"
      },
      {
        "name": "mad",
        "package": "stats",
        "source": "exploratory doc",
        "description": "returns the median absolute deviation of the values.",
        "usage": [
          {
            "syntax": "mad(```<column>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "mad("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num_logic_date",
              "na.rm": "logical"
            },
            "html": "mad(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          },
          {
            "name": "center",
            "text": [
              "Optionally, the centre: defaults to the median.",
              "* constant\t- scale factor.",
              "* low\t- if TRUE, compute the ‘lo-median’, i.e., for even sample size, do not average the two middle values, but take the smaller one."
            ]
          },
          {
            "name": "high",
            "text": [
              "if TRUE, compute the ‘hi-median’, i.e., take the larger of the two middle values for even sample size."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "summarize(mad = mad(revenue))",
            "comment": "Create a new column for calculating the median absolute deviation of revenue for each group."
          }
        ],
        "tags": [
          "median absolute deviation"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nreturns the median absolute deviation of the values.  </p>\n\n<p><strong>Syntax</strong><br>\nmad(<code>&lt;column_num_logic_date&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n<li>center - Optionally, the centre: defaults to the median.<br></li>\n<li>constant  - scale factor.<br></li>\n<li>low   - if TRUE, compute the ‘lo-median’, i.e., for even sample size, do not average the two middle values, but take the smaller one.<br></li>\n<li>high - if TRUE, compute the ‘hi-median’, i.e., take the larger of the two middle values for even sample size.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nsummarize(mad = mad(revenue))<br>\n<em>Create a new column for calculating the median absolute deviation of revenue for each group.</em>  </p>\n"
      },
      {
        "name": "max",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the maximum value in a numeric column.",
        "usage": [
          {
            "syntax": "max(```<column>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "max("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "na.rm": "logical"
            },
            "html": "max(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "summarize(revenue_max = max(revenue))",
            "comment": "Create a new column for calculating the max value of of revenue for each group."
          }
        ],
        "tags": [
          "max",
          "maximum"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the maximum value in a numeric column.  </p>\n\n<p><strong>Syntax</strong><br>\nmax(<code>&lt;column&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nsummarize(revenue_max = max(revenue))<br>\n<em>Create a new column for calculating the max value of of revenue for each group.</em>  </p>\n"
      },
      {
        "name": "mean",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the numerical average (mean) value.",
        "usage": [
          {
            "syntax": "mean(```<column>```, na.rm = ```<logical>```, trim = <numeric>)",
            "tokens": [
              {
                "id": "0",
                "value": "mean("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ", trim = <numeric>)"
              }
            ],
            "arguments": {
              "0": "column_num_logic_date",
              "na.rm": "logical"
            },
            "html": "mean(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>, trim = <numeric>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm (Optional)",
            "text": [
              "The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          },
          {
            "name": "trim (Optional)",
            "text": [
              "the fraction (0 to 0.5) of observations to be trimmed from each end of the values of a given column before the mean operation. Values of trim outside that range are taken as the nearest endpoint."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "summarize(revenue_mean = mean(revenue))",
            "comment": "Create a new column for calculating the average value of revenue for each group."
          }
        ],
        "tags": [
          "mean",
          "average"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the numerical average (mean) value.  </p>\n\n<p><strong>Syntax</strong><br>\nmean(<code>&lt;column_num_logic_date&gt;</code>, na.rm = <code>&lt;logical&gt;</code>, trim = <numeric>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm (Optional) - The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n<li>trim (Optional) - the fraction (0 to 0.5) of observations to be trimmed from each end of the values of a given column before the mean operation. Values of trim outside that range are taken as the nearest endpoint.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nsummarize(revenue_mean = mean(revenue))<br>\n<em>Create a new column for calculating the average value of revenue for each group.</em>  </p>\n"
      },
      {
        "name": "median",
        "package": "stats",
        "source": "exploratory doc",
        "description": "Returns the numerical median value.",
        "usage": [
          {
            "syntax": "median(```<column>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "median("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num_logic_date",
              "na.rm": "logical"
            },
            "html": "median(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "summarize(revenue_median = median(revenue))",
            "comment": "Create a new column for calculating the median value of revenue for each group."
          }
        ],
        "tags": [
          "median"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the numerical median value.  </p>\n\n<p><strong>Syntax</strong><br>\nmedian(<code>&lt;column_num_logic_date&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nsummarize(revenue_median = median(revenue))<br>\n<em>Create a new column for calculating the median value of revenue for each group.</em>  </p>\n"
      },
      {
        "name": "min",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the minimum value in a numeric column.",
        "usage": [
          {
            "syntax": "min(```<column>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "min("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "na.rm": "logical"
            },
            "html": "min(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "summarize(revenue_min = min(revenue))",
            "comment": "Create a new column for calculating the minimum of revenue for each group."
          }
        ],
        "tags": [
          "min",
          "minimum"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the minimum value in a numeric column.  </p>\n\n<p><strong>Syntax</strong><br>\nmin(<code>&lt;column&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nsummarize(revenue_min = min(revenue))<br>\n<em>Create a new column for calculating the minimum of revenue for each group.</em>  </p>\n"
      },
      {
        "name": "n",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns the count of the rows for each group.",
        "usage": [
          {
            "syntax": "n()",
            "tokens": [
              {
                "id": "0",
                "value": "n()"
              }
            ],
            "arguments": {
            },
            "html": "n()"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "summarize(total = n())",
            "comment": "Create a new column for calculating the number of entries for each group."
          }
        ],
        "tags": [
          "count",
          "total"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the count of the rows for each group.</p>\n\n<p><strong>Syntax</strong><br>\nn()</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric   </p>\n\n<p><strong>Example</strong><br>\nsummarize(total = n())<br>\n<em>Create a new column for calculating the number of entries for each group.</em>  </p>\n"
      },
      {
        "name": "n_distinct",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns the count of unique values.",
        "usage": [
          {
            "syntax": "n_distinct(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "n_distinct("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "n_distinct(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "summarize(total = n_distinct(TAIL_NUM))",
            "comment": "Create a new column for calculating the count of unique values of TAIL_NUM for each group."
          }
        ],
        "tags": [
          "count",
          "unique",
          "total"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the count of unique values.</p>\n\n<p><strong>Syntax</strong><br>\nn_distinct(<code>&lt;column&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric   </p>\n\n<p><strong>Example</strong><br>\nsummarize(total = n_distinct(TAIL_NUM))<br>\n<em>Create a new column for calculating the count of unique values of TAIL</em>NUM for each group._  </p>\n"
      },
      {
        "name": "nth",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "returns the nth value of all the values.",
        "usage": [
          {
            "syntax": "nth(```<column>```, n = ```<number>```, order_by = ```<column(s)>```, default = ```<text>```)",
            "tokens": [
              {
                "id": "0",
                "value": "nth("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ", order_by = "
              },
              {
                "id": "column(s)",
                "value": "<column(s)>"
              },
              {
                "id": "6",
                "value": ", default = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "n": "number",
              "__repeat__": "column",
              "default": "text"
            },
            "html": "nth(<b><i>column</i></b>, n = <b><i>number</i></b>, order_by = <b><i>column(s)</i></b>, default = <b><i>text</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "order_by (Optional)",
            "text": [
              "An optional vector used to determine the order"
            ]
          },
          {
            "name": "default (Optional)",
            "text": [
              "A default value to use if the position does not exist in the input. This is guessed by default for atomic vectors, where a missing value of the appropriate type is return, and for lists, where a NULL is return. For more complicated objects, you'll need to supply this value."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "summarize(total = nth(name, 5))",
            "comment": "Create a new column for returning the fifth value for each group."
          }
        ],
        "tags": [
          "nth",
          "position"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nreturns the nth value of all the values.  </p>\n\n<p><strong>Syntax</strong><br>\nnth(<code>&lt;column&gt;</code>, n = <code>&lt;number&gt;</code>, order_by = <code>&lt;column(s)&gt;</code>, default = <code>&lt;text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n - For nth_value, a single integer specifying the position. If a numeric is supplied, it will be silently truncated.<br></li>\n<li>order_by (Optional) - An optional vector used to determine the order<br></li>\n<li>default (Optional) - A default value to use if the position does not exist in the input. This is guessed by default for atomic vectors, where a missing value of the appropriate type is return, and for lists, where a NULL is return. For more complicated objects, you&#39;ll need to supply this value.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nsummarize(total = nth(name, 5))<br>\n<em>Create a new column for returning the fifth value for each group.</em>  </p>\n"
      },
      {
        "name": "prod",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the product value by multiplying a series of numbers in a given data together.",
        "usage": [
          {
            "syntax": "prod(```<<column>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "prod("
              },
              {
                "id": "<column",
                "value": "<<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "<column_num_logic",
              "na.rm": "logical"
            },
            "html": "prod(<b><i><column</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "logical. Should missing values (including NaN) be removed?"
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "prod(x)",
            "comment": "Returns 120"
          }
        ],
        "tags": [
          "product",
          "multiply"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the product value by multiplying a series of numbers in a given data together.</p>\n\n<p><strong>Syntax</strong><br>\nprod(<code>&lt;&lt;column_num_logic&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - logical. Should missing values (including NaN) be removed?</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\n// x &lt;- 1:5<br>\nprod(x)<br>\n<em>Returns 120</em>  </p>\n"
      },
      {
        "name": "quantile",
        "package": "stats",
        "source": "exploratory doc",
        "description": "sample quantiles corresponding to the given probabilities. The smallest observation corresponds to a probability of 0 and the largest to a probability of 1.",
        "usage": [
          {
            "syntax": "quantile(```<column>```, probs = ```<percent_number>```, na.rm = ```<logical>```, [type = ```1|2|3|4|5|6|7|8|9```])",
            "tokens": [
              {
                "id": "0",
                "value": "quantile("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", probs = "
              },
              {
                "id": "percent_number",
                "value": "<percent_number>"
              },
              {
                "id": "4",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ", [type = "
              },
              {
                "id": "7",
                "value": "1|2|3|4|5|6|7|8|9"
              },
              {
                "id": "8",
                "value": "])"
              }
            ],
            "arguments": {
              "0": "column_num_logic_date",
              "probs": "percent_number",
              "na.rm": "logical",
              "type": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "html": "quantile(<b><i>column</i></b>, probs = <b><i>percent_number</i></b>, na.rm = <b><i>logical</i></b>, [type = ```1|2|3|4|5|6|7|8|9```])"
          }
        ],
        "arguments": [
          {
            "name": "probs",
            "text": [
              "numeric probability number within [0,1]."
            ]
          },
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          },
          {
            "name": "type",
            "text": [
              "The default is 8. An integer between 1 and 9 selecting one of the nine quantile algorithms detailed [here](http://159.203.251.0/quantile-type) to be used."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "quantile(x, 0.25)",
            "comment": "Returns 3.25"
          },
          {
            "code": "quantile(x, .5)",
            "comment": "Returns 5.5"
          }
        ],
        "tags": [
          "quantile"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nsample quantiles corresponding to the given probabilities. The smallest observation corresponds to a probability of 0 and the largest to a probability of 1.</p>\n\n<p><strong>Syntax</strong><br>\nquantile(<code>&lt;column_num_logic_date&gt;</code>, probs = <code>&lt;percent_number&gt;</code>, na.rm = <code>&lt;logical&gt;</code>, [type = <code>1|2|3|4|5|6|7|8|9</code>])</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>probs - numeric probability number within [0,1].<br></li>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n<li>type - The default is 8. An integer between 1 and 9 selecting one of the nine quantile algorithms detailed <a href=\"http://159.203.251.0/quantile-type\">here</a> to be used.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\n//x &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)<br>\nquantile(x, 0.25)<br>\n<em>Returns 3.25</em><br>\nquantile(x, .5)<br>\n<em>Returns 5.5</em>  </p>\n"
      },
      {
        "name": "sd",
        "package": "stats",
        "source": "exploratory doc",
        "description": "returns the standard deviation of the values.",
        "usage": [
          {
            "syntax": "sd(```<column>```, na.rm = ```<logical>)```)",
            "tokens": [
              {
                "id": "0",
                "value": "sd("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "3",
                "value": "<logical>)"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num_logic_date"
            },
            "html": "sd(<b><i>column</i></b>, na.rm = <b><i>logical>)```)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "summarize(sd = sd(revenue))",
            "comment": "Create a new column for calculating the standard deviation of revenue for each group."
          }
        ],
        "tags": [
          "standard deviation"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nreturns the standard deviation of the values.</p>\n\n<p><strong>Syntax</strong><br>\nsd(<code>&lt;column_num_logic_date&gt;</code>, na.rm = <code>&lt;logical&gt;)</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nsummarize(sd = sd(revenue))<br>\n<em>Create a new column for calculating the standard deviation of revenue for each group.</em>  </p>\n"
      },
      {
        "name": "sum",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the sum of all the values.",
        "usage": [
          {
            "syntax": "sum(```<column>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "sum("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num_logic",
              "na.rm": "logical"
            },
            "html": "sum(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "summarize(total = sum(revenue))",
            "comment": "Create a new column for calculating the sum of revenue for each group."
          }
        ],
        "tags": [
          "sum",
          "total"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the sum of all the values.  </p>\n\n<p><strong>Syntax</strong><br>\nsum(<code>&lt;column_num_logic&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nsummarize(total = sum(revenue))<br>\n<em>Create a new column for calculating the sum of revenue for each group.</em>  </p>\n"
      },
      {
        "name": "unique",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns number of unique values.",
        "usage": [
          {
            "syntax": "unique(```<column>```, incomparables = ```<logical>```, fromLast = ```<logical>```, nmax = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "unique("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", incomparables = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ", fromLast = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "6",
                "value": ", nmax = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "incomparables": "logical",
              "fromLast": "logical",
              "nmax": "number"
            },
            "html": "unique(<b><i>column</i></b>, incomparables = <b><i>logical</i></b>, fromLast = <b><i>logical</i></b>, nmax = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "incomparables (Optional)",
            "text": [
              "The default is FALSE. A vector of values that cannot be compared. FALSE is a special value, meaning that all values can be compared, and may be the only value accepted for methods other than the default. It will be coerced internally to the same type as x."
            ]
          },
          {
            "name": "fromLast",
            "text": [
              "The default is FALSE. Indicating if duplication should be considered from the last, i.e., the last (or rightmost) of identical elements will be kept. This only matters for names or dimnames."
            ]
          },
          {
            "name": "nmax",
            "text": [
              "the maximum number of unique items expected."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "summarize(text_length = length(unique(TAIL_NUM)))",
            "comment": "Returns # of unique values of 'TAIL_NUM' for each group"
          }
        ],
        "tags": [
          "unique",
          "distinct"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns number of unique values.</p>\n\n<p><strong>Syntax</strong><br>\nunique(<code>&lt;column&gt;</code>, incomparables = <code>&lt;logical&gt;</code>, fromLast = <code>&lt;logical&gt;</code>, nmax = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>incomparables (Optional) - The default is FALSE. A vector of values that cannot be compared. FALSE is a special value, meaning that all values can be compared, and may be the only value accepted for methods other than the default. It will be coerced internally to the same type as x.<br></li>\n<li>fromLast - The default is FALSE. Indicating if duplication should be considered from the last, i.e., the last (or rightmost) of identical elements will be kept. This only matters for names or dimnames.<br></li>\n<li>nmax - the maximum number of unique items expected.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nsummarize(text_length = length(unique(TAIL_NUM)))<br>\n<em>Returns # of unique values of &#39;TAIL</em>NUM&#39; for each group_  </p>\n"
      },
      {
        "name": "var",
        "package": "stats",
        "source": "exploratory doc",
        "description": "returns the variance of the values.",
        "usage": [
          {
            "syntax": "var(```<column>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "var("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num_logic_date",
              "na.rm": "logical"
            },
            "html": "var(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "summarize(total = sum(revenue))",
            "comment": "Create a new column for calculating the variance of revenue for each group."
          }
        ],
        "tags": [
          "variance"
        ],
        "categories": [
          "Aggregate"
        ],
        "html": "<p><strong>Summary</strong><br>\nreturns the variance of the values.  </p>\n\n<p><strong>Syntax</strong><br>\nvar(<code>&lt;column_num_logic_date&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - TRUE or FALSE. The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nsummarize(total = sum(revenue))<br>\n<em>Create a new column for calculating the variance of revenue for each group.</em>  </p>\n"
      }
    ]
  },
  {
    "category": "Window Calculation",
    "functions": [
      {
        "name": "cumall",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns TRUE if all the values up to the current position are TRUE.",
        "usage": [
          {
            "syntax": "cumall(```<condition>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cumall("
              },
              {
                "id": "condition",
                "value": "<condition>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "condition"
            },
            "html": "cumall(<b><i>condition</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "cumall(X)",
            "comment": "Returns TRUE, TRUE, FALSE, FALSE, FALSE"
          }
        ],
        "tags": [
          "cumulative",
          "logical"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns TRUE if all the values up to the current position are TRUE.</p>\n\n<p><strong>Syntax</strong><br>\ncumall(<code>&lt;condition&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nLogical   </p>\n\n<p><strong>Example</strong><br>\n// X = <a href=\"//%20X%20=%20c(TRUE,%20TRUE,%20FALSE,%20TRUE,%20FALSE)%20in%20R\">TRUE, TRUE, FALSE, TRUE, FALSE</a><br>\ncumall(X)<br>\n<em>Returns TRUE, TRUE, FALSE, FALSE, FALSE</em>  </p>\n"
      },
      {
        "name": "cumany",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns TRUE if any of the values up to the current posiiton is TRUE.",
        "usage": [
          {
            "syntax": "cumany(```<condition>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cumany("
              },
              {
                "id": "condition",
                "value": "<condition>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "condition"
            },
            "html": "cumany(<b><i>condition</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "cumany(X)",
            "comment": "Returns TRUE, TRUE, TRUE, TRUE, TRUE"
          }
        ],
        "tags": [
          "cumulative",
          "logical"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns TRUE if any of the values up to the current posiiton is TRUE.</p>\n\n<p><strong>Syntax</strong><br>\ncumany(<code>&lt;condition&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nLogical   </p>\n\n<p><strong>Example</strong><br>\n// X = <a href=\"//%20X%20=%20c(TRUE,%20TRUE,%20FALSE,%20TRUE,%20FALSE)%20in%20R\">TRUE, TRUE, FALSE, TRUE, FALSE</a><br>\ncumany(X)<br>\n<em>Returns TRUE, TRUE, TRUE, TRUE, TRUE</em>  </p>\n"
      },
      {
        "name": "cume_dist",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Cumulative distribution. Proportion of all values less than or equal to the current rank. Missing values are left as is.",
        "usage": [
          {
            "syntax": "cume_dist(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cume_dist("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "cume_dist(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(<new_column> = cume_dist(<column_name>))",
            "comment": "Create a new column to have the cumulative distribution number."
          },
          {
            "code": "filter(cume_dist(<column_name>) < .25)",
            "comment": "Select rows whose cumulative distribution number are less .25."
          }
        ],
        "tags": [
          "cumulative distribution",
          "proportion"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nCumulative distribution. Proportion of all values less than or equal to the current rank. Missing values are left as is.</p>\n\n<p><strong>Syntax</strong><br>\ncume_dist(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric   </p>\n\n<p><strong>Example</strong><br>\nmutate(<new_column> = cume_dist(<column_name>))<br>\n<em>Create a new column to have the cumulative distribution number.</em><br>\nfilter(cume_dist(<column_name>) &lt; .25)<br>\n<em>Select rows whose cumulative distribution number are less .25.</em>  </p>\n"
      },
      {
        "name": "cummax",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the cumulative maxima.",
        "usage": [
          {
            "syntax": "cummax(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cummax("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "cummax(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "cummax(X)",
            "comment": "Returns 1, 2, 3, 3, 3"
          }
        ],
        "tags": [
          "cumulative maxima"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the cumulative maxima.</p>\n\n<p><strong>Syntax</strong><br>\ncummax(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\n// X = c(1,2,3,2,1)<br>\ncummax(X)<br>\n<em>Returns 1, 2, 3, 3, 3</em>  </p>\n"
      },
      {
        "name": "cummean",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns the cumulative mean (average).",
        "usage": [
          {
            "syntax": "cummean(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cummean("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "cummean(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "cummean(X)",
            "comment": "Returns 1, 3, 6, 8, 9"
          }
        ],
        "tags": [
          "cumulative sum",
          "running total",
          "running sum"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the cumulative mean (average).</p>\n\n<p><strong>Syntax</strong><br>\ncummean(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric   </p>\n\n<p><strong>Example</strong><br>\n// X = <a href=\"//%20X%20=%20c(1,2,3,2,1)%20in%20R\">1, 2, 3, 2, 1</a><br>\ncummean(X)<br>\n<em>Returns 1, 3, 6, 8, 9</em>  </p>\n"
      },
      {
        "name": "cummin",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the cumulative minima.",
        "usage": [
          {
            "syntax": "cummin(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cummin("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "cummin(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "cummin(X)",
            "comment": "Returns 1, 1, 1, 1, 1"
          }
        ],
        "tags": [
          "cumulative minima"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the cumulative minima.</p>\n\n<p><strong>Syntax</strong><br>\ncummin(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\n// X = <a href=\"//%20x%20=%20c(1,2,3,2,1)%20in%20R\">1, 2, 3, 2, 1</a><br>\ncummin(X)<br>\n<em>Returns 1, 1, 1, 1, 1</em>  </p>\n"
      },
      {
        "name": "cumprod",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the cumulative products.",
        "usage": [
          {
            "syntax": "cumprod(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cumprod("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "cumprod(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "cumprod(X)",
            "comment": "Returns 1, 2, 6, 12, 12"
          }
        ],
        "tags": [
          "cumulative product"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the cumulative products.</p>\n\n<p><strong>Syntax</strong><br>\ncumprod(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\n// X = <a href=\"//%20x%20=%20c(1,2,3,2,1)%20in%20R\">1, 2, 3, 2, 1</a><br>\ncumprod(X)<br>\n<em>Returns 1, 2, 6, 12, 12</em>  </p>\n"
      },
      {
        "name": "cumsum",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns the cumulative sums.",
        "usage": [
          {
            "syntax": "cumsum(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cumsum("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "cumsum(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "cumsum(X)",
            "comment": "Returns 1, 3, 6, 8, 9"
          }
        ],
        "tags": [
          "cumulative sum",
          "running total",
          "running sum"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the cumulative sums.</p>\n\n<p><strong>Syntax</strong><br>\ncumsum(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\n// X = <a href=\"//%20x%20=%20c(1,2,3,2,1)%20in%20R\">1, 2, 3, 2, 1</a><br>\ncumsum(X)<br>\n<em>Returns 1, 3, 6, 8, 9</em>  </p>\n"
      },
      {
        "name": "dense_rank",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Ranks with no gaps. Missing values are left as is.",
        "usage": [
          {
            "syntax": "dense_rank(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "dense_rank("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "dense_rank(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(population_rank = dense_rank(population))",
            "comment": "Create a new column to have the rank number based on 'population' values."
          },
          {
            "code": "filter(dense_rank(population) < 10)",
            "comment": "Select rows whose rank numbers are less 10."
          }
        ],
        "tags": [
          "dense_rank",
          "rank"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nRanks with no gaps. Missing values are left as is.</p>\n\n<p><strong>Syntax</strong><br>\ndense_rank(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric   </p>\n\n<p><strong>Example</strong><br>\nmutate(population_rank = dense_rank(population))<br>\n<em>Create a new column to have the rank number based on &#39;population&#39; values.</em><br>\nfilter(dense_rank(population) &lt; 10)<br>\n<em>Select rows whose rank numbers are less 10.</em>  </p>\n"
      },
      {
        "name": "first",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "returns the first value of all the values.",
        "usage": [
          {
            "syntax": "first(```<column>```, order_by = ```<column(s)>```, default = ```<text>```)",
            "tokens": [
              {
                "id": "0",
                "value": "first("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", order_by = "
              },
              {
                "id": "column(s)",
                "value": "<column(s)>"
              },
              {
                "id": "4",
                "value": ", default = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "__repeat__": "column",
              "default": "text"
            },
            "html": "first(<b><i>column</i></b>, order_by = <b><i>column(s)</i></b>, default = <b><i>text</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "order_by (Optional)",
            "text": [
              "An optional vector used to determine the order"
            ]
          },
          {
            "name": "default (Optional)",
            "text": [
              "A default value to use if the position does not exist in the input. This is guessed by default for atomic vectors, where a missing value of the appropriate type is return, and for lists, where a NULL is return. For more complicated objects, you'll need to supply this value."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "summarize(total = first(name))",
            "comment": "Create a new column for returning the first value for each group."
          }
        ],
        "tags": [
          "first"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nreturns the first value of all the values.  </p>\n\n<p><strong>Syntax</strong><br>\nfirst(<code>&lt;column&gt;</code>, order_by = <code>&lt;column(s)&gt;</code>, default = <code>&lt;text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>order_by (Optional) - An optional vector used to determine the order<br></li>\n<li>default (Optional) - A default value to use if the position does not exist in the input. This is guessed by default for atomic vectors, where a missing value of the appropriate type is return, and for lists, where a NULL is return. For more complicated objects, you&#39;ll need to supply this value.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nsummarize(total = first(name))<br>\n<em>Create a new column for returning the first value for each group.</em>  </p>\n"
      },
      {
        "name": "lag",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Provides access to a row at a given physical offset prior to that position.",
        "usage": [
          {
            "syntax": "lag(```<column>```, n = ```<number>```, default = ```<text>```, order_by = ```<column(s)>```)",
            "tokens": [
              {
                "id": "0",
                "value": "lag("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ", default = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "6",
                "value": ", order_by = "
              },
              {
                "id": "column(s)",
                "value": "<column(s)>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "n": "number",
              "default": "text",
              "__repeat__": "column"
            },
            "html": "lag(<b><i>column</i></b>, n = <b><i>number</i></b>, default = <b><i>text</i></b>, order_by = <b><i>column(s)</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "n (Optional)",
            "text": [
              "a positive integer of length 1, giving the number of positions to lag by. The default is 1."
            ]
          },
          {
            "name": "default (Optional)",
            "text": [
              "default value for NA, the default is NA."
            ]
          },
          {
            "name": "order_by (Optional)",
            "text": [
              "override the default ordering to use another vector"
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "lag(x)",
            "comment": "Returns NA  1  2  3  4  5  6  7  8  9"
          },
          {
            "code": "lag(x, 2)",
            "comment": "Returns NA NA  1  2  3  4  5  6  7  8"
          }
        ],
        "tags": [
          "lag",
          "previous",
          "offset"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nProvides access to a row at a given physical offset prior to that position.</p>\n\n<p><strong>Syntax</strong><br>\nlag(<code>&lt;column&gt;</code>, n = <code>&lt;number&gt;</code>, default = <code>&lt;text&gt;</code>, order_by = <code>&lt;column(s)&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n (Optional) - a positive integer of length 1, giving the number of positions to lag by. The default is 1.</li>\n<li>default (Optional) - default value for NA, the default is NA.</li>\n<li>order_by (Optional) - override the default ordering to use another vector</li>\n</ul>\n\n<p><strong>Example</strong><br>\n// x &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)<br>\nlag(x)<br>\n<em>Returns NA  1  2  3  4  5  6  7  8  9</em><br>\nlag(x, 2)<br>\n<em>Returns NA NA  1  2  3  4  5  6  7  8</em>  </p>\n"
      },
      {
        "name": "last",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "returns the last value of all the values.",
        "usage": [
          {
            "syntax": "last(```<column>```, order_by = ```<column(s)>```, default = ```<text>```)",
            "tokens": [
              {
                "id": "0",
                "value": "last("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", order_by = "
              },
              {
                "id": "column(s)",
                "value": "<column(s)>"
              },
              {
                "id": "4",
                "value": ", default = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "__repeat__": "column",
              "default": "text"
            },
            "html": "last(<b><i>column</i></b>, order_by = <b><i>column(s)</i></b>, default = <b><i>text</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "order_by (Optional)",
            "text": [
              "An optional vector used to determine the order"
            ]
          },
          {
            "name": "default (Optional)",
            "text": [
              "A default value to use if the position does not exist in the input. This is guessed by default for atomic vectors, where a missing value of the appropriate type is return, and for lists, where a NULL is return. For more complicated objects, you'll need to supply this value."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "summarize(total = last(name))",
            "comment": "Create a new column for returning the last value for each group."
          }
        ],
        "tags": [
          "last"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nreturns the last value of all the values.  </p>\n\n<p><strong>Syntax</strong><br>\nlast(<code>&lt;column&gt;</code>, order_by = <code>&lt;column(s)&gt;</code>, default = <code>&lt;text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>order_by (Optional) - An optional vector used to determine the order<br></li>\n<li>default (Optional) - A default value to use if the position does not exist in the input. This is guessed by default for atomic vectors, where a missing value of the appropriate type is return, and for lists, where a NULL is return. For more complicated objects, you&#39;ll need to supply this value.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nsummarize(total = last(name))<br>\n<em>Create a new column for returning the last value for each group.</em>  </p>\n"
      },
      {
        "name": "lead",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Provides access to a row at a given physical offset that follows the current row.",
        "usage": [
          {
            "syntax": "lead(```<column>```, n = ```<number>```, default = ```<text>```, order_by = ```<column(s)>```)",
            "tokens": [
              {
                "id": "0",
                "value": "lead("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ", default = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "6",
                "value": ", order_by = "
              },
              {
                "id": "column(s)",
                "value": "<column(s)>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "n": "number",
              "default": "text",
              "__repeat__": "column"
            },
            "html": "lead(<b><i>column</i></b>, n = <b><i>number</i></b>, default = <b><i>text</i></b>, order_by = <b><i>column(s)</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "n (Optional)",
            "text": [
              "a positive integer of length 1, giving the number of positions to lead by. The default is 1."
            ]
          },
          {
            "name": "default (Optional)",
            "text": [
              "default value for NA, the default is NA."
            ]
          },
          {
            "name": "order_by (Optional)",
            "text": [
              "override the default ordering to use another vector"
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "lead(x)",
            "comment": "Returns 2  3  4  5  6  7  8  9 10 NA"
          },
          {
            "code": "lead(x, 2)",
            "comment": "Returns 3  4  5  6  7  8  9 10 NA NA"
          }
        ],
        "tags": [
          "lead",
          "follow",
          "next",
          "offset"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nProvides access to a row at a given physical offset that follows the current row.</p>\n\n<p><strong>Syntax</strong><br>\nlead(<code>&lt;column&gt;</code>, n = <code>&lt;number&gt;</code>, default = <code>&lt;text&gt;</code>, order_by = <code>&lt;column(s)&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n (Optional) - a positive integer of length 1, giving the number of positions to lead by. The default is 1.</li>\n<li>default (Optional) - default value for NA, the default is NA.</li>\n<li>order_by (Optional) - override the default ordering to use another vector</li>\n</ul>\n\n<p><strong>Example</strong><br>\n// x &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)<br>\nlead(x)<br>\n<em>Returns 2  3  4  5  6  7  8  9 10 NA</em><br>\nlead(x, 2)<br>\n<em>Returns 3  4  5  6  7  8  9 10 NA NA</em>  </p>\n"
      },
      {
        "name": "min_rank",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Ranks. Ties get min rank. Missing values are left as is.",
        "usage": [
          {
            "syntax": "min_rank(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "min_rank("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "min_rank(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(population_rank = min_rank(population))",
            "comment": "Create a new column to have the rank number based on 'population' values."
          },
          {
            "code": "filter(min_rank(population) < 10)",
            "comment": "Select rows whose rank numbers are less 10."
          }
        ],
        "tags": [
          "rank",
          "minimum rank",
          "ties"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nRanks. Ties get min rank. Missing values are left as is.</p>\n\n<p><strong>Syntax</strong><br>\nmin_rank(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric   </p>\n\n<p><strong>Example</strong><br>\nmutate(population_rank = min_rank(population))<br>\n<em>Create a new column to have the rank number based on &#39;population&#39; values.</em><br>\nfilter(min_rank(population) &lt; 10)<br>\n<em>Select rows whose rank numbers are less 10.</em>  </p>\n"
      },
      {
        "name": "ntile",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Breaks the column values into n buckets. Missing values are left as is.",
        "usage": [
          {
            "syntax": "ntile(```<column>```, ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ntile("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "1": "number"
            },
            "html": "ntile(<b><i>column</i></b>, <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "number",
            "text": [
              "set number of buckets."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(quartile = ntile(revenue, 4))",
            "comment": "Breaks 'revenue' column values into 4 buckets to generate quartile."
          }
        ],
        "tags": [
          "ntile",
          "bucket",
          "breaks",
          "bin"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nBreaks the column values into n buckets. Missing values are left as is.</p>\n\n<p><strong>Syntax</strong><br>\nntile(<code>&lt;column&gt;</code>, <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>number - set number of buckets.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric   </p>\n\n<p><strong>Example</strong><br>\nmutate(quartile = ntile(revenue, 4))<br>\n<em>Breaks &#39;revenue&#39; column values into 4 buckets to generate quartile.</em>  </p>\n"
      },
      {
        "name": "percent_rank",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Ranks rescaled to [0, 1]. Missing values are left as is.",
        "usage": [
          {
            "syntax": "percent_rank(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "percent_rank("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num"
            },
            "html": "percent_rank(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(population_rank = percent_rank(population))",
            "comment": "Create a new column to have the percent rank number based on 'population' values."
          },
          {
            "code": "filter(percent_rank(population) < .25)",
            "comment": "Select rows whose percent rank numbers are less .25."
          }
        ],
        "tags": [
          "percent_rank",
          "rank",
          "percentile"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nRanks rescaled to [0, 1]. Missing values are left as is.</p>\n\n<p><strong>Syntax</strong><br>\npercent_rank(<code>&lt;column_num&gt;</code>)</p>\n\n<p><strong>Return Value</strong><br>\nNumeric   </p>\n\n<p><strong>Example</strong><br>\nmutate(population_rank = percent_rank(population))<br>\n<em>Create a new column to have the percent rank number based on &#39;population&#39; values.</em><br>\nfilter(percent_rank(population) &lt; .25)<br>\n<em>Select rows whose percent rank numbers are less .25.</em>  </p>\n"
      },
      {
        "name": "roll_max",
        "package": "RcppRoll",
        "source": "exploratory doc",
        "description": "Returns the rolling (or moving) max value.",
        "usage": [
          {
            "syntax": "roll_max(```<column>```, n = ```<numeric>```, weights = NULL, by = ```<numeric>```, fill = ```<numeric>```, align = ```<alignment>```, normalize = ```<logical>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "roll_max("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "4",
                "value": ", weights = NULL, by = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "6",
                "value": ", fill = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "8",
                "value": ", align = "
              },
              {
                "id": "alignment",
                "value": "<alignment>"
              },
              {
                "id": "10",
                "value": ", normalize = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "12",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "14",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "n": "numeric",
              "by": "numeric",
              "fill": "numeric",
              "align": "alignment",
              "normalize": "logical",
              "na.rm": "logical"
            },
            "html": "roll_max(<b><i>column</i></b>, n = <b><i>numeric</i></b>, weights = NULL, by = <b><i>numeric</i></b>, fill = <b><i>numeric</i></b>, align = <b><i>alignment</i></b>, normalize = <b><i>logical</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "n",
            "text": [
              "The default is 1. Integer; the window size to roll over."
            ]
          },
          {
            "name": "weights",
            "text": [
              "Set weights for each value of the window size (n)."
            ]
          },
          {
            "name": "by",
            "text": [
              "The default is 1."
            ]
          },
          {
            "name": "fill",
            "text": [
              "This is a mandatory argument. Set a value for NA."
            ]
          },
          {
            "name": "partial",
            "text": [
              "The default is FALSE."
            ]
          },
          {
            "name": "align",
            "text": [
              "Align windows on the \"left\", \"center\" or \"right\"."
            ]
          },
          {
            "name": "normalize",
            "text": [
              "The default is TRUE. Whether it should be normalized or not."
            ]
          },
          {
            "name": "na.rm",
            "text": [
              "The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "rolling_max = roll_max(revenue, n = 3, align=\"center\", fill = 0)",
            "comment": "Returns a max value among three values starting from one previous and one next value, setting NA to 0."
          },
          {
            "code": "rolling_max = roll_max(revenue, n = 3, align=\"left\", fill = 0)",
            "comment": "Returns a max value among three values starting from the current value and the next two values, setting NA to 0."
          }
        ],
        "tags": [
          "rolling",
          "moving",
          "window",
          "max"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the rolling (or moving) max value.  </p>\n\n<p><strong>Syntax</strong><br>\nroll_max(<code>&lt;column_num&gt;</code>, n = <code>&lt;numeric&gt;</code>, weights = NULL, by = <code>&lt;numeric&gt;</code>, fill = <code>&lt;numeric&gt;</code>, align = <code>&lt;alignment&gt;</code>, normalize = <code>&lt;logical&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n - The default is 1. Integer; the window size to roll over.</li>\n<li>weights - Set weights for each value of the window size (n).</li>\n<li>by - The default is 1.</li>\n<li>fill - This is a mandatory argument. Set a value for NA.</li>\n<li>partial - The default is FALSE.</li>\n<li>align - Align windows on the &quot;left&quot;, &quot;center&quot; or &quot;right&quot;.</li>\n<li>normalize - The default is TRUE. Whether it should be normalized or not.</li>\n<li>na.rm - The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nrolling_max = roll_max(revenue, n = 3, align=&quot;center&quot;, fill = 0)<br>\n<em>Returns a max value among three values starting from one previous and one next value, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_max</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>400</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>500</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n\n<p>rolling_max = roll_max(revenue, n = 3, align=&quot;left&quot;, fill = 0)<br>\n<em>Returns a max value among three values starting from the current value and the next two values, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_max</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>400</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>500</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "roll_mean",
        "package": "RcppRoll",
        "source": "exploratory doc",
        "description": "Returns the rolling (or moving) mean value.",
        "usage": [
          {
            "syntax": "roll_mean(```<column>```, n = ```<numeric>```, weights = NULL, by = ```<numeric>```, fill = ```<numeric>```, align = ```<alignment>```, normalize = ```<logical>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "roll_mean("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "4",
                "value": ", weights = NULL, by = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "6",
                "value": ", fill = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "8",
                "value": ", align = "
              },
              {
                "id": "alignment",
                "value": "<alignment>"
              },
              {
                "id": "10",
                "value": ", normalize = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "12",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "14",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "n": "numeric",
              "by": "numeric",
              "fill": "numeric",
              "align": "alignment",
              "normalize": "logical",
              "na.rm": "logical"
            },
            "html": "roll_mean(<b><i>column</i></b>, n = <b><i>numeric</i></b>, weights = NULL, by = <b><i>numeric</i></b>, fill = <b><i>numeric</i></b>, align = <b><i>alignment</i></b>, normalize = <b><i>logical</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "n",
            "text": [
              "The default is 1. Integer; the window size to roll over."
            ]
          },
          {
            "name": "weights",
            "text": [
              "Set weights for each value of the window size (n)."
            ]
          },
          {
            "name": "by",
            "text": [
              "The default is 1."
            ]
          },
          {
            "name": "fill",
            "text": [
              "This is a mandatory argument. Set a value for NA."
            ]
          },
          {
            "name": "partial",
            "text": [
              "The default is FALSE."
            ]
          },
          {
            "name": "align",
            "text": [
              "Align windows on the \"left\", \"center\" or \"right\"."
            ]
          },
          {
            "name": "normalize",
            "text": [
              "The default is TRUE. Whether it should be normalized or not."
            ]
          },
          {
            "name": "na.rm",
            "text": [
              "The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "rolling_mean = roll_mean(revenue, n = 3, align=\"center\", fill = 0)",
            "comment": "Returns a mean value among three values starting from one previous and one next value, setting NA to 0."
          },
          {
            "code": "rolling_mean = roll_mean(revenue, n = 3, align=\"left\", fill = 0)",
            "comment": "Returns a mean value among three values starting from the current value and the next two values, setting NA to 0."
          }
        ],
        "tags": [
          "rolling",
          "moving",
          "window",
          "mean"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the rolling (or moving) mean value.  </p>\n\n<p><strong>Syntax</strong><br>\nroll_mean(<code>&lt;column_num&gt;</code>, n = <code>&lt;numeric&gt;</code>, weights = NULL, by = <code>&lt;numeric&gt;</code>, fill = <code>&lt;numeric&gt;</code>, align = <code>&lt;alignment&gt;</code>, normalize = <code>&lt;logical&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n - The default is 1. Integer; the window size to roll over.</li>\n<li>weights - Set weights for each value of the window size (n).</li>\n<li>by - The default is 1.</li>\n<li>fill - This is a mandatory argument. Set a value for NA.</li>\n<li>partial - The default is FALSE.</li>\n<li>align - Align windows on the &quot;left&quot;, &quot;center&quot; or &quot;right&quot;.</li>\n<li>normalize - The default is TRUE. Whether it should be normalized or not.</li>\n<li>na.rm - The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nrolling_mean = roll_mean(revenue, n = 3, align=&quot;center&quot;, fill = 0)<br>\n<em>Returns a mean value among three values starting from one previous and one next value, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_mean</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>200</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>400</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n\n<p>rolling_mean = roll_mean(revenue, n = 3, align=&quot;left&quot;, fill = 0)<br>\n<em>Returns a mean value among three values starting from the current value and the next two values, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_mean</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>200</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>400</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "roll_median",
        "package": "RcppRoll",
        "source": "exploratory doc",
        "description": "Returns the rolling (or moving) median value.",
        "usage": [
          {
            "syntax": "roll_median(```<column>```, n = ```<numeric>```, weights = NULL, by = ```<numeric>```, fill = ```<numeric>```, align = ```<alignment>```, normalize = ```<logical>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "roll_median("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "4",
                "value": ", weights = NULL, by = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "6",
                "value": ", fill = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "8",
                "value": ", align = "
              },
              {
                "id": "alignment",
                "value": "<alignment>"
              },
              {
                "id": "10",
                "value": ", normalize = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "12",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "14",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "n": "numeric",
              "by": "numeric",
              "fill": "numeric",
              "align": "alignment",
              "normalize": "logical",
              "na.rm": "logical"
            },
            "html": "roll_median(<b><i>column</i></b>, n = <b><i>numeric</i></b>, weights = NULL, by = <b><i>numeric</i></b>, fill = <b><i>numeric</i></b>, align = <b><i>alignment</i></b>, normalize = <b><i>logical</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "n",
            "text": [
              "The default is 1. Integer; the window size to roll over."
            ]
          },
          {
            "name": "weights",
            "text": [
              "Set weights for each value of the window size (n)."
            ]
          },
          {
            "name": "by",
            "text": [
              "The default is 1."
            ]
          },
          {
            "name": "fill",
            "text": [
              "This is a mandatory argument. Set a value for NA."
            ]
          },
          {
            "name": "partial",
            "text": [
              "The default is FALSE."
            ]
          },
          {
            "name": "align",
            "text": [
              "Align windows on the \"left\", \"center\" or \"right\"."
            ]
          },
          {
            "name": "normalize",
            "text": [
              "The default is TRUE. Whether it should be normalized or not."
            ]
          },
          {
            "name": "na.rm",
            "text": [
              "The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "rolling_median = roll_median(revenue, n = 3, align=\"center\", fill = 0)",
            "comment": "Returns a median value among three values starting from one previous and one next value, setting NA to 0."
          },
          {
            "code": "rolling_median = roll_median(revenue, n = 3, align=\"left\", fill = 0)",
            "comment": "Returns a median value among three values starting from the current value and the next two values, setting NA to 0."
          }
        ],
        "tags": [
          "rolling",
          "moving",
          "window",
          "median"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the rolling (or moving) median value.  </p>\n\n<p><strong>Syntax</strong><br>\nroll_median(<code>&lt;column_num&gt;</code>, n = <code>&lt;numeric&gt;</code>, weights = NULL, by = <code>&lt;numeric&gt;</code>, fill = <code>&lt;numeric&gt;</code>, align = <code>&lt;alignment&gt;</code>, normalize = <code>&lt;logical&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n - The default is 1. Integer; the window size to roll over.</li>\n<li>weights - Set weights for each value of the window size (n).</li>\n<li>by - The default is 1.</li>\n<li>fill - This is a mandatory argument. Set a value for NA.</li>\n<li>partial - The default is FALSE.</li>\n<li>align - Align windows on the &quot;left&quot;, &quot;center&quot; or &quot;right&quot;.</li>\n<li>normalize - The default is TRUE. Whether it should be normalized or not.</li>\n<li>na.rm - The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nrolling_median = roll_median(revenue, n = 3, align=&quot;center&quot;, fill = 0)<br>\n<em>Returns a median value among three values starting from one previous and one next value, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_median</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>200</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>400</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n\n<p>rolling_median = roll_median(revenue, n = 3, align=&quot;left&quot;, fill = 0)<br>\n<em>Returns a median value among three values starting from the current value and the next two values, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_median</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>200</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>400</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "roll_min",
        "package": "RcppRoll",
        "source": "exploratory doc",
        "description": "Returns the rolling (or moving) min value.",
        "usage": [
          {
            "syntax": "roll_min(```<column>```, n = ```<numeric>```, weights = NULL, by = ```<numeric>```, fill = ```<numeric>```, align = ```<alignment>```, normalize = ```<logical>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "roll_min("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "4",
                "value": ", weights = NULL, by = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "6",
                "value": ", fill = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "8",
                "value": ", align = "
              },
              {
                "id": "alignment",
                "value": "<alignment>"
              },
              {
                "id": "10",
                "value": ", normalize = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "12",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "14",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "n": "numeric",
              "by": "numeric",
              "fill": "numeric",
              "align": "alignment",
              "normalize": "logical",
              "na.rm": "logical"
            },
            "html": "roll_min(<b><i>column</i></b>, n = <b><i>numeric</i></b>, weights = NULL, by = <b><i>numeric</i></b>, fill = <b><i>numeric</i></b>, align = <b><i>alignment</i></b>, normalize = <b><i>logical</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "n",
            "text": [
              "The default is 1. Integer; the window size to roll over."
            ]
          },
          {
            "name": "weights",
            "text": [
              "Set weights for each value of the window size (n)."
            ]
          },
          {
            "name": "by",
            "text": [
              "The default is 1."
            ]
          },
          {
            "name": "fill",
            "text": [
              "This is a mandatory argument. Set a value for NA."
            ]
          },
          {
            "name": "partial",
            "text": [
              "The default is FALSE."
            ]
          },
          {
            "name": "align",
            "text": [
              "Align windows on the \"left\", \"center\" or \"right\"."
            ]
          },
          {
            "name": "normalize",
            "text": [
              "The default is TRUE. Whether it should be normalized or not."
            ]
          },
          {
            "name": "na.rm",
            "text": [
              "The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "rolling_max = roll_min(revenue, n = 3, align=\"center\", fill = 0)",
            "comment": "Returns a min value among three values starting from one previous and one next value, setting NA to 0."
          },
          {
            "code": "rolling_max = roll_min(revenue, n = 3, align=\"left\", fill = 0)",
            "comment": "Returns a min value among three values starting from the current value and the next two values, setting NA to 0."
          }
        ],
        "tags": [
          "rolling",
          "moving",
          "window",
          "min"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the rolling (or moving) min value.  </p>\n\n<p><strong>Syntax</strong><br>\nroll_min(<code>&lt;column_num&gt;</code>, n = <code>&lt;numeric&gt;</code>, weights = NULL, by = <code>&lt;numeric&gt;</code>, fill = <code>&lt;numeric&gt;</code>, align = <code>&lt;alignment&gt;</code>, normalize = <code>&lt;logical&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n - The default is 1. Integer; the window size to roll over.</li>\n<li>weights - Set weights for each value of the window size (n).</li>\n<li>by - The default is 1.</li>\n<li>fill - This is a mandatory argument. Set a value for NA.</li>\n<li>partial - The default is FALSE.</li>\n<li>align - Align windows on the &quot;left&quot;, &quot;center&quot; or &quot;right&quot;.</li>\n<li>normalize - The default is TRUE. Whether it should be normalized or not.</li>\n<li>na.rm - The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nrolling_max = roll_min(revenue, n = 3, align=&quot;center&quot;, fill = 0)<br>\n<em>Returns a min value among three values starting from one previous and one next value, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_min</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>200</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n\n<p>rolling_max = roll_min(revenue, n = 3, align=&quot;left&quot;, fill = 0)<br>\n<em>Returns a min value among three values starting from the current value and the next two values, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_min</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>200</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "roll_prod",
        "package": "RcppRoll",
        "source": "exploratory doc",
        "description": "Returns the rolling (or moving) prod value.",
        "usage": [
          {
            "syntax": "roll_prod(```<column>```, n = ```<numeric>```, weights = NULL, by = ```<numeric>```, fill = ```<numeric>```, align = ```<alignment>```, normalize = ```<logical>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "roll_prod("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "4",
                "value": ", weights = NULL, by = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "6",
                "value": ", fill = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "8",
                "value": ", align = "
              },
              {
                "id": "alignment",
                "value": "<alignment>"
              },
              {
                "id": "10",
                "value": ", normalize = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "12",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "14",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "n": "numeric",
              "by": "numeric",
              "fill": "numeric",
              "align": "alignment",
              "normalize": "logical",
              "na.rm": "logical"
            },
            "html": "roll_prod(<b><i>column</i></b>, n = <b><i>numeric</i></b>, weights = NULL, by = <b><i>numeric</i></b>, fill = <b><i>numeric</i></b>, align = <b><i>alignment</i></b>, normalize = <b><i>logical</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "n",
            "text": [
              "The default is 1. Integer; the window size to roll over."
            ]
          },
          {
            "name": "weights",
            "text": [
              "Set weights for each value of the window size (n)."
            ]
          },
          {
            "name": "by",
            "text": [
              "The default is 1."
            ]
          },
          {
            "name": "fill",
            "text": [
              "This is a mandatory argument. Set a value for NA."
            ]
          },
          {
            "name": "partial",
            "text": [
              "The default is FALSE."
            ]
          },
          {
            "name": "align",
            "text": [
              "Align windows on the \"left\", \"center\" or \"right\"."
            ]
          },
          {
            "name": "normalize",
            "text": [
              "The default is TRUE. Whether it should be normalized or not."
            ]
          },
          {
            "name": "na.rm",
            "text": [
              "The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "rolling_prod = roll_prod(revenue, n = 3, align=\"center\", fill = 0)",
            "comment": "Returns a prod value among three values starting from one previous and one next value, setting NA to 0."
          },
          {
            "code": "rolling_prod = roll_prod(revenue, n = 3, align=\"left\", fill = 0)",
            "comment": "Returns a prod value among three values starting from the current value and the next two values, setting NA to 0."
          }
        ],
        "tags": [
          "rolling",
          "moving",
          "window",
          "prod"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the rolling (or moving) prod value.  </p>\n\n<p><strong>Syntax</strong><br>\nroll_prod(<code>&lt;column_num&gt;</code>, n = <code>&lt;numeric&gt;</code>, weights = NULL, by = <code>&lt;numeric&gt;</code>, fill = <code>&lt;numeric&gt;</code>, align = <code>&lt;alignment&gt;</code>, normalize = <code>&lt;logical&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n - The default is 1. Integer; the window size to roll over.</li>\n<li>weights - Set weights for each value of the window size (n).</li>\n<li>by - The default is 1.</li>\n<li>fill - This is a mandatory argument. Set a value for NA.</li>\n<li>partial - The default is FALSE.</li>\n<li>align - Align windows on the &quot;left&quot;, &quot;center&quot; or &quot;right&quot;.</li>\n<li>normalize - The default is TRUE. Whether it should be normalized or not.</li>\n<li>na.rm - The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nrolling_prod = roll_prod(revenue, n = 3, align=&quot;center&quot;, fill = 0)<br>\n<em>Returns a prod value among three values starting from one previous and one next value, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_prod</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>2</td>\n<td>6</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>3</td>\n<td>24</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>4</td>\n<td>60</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>5</td>\n<td>0</td>\n</tr>\n</tbody></table>\n\n<p>rolling_prod = roll_prod(revenue, n = 3, align=&quot;left&quot;, fill = 0)<br>\n<em>Returns a prod value among three values starting from the current value and the next two values, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_prod</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>1</td>\n<td>6</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>2</td>\n<td>24</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>3</td>\n<td>60</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>4</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>5</td>\n<td>0</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "roll_sd",
        "package": "RcppRoll",
        "source": "exploratory doc",
        "description": "Returns the rolling (or moving) standard deviation value.",
        "usage": [
          {
            "syntax": "roll_sd(```<column>```, n = ```<numeric>```, weights = NULL, by = ```<numeric>```, fill = ```<numeric>```, align = ```<alignment>```, normalize = ```<logical>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "roll_sd("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "4",
                "value": ", weights = NULL, by = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "6",
                "value": ", fill = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "8",
                "value": ", align = "
              },
              {
                "id": "alignment",
                "value": "<alignment>"
              },
              {
                "id": "10",
                "value": ", normalize = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "12",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "14",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "n": "numeric",
              "by": "numeric",
              "fill": "numeric",
              "align": "alignment",
              "normalize": "logical",
              "na.rm": "logical"
            },
            "html": "roll_sd(<b><i>column</i></b>, n = <b><i>numeric</i></b>, weights = NULL, by = <b><i>numeric</i></b>, fill = <b><i>numeric</i></b>, align = <b><i>alignment</i></b>, normalize = <b><i>logical</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "n",
            "text": [
              "The default is 1. Integer; the window size to roll over."
            ]
          },
          {
            "name": "weights",
            "text": [
              "Set weights for each value of the window size (n)."
            ]
          },
          {
            "name": "by",
            "text": [
              "The default is 1."
            ]
          },
          {
            "name": "fill",
            "text": [
              "This is a mandatory argument. Set a value for NA."
            ]
          },
          {
            "name": "partial",
            "text": [
              "The default is FALSE."
            ]
          },
          {
            "name": "align",
            "text": [
              "Align windows on the \"left\", \"center\" or \"right\"."
            ]
          },
          {
            "name": "normalize",
            "text": [
              "The default is TRUE. Whether it should be normalized or not."
            ]
          },
          {
            "name": "na.rm",
            "text": [
              "The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "rolling_sd = roll_sd(revenue, n = 3, align=\"center\", fill = 0)",
            "comment": "Returns a standard deviation value among three values starting from one previous and one next value, setting NA to 0."
          },
          {
            "code": "rolling_sd = roll_sd(revenue, n = 3, align=\"left\", fill = 0)",
            "comment": "Returns a min value among three values starting from the current value and the next two values, setting NA to 0."
          }
        ],
        "tags": [
          "rolling",
          "moving",
          "window",
          "standard deviation"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the rolling (or moving) standard deviation value.  </p>\n\n<p><strong>Syntax</strong><br>\nroll_sd(<code>&lt;column_num&gt;</code>, n = <code>&lt;numeric&gt;</code>, weights = NULL, by = <code>&lt;numeric&gt;</code>, fill = <code>&lt;numeric&gt;</code>, align = <code>&lt;alignment&gt;</code>, normalize = <code>&lt;logical&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n - The default is 1. Integer; the window size to roll over.</li>\n<li>weights - Set weights for each value of the window size (n).</li>\n<li>by - The default is 1.</li>\n<li>fill - This is a mandatory argument. Set a value for NA.</li>\n<li>partial - The default is FALSE.</li>\n<li>align - Align windows on the &quot;left&quot;, &quot;center&quot; or &quot;right&quot;.</li>\n<li>normalize - The default is TRUE. Whether it should be normalized or not.</li>\n<li>na.rm - The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nrolling_sd = roll_sd(revenue, n = 3, align=&quot;center&quot;, fill = 0)<br>\n<em>Returns a standard deviation value among three values starting from one previous and one next value, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_sd</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n\n<p>rolling_sd = roll_sd(revenue, n = 3, align=&quot;left&quot;, fill = 0)<br>\n<em>Returns a min value among three values starting from the current value and the next two values, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_sd</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>100</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "roll_sum",
        "package": "RcppRoll",
        "source": "exploratory doc",
        "description": "Returns the rolling (or moving) sum value.",
        "usage": [
          {
            "syntax": "roll_sum(```<column>```, n = ```<numeric>```, weights = NULL, by = ```<numeric>```, fill = ```<numeric>```, align = ```<alignment>```, normalize = ```<logical>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "roll_sum("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "4",
                "value": ", weights = NULL, by = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "6",
                "value": ", fill = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "8",
                "value": ", align = "
              },
              {
                "id": "alignment",
                "value": "<alignment>"
              },
              {
                "id": "10",
                "value": ", normalize = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "12",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "14",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "n": "numeric",
              "by": "numeric",
              "fill": "numeric",
              "align": "alignment",
              "normalize": "logical",
              "na.rm": "logical"
            },
            "html": "roll_sum(<b><i>column</i></b>, n = <b><i>numeric</i></b>, weights = NULL, by = <b><i>numeric</i></b>, fill = <b><i>numeric</i></b>, align = <b><i>alignment</i></b>, normalize = <b><i>logical</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "n",
            "text": [
              "The default is 1. Integer; the window size to roll over."
            ]
          },
          {
            "name": "weights",
            "text": [
              "Set weights for each value of the window size (n)."
            ]
          },
          {
            "name": "by",
            "text": [
              "The default is 1."
            ]
          },
          {
            "name": "fill",
            "text": [
              "This is a mandatory argument. Set a value for NA."
            ]
          },
          {
            "name": "partial",
            "text": [
              "The default is FALSE."
            ]
          },
          {
            "name": "align",
            "text": [
              "Align windows on the \"left\", \"center\" or \"right\"."
            ]
          },
          {
            "name": "normalize",
            "text": [
              "The default is TRUE. Whether it should be normalized or not."
            ]
          },
          {
            "name": "na.rm",
            "text": [
              "The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "rolling_sum = roll_sum(revenue, n = 3, align=\"center\", fill = 0)",
            "comment": "Returns a sum value among three values starting from one previous and one next value, setting NA to 0."
          },
          {
            "code": "rolling_sum = roll_sum(revenue, n = 3, align=\"left\", fill = 0)",
            "comment": "Returns a sum value among three values starting from the current value and the next two values, setting NA to 0."
          }
        ],
        "tags": [
          "rolling",
          "moving",
          "window",
          "sum"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the rolling (or moving) sum value.  </p>\n\n<p><strong>Syntax</strong><br>\nroll_sum(<code>&lt;column_num&gt;</code>, n = <code>&lt;numeric&gt;</code>, weights = NULL, by = <code>&lt;numeric&gt;</code>, fill = <code>&lt;numeric&gt;</code>, align = <code>&lt;alignment&gt;</code>, normalize = <code>&lt;logical&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n - The default is 1. Integer; the window size to roll over.</li>\n<li>weights - Set weights for each value of the window size (n).</li>\n<li>by - The default is 1.</li>\n<li>fill - This is a mandatory argument. Set a value for NA.</li>\n<li>partial - The default is FALSE.</li>\n<li>align - Align windows on the &quot;left&quot;, &quot;center&quot; or &quot;right&quot;.</li>\n<li>normalize - The default is TRUE. Whether it should be normalized or not.</li>\n<li>na.rm - The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nrolling_sum = roll_sum(revenue, n = 3, align=&quot;center&quot;, fill = 0)<br>\n<em>Returns a sum value among three values starting from one previous and one next value, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_sum</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>600</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>900</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>1200</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n\n<p>rolling_sum = roll_sum(revenue, n = 3, align=&quot;left&quot;, fill = 0)<br>\n<em>Returns a sum value among three values starting from the current value and the next two values, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_sum</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>600</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>900</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>1200</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "roll_var",
        "package": "RcppRoll",
        "source": "exploratory doc",
        "description": "Returns the rolling (or moving) variance value.",
        "usage": [
          {
            "syntax": "roll_var(```<column>```, n = ```<numeric>```, weights = NULL, by = ```<numeric>```, fill = ```<numeric>```, align = ```<alignment>```, normalize = ```<logical>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "roll_var("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", n = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "4",
                "value": ", weights = NULL, by = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "6",
                "value": ", fill = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "8",
                "value": ", align = "
              },
              {
                "id": "alignment",
                "value": "<alignment>"
              },
              {
                "id": "10",
                "value": ", normalize = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "12",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "14",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "n": "numeric",
              "by": "numeric",
              "fill": "numeric",
              "align": "alignment",
              "normalize": "logical",
              "na.rm": "logical"
            },
            "html": "roll_var(<b><i>column</i></b>, n = <b><i>numeric</i></b>, weights = NULL, by = <b><i>numeric</i></b>, fill = <b><i>numeric</i></b>, align = <b><i>alignment</i></b>, normalize = <b><i>logical</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "n",
            "text": [
              "The default is 1. Integer; the window size to roll over."
            ]
          },
          {
            "name": "weights",
            "text": [
              "Set weights for each value of the window size (n)."
            ]
          },
          {
            "name": "by",
            "text": [
              "The default is 1."
            ]
          },
          {
            "name": "fill",
            "text": [
              "This is a mandatory argument. Set a value for NA."
            ]
          },
          {
            "name": "partial",
            "text": [
              "The default is FALSE."
            ]
          },
          {
            "name": "align",
            "text": [
              "Align windows on the \"left\", \"center\" or \"right\"."
            ]
          },
          {
            "name": "normalize",
            "text": [
              "The default is TRUE. Whether it should be normalized or not."
            ]
          },
          {
            "name": "na.rm",
            "text": [
              "The default is FALSE. Decides whether missing values (including NaN) to be removed or not."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "rolling_var = roll_var(revenue, n = 3, align=\"center\", fill = 0)",
            "comment": "Returns a variance value among three values starting from one previous and one next value, setting NA to 0."
          },
          {
            "code": "rolling_var = roll_var(revenue, n = 3, align=\"left\", fill = 0)",
            "comment": "Returns a variance value among three values starting from the current value and the next two values, setting NA to 0."
          }
        ],
        "tags": [
          "rolling",
          "moving",
          "window",
          "variance"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the rolling (or moving) variance value.  </p>\n\n<p><strong>Syntax</strong><br>\nroll_var(<code>&lt;column_num&gt;</code>, n = <code>&lt;numeric&gt;</code>, weights = NULL, by = <code>&lt;numeric&gt;</code>, fill = <code>&lt;numeric&gt;</code>, align = <code>&lt;alignment&gt;</code>, normalize = <code>&lt;logical&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>n - The default is 1. Integer; the window size to roll over.</li>\n<li>weights - Set weights for each value of the window size (n).</li>\n<li>by - The default is 1.</li>\n<li>fill - This is a mandatory argument. Set a value for NA.</li>\n<li>partial - The default is FALSE.</li>\n<li>align - Align windows on the &quot;left&quot;, &quot;center&quot; or &quot;right&quot;.</li>\n<li>normalize - The default is TRUE. Whether it should be normalized or not.</li>\n<li>na.rm - The default is FALSE. Decides whether missing values (including NaN) to be removed or not.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nrolling_var = roll_var(revenue, n = 3, align=&quot;center&quot;, fill = 0)<br>\n<em>Returns a variance value among three values starting from one previous and one next value, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_var</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n\n<p>rolling_var = roll_var(revenue, n = 3, align=&quot;left&quot;, fill = 0)<br>\n<em>Returns a variance value among three values starting from the current value and the next two values, setting NA to 0.</em>  </p>\n\n<table><thead>\n<tr>\n<th>year</th>\n<th>revenue</th>\n<th>rolling_var</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>2012</td>\n<td>100</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>200</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>300</td>\n<td>10000</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>400</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>500</td>\n<td>0</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "row_number",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns row numbers. Equivalent to Rank.",
        "usage": [
          {
            "syntax": "row_number()",
            "tokens": [
              {
                "id": "0",
                "value": "row_number()"
              }
            ],
            "arguments": {
            },
            "html": "row_number()"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(rowid = row_number())",
            "comment": "Returns an unique row number for each row."
          }
        ],
        "tags": [
          "row number",
          "rowid",
          "rank"
        ],
        "categories": [
          "Window Calculation"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns row numbers. Equivalent to Rank.</p>\n\n<p><strong>Syntax</strong><br>\nrow_number()  </p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nNumeric   </p>\n\n<p><strong>Example</strong><br>\nmutate(rowid = row_number())<br>\n<em>Returns an unique row number for each row.</em>  </p>\n"
      }
    ]
  },
  {
    "category": "Statistics",
    "functions": [
      {
        "name": "cor",
        "package": "stats",
        "source": "exploratory doc",
        "description": "Computes the correlation of two column values. The covariance divided by the product of the standard deviations of the two column values.",
        "usage": [
          {
            "syntax": "cor(```<column>```, ```<column>```, use = ```<cor_na_operation>```, method = ```<cor_method>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cor("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "4",
                "value": ", use = "
              },
              {
                "id": "cor_na_operation",
                "value": "<cor_na_operation>"
              },
              {
                "id": "6",
                "value": ", method = "
              },
              {
                "id": "cor_method",
                "value": "<cor_method>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "1": "column_num",
              "use": "cor_na_operation",
              "method": "cor_method"
            },
            "html": "cor(<b><i>column</i></b>, <b><i>column</i></b>, use = <b><i>cor_na_operation</i></b>, method = <b><i>cor_method</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "use (Optional)",
            "text": [
              "The default is \"everything\". Set an operation type for dealing with missing values."
            ]
          },
          {
            "name": "method (Optional)",
            "text": [
              "The default is \"pearson\". Set a method to compute correlation coefficient among \"pearson\", \"kendall\", or \"spearman\"."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "summarize(correlation = cor(ARR_DELAY, DEP_DELAY))",
            "comment": "Return the correlation value for ARR_DELAY and DEP_DELAY columns."
          }
        ],
        "tags": [
          "correlation"
        ],
        "categories": [
          "Statistics"
        ],
        "html": "<p><strong>Summary</strong><br>\nComputes the correlation of two column values. The covariance divided by the product of the standard deviations of the two column values.</p>\n\n<p><strong>Syntax</strong><br>\ncor(<code>&lt;column_num&gt;</code>, <code>&lt;column_num&gt;</code>, use = <code>&lt;cor_na_operation&gt;</code>, method = <code>&lt;cor_method&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>use (Optional) - The default is &quot;everything&quot;. Set an operation type for dealing with missing values.</li>\n<li>method (Optional) - The default is &quot;pearson&quot;. Set a method to compute correlation coefficient among &quot;pearson&quot;, &quot;kendall&quot;, or &quot;spearman&quot;.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nsummarize(correlation = cor(ARR_DELAY, DEP_DELAY))<br>\n<em>Return the correlation value for ARR</em>DELAY and DEP_DELAY columns._</p>\n"
      },
      {
        "name": "cov",
        "package": "stats",
        "source": "exploratory doc",
        "description": "Computes the covariance of two column values.",
        "usage": [
          {
            "syntax": "cov(```<column>```, ```<column>```, use = ```<cor_na_operation>```, method = ```<cor_method>```)",
            "tokens": [
              {
                "id": "0",
                "value": "cov("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "4",
                "value": ", use = "
              },
              {
                "id": "cor_na_operation",
                "value": "<cor_na_operation>"
              },
              {
                "id": "6",
                "value": ", method = "
              },
              {
                "id": "cor_method",
                "value": "<cor_method>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num",
              "1": "column_num",
              "use": "cor_na_operation",
              "method": "cor_method"
            },
            "html": "cov(<b><i>column</i></b>, <b><i>column</i></b>, use = <b><i>cor_na_operation</i></b>, method = <b><i>cor_method</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "use (Optional)",
            "text": [
              "The default is \"everything\". Set an operation type for dealing with missing values."
            ]
          },
          {
            "name": "method (Optional)",
            "text": [
              "The default is \"pearson\". Set a method to compute the covariance among \"pearson\", \"kendall\", or \"spearman\"."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "summarize(covariance = cov(ARR_DELAY, DEP_DELAY))",
            "comment": "Return the covariance value for ARR_DELAY and DEP_DELAY columns."
          }
        ],
        "tags": [
          "covariance"
        ],
        "categories": [
          "Statistics"
        ],
        "html": "<p><strong>Summary</strong><br>\nComputes the covariance of two column values.</p>\n\n<p><strong>Syntax</strong><br>\ncov(<code>&lt;column_num&gt;</code>, <code>&lt;column_num&gt;</code>, use = <code>&lt;cor_na_operation&gt;</code>, method = <code>&lt;cor_method&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>use (Optional) - The default is &quot;everything&quot;. Set an operation type for dealing with missing values.</li>\n<li>method (Optional) - The default is &quot;pearson&quot;. Set a method to compute the covariance among &quot;pearson&quot;, &quot;kendall&quot;, or &quot;spearman&quot;.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nsummarize(covariance = cov(ARR_DELAY, DEP_DELAY))<br>\n<em>Return the covariance value for ARR</em>DELAY and DEP_DELAY columns._</p>\n"
      }
    ]
  },
  {
    "category": "Type Conversion",
    "functions": [
      {
        "name": "as.Date",
        "package": "base",
        "source": "exploratory doc",
        "description": "Convert a given data to Date data type. Date data type doesn't include Time. The default formats follow the rules of the ISO 8601 international standard which expresses a day as \"2001-02-03\". If the given data is number as 'internal system number (# of days since some origin)' then you want to provide which date to be used as 'origin'.",
        "usage": [
          {
            "syntax": "as.Date(```<column>```, format = ```<date_format>```, tz = ```<timezone>```, origin = ```<text>```)",
            "tokens": [
              {
                "id": "0",
                "value": "as.Date("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", format = "
              },
              {
                "id": "date_format",
                "value": "<date_format>"
              },
              {
                "id": "4",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "6",
                "value": ", origin = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "format": "date_format",
              "tz": "timezone",
              "origin": "text"
            },
            "html": "as.Date(<b><i>column</i></b>, format = <b><i>date_format</i></b>, tz = <b><i>timezone</i></b>, origin = <b><i>text</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "format (Optional)",
            "text": [
              "specify a date format to read the given data. If not specified, it will try \"%Y-%m-%d\" then \"%Y/%m/%d\"",
              "- %d - Day of the month (decimal number)",
              "- %m - \tMonth (decimal number)",
              "- %b - \tMonth (abbreviated)",
              "- %B - \tMonth (full name)",
              "- %y - \tYear (2 digit)",
              "- %Y - \tYear (4 digit)"
            ]
          },
          {
            "name": "tz (Optional)",
            "text": [
              "specify which timezone to use to read the given data."
            ]
          },
          {
            "name": "origin (Optional)",
            "text": [
              "specify the origin date to calculate a given internal number of days from."
            ]
          }
        ],
        "return_value": "Date",
        "examples": [

        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a given data to Date data type. Date data type doesn&#39;t include Time. The default formats follow the rules of the ISO 8601 international standard which expresses a day as &quot;2001-02-03&quot;. If the given data is number as &#39;internal system number (# of days since some origin)&#39; then you want to provide which date to be used as &#39;origin&#39;.</p>\n\n<p><strong>Syntax</strong><br>\nas.Date(<code>&lt;column&gt;</code>, format = <code>&lt;date_format&gt;</code>, tz = <code>&lt;timezone&gt;</code>, origin = <code>&lt;text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>format (Optional) - specify a date format to read the given data. If not specified, it will try &quot;%Y-%m-%d&quot; then &quot;%Y/%m/%d&quot;\n\n<ul>\n<li>%d - Day of the month (decimal number)</li>\n<li>%m -    Month (decimal number)</li>\n<li>%b -    Month (abbreviated)</li>\n<li>%B -    Month (full name)</li>\n<li>%y -    Year (2 digit)</li>\n<li>%Y -    Year (4 digit)</li>\n</ul></li>\n<li>tz (Optional) - specify which timezone to use to read the given data.</li>\n<li>origin (Optional) - specify the origin date to calculate a given internal number of days from.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nDate  </p>\n\n<p><strong>Example</strong><br>\nas.Date(&quot;2015-10-10&quot;)<br>\nas.Date(&quot;2015-10-10&quot;, tz = &quot;America/Los_Angeles&quot;)<br>\nas.Date(&quot;10-10-10&quot;, format = &quot;%d-%m-%y&quot;)\nas.Date(35981, origin = &quot;1900-01-01&quot;)\nas.Date(35981, origin = &quot;1899-12-30&quot;) # 1998-07-05 ## and Windows Excel data<br>\nas.Date(34519, origin = &quot;1904-01-01&quot;) # 1998-07-05 ## and Mac Excel data  </p>\n"
      },
      {
        "name": "as.POSIXct",
        "package": "base",
        "source": "exploratory doc",
        "description": "Convert data to Date/Time data type.",
        "usage": [
          {
            "syntax": "as.POSIXct(```<column>```, format = ```<date_time_format>```, tz = ```<timezone>```, origin = ```<text>```)",
            "tokens": [
              {
                "id": "0",
                "value": "as.POSIXct("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", format = "
              },
              {
                "id": "date_time_format",
                "value": "<date_time_format>"
              },
              {
                "id": "4",
                "value": ", tz = "
              },
              {
                "id": "timezone",
                "value": "<timezone>"
              },
              {
                "id": "6",
                "value": ", origin = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "8",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "format": "date_time_format",
              "tz": "timezone",
              "origin": "text"
            },
            "html": "as.POSIXct(<b><i>column</i></b>, format = <b><i>date_time_format</i></b>, tz = <b><i>timezone</i></b>, origin = <b><i>text</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "format (Optional)",
            "text": [
              "specify a date format to read the given data. If not specified, it will try \"%Y-%m-%d\" then \"%Y/%m/%d\"",
              "- %Y - 4-digit year",
              "- %y - 2-digit year",
              "- %m - Decimal month",
              "- %b - Abbreviated month",
              "- %B - Full month",
              "- %d - Decimal date",
              "- %H - Decimal hours (24 hour)",
              "- %I - Decimal hours (12 hour)",
              "- %M - Decimal minute",
              "- %z - Offset from GMT",
              "- %Z - Time zone (character)",
              "- %a - Abbreviated weekday",
              "- %A - Full weekday",
              "- %j - Decimal day of the year",
              "- %p - Locale-specific AM/PM",
              "- %S - Decimal second",
              "- %U - Decimal week of the year (starting on Sunday)",
              "- %w - Decimal Weekday (0=Sunday)",
              "- %W - Decimal week of the year (starting on Monday)",
              "- %x - Locale-specific Date",
              "- %X - Locale-specific Time",
              "- %c - Locale-specific date and time"
            ]
          },
          {
            "name": "tz (Optional)",
            "text": [
              "specify which timezone to use to read the given data."
            ]
          },
          {
            "name": "origin (Optional)",
            "text": [
              "specify the origin date to calculate a given internal number of days from."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "as.POSIXct(\"2015-10-10 13:10:05\")",
            "comment": "Returns \"2015-10-10 13:10:05 PDT\""
          },
          {
            "code": "as.POSIXct(\"2015-10-10 13:10:05\", tz = \"America/Los_Angeles\")",
            "comment": "Returns \"2015-10-10 13:10:05 PDT\""
          },
          {
            "code": "as.POSIXct(\"2015-10-10 13:10:05\", tz = \"Asia/Tokyo\")",
            "comment": "Returns \"2015-10-10 13:10:05 JST\""
          },
          {
            "code": "as.POSIXct(\"05-10-15T13:10:05\", format = \"%d-%m-%yT%H:%M\")",
            "comment": "Returns \"2015-10-05 13:10:00 PDT\""
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to Date/Time data type.</p>\n\n<p><strong>Syntax</strong><br>\nas.POSIXct(<code>&lt;column&gt;</code>, format = <code>&lt;date_time_format&gt;</code>, tz = <code>&lt;timezone&gt;</code>, origin = <code>&lt;text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>format (Optional) - specify a date format to read the given data. If not specified, it will try &quot;%Y-%m-%d&quot; then &quot;%Y/%m/%d&quot;\n\n<ul>\n<li>%Y - 4-digit year<br></li>\n<li>%y - 2-digit year<br></li>\n<li>%m - Decimal month<br></li>\n<li>%b - Abbreviated month<br></li>\n<li>%B - Full month<br></li>\n<li>%d - Decimal date<br></li>\n<li>%H - Decimal hours (24 hour)<br></li>\n<li>%I - Decimal hours (12 hour)<br></li>\n<li>%M - Decimal minute<br></li>\n<li>%z - Offset from GMT</li>\n<li>%Z - Time zone (character)</li>\n<li>%a - Abbreviated weekday<br></li>\n<li>%A - Full weekday<br></li>\n<li>%j - Decimal day of the year<br></li>\n<li>%p - Locale-specific AM/PM<br></li>\n<li>%S - Decimal second<br></li>\n<li>%U - Decimal week of the year (starting on Sunday)<br></li>\n<li>%w - Decimal Weekday (0=Sunday)<br></li>\n<li>%W - Decimal week of the year (starting on Monday)<br></li>\n<li>%x - Locale-specific Date<br></li>\n<li>%X - Locale-specific Time</li>\n<li>%c - Locale-specific date and time<br></li>\n</ul></li>\n<li>tz (Optional) - specify which timezone to use to read the given data.</li>\n<li>origin (Optional) - specify the origin date to calculate a given internal number of days from.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct  </p>\n\n<p><strong>Example</strong><br>\nas.POSIXct(&quot;2015-10-10 13:10:05&quot;)\n<em>Returns &quot;2015-10-10 13:10:05 PDT&quot;</em><br>\nas.POSIXct(&quot;2015-10-10 13:10:05&quot;, tz = &quot;America/Los_Angeles&quot;)\n<em>Returns &quot;2015-10-10 13:10:05 PDT&quot;</em><br>\nas.POSIXct(&quot;2015-10-10 13:10:05&quot;, tz = &quot;Asia/Tokyo&quot;)\n<em>Returns &quot;2015-10-10 13:10:05 JST&quot;</em><br>\nas.POSIXct(&quot;05-10-15T13:10:05&quot;, format = &quot;%d-%m-%yT%H:%M&quot;)\n<em>Returns &quot;2015-10-05 13:10:00 PDT&quot;</em>  </p>\n"
      },
      {
        "name": "as.character",
        "package": "base",
        "source": "exploratory doc",
        "description": "Convert a given data to character data type.",
        "usage": [
          {
            "syntax": "as.character(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "as.character("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "as.character(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "as.character(123.11)",
            "comment": "Returns \"123.11\" as character."
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a given data to character data type.</p>\n\n<p><strong>Syntax</strong><br>\nas.character(<code>&lt;column&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter    </p>\n\n<p><strong>Example</strong><br>\nas.character(123.11)<br>\n<em>Returns &quot;123.11&quot; as character.</em>  </p>\n"
      },
      {
        "name": "as.double",
        "package": "base",
        "source": "exploratory doc",
        "description": "Convert data to double precision number data type.  It is identical to numeric.",
        "usage": [
          {
            "syntax": "as.double(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "as.double("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "as.double(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Double",
        "examples": [
          {
            "code": "as.double(\"12345\")",
            "comment": "Returns 12345"
          },
          {
            "code": "as.double(\"12345.10\")",
            "comment": "Returns 12345.1"
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to double precision number data type.  It is identical to numeric.</p>\n\n<p><strong>Syntax</strong><br>\nas.double(<code>&lt;column&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nDouble    </p>\n\n<p><strong>Example</strong><br>\nas.double(&quot;12345&quot;)<br>\n<em>Returns 12345</em><br>\nas.double(&quot;12345.10&quot;)<br>\n<em>Returns 12345.1</em></p>\n"
      },
      {
        "name": "as.factor",
        "package": "base",
        "source": "exploratory doc",
        "description": "Encode a column as a factor.",
        "usage": [
          {
            "syntax": "factor(```<column>```, levels = ```<text>```, labels = ```<text>```, exclude = ```<text>```, ordered = ```<logical>```, nmax = ```<number>```)",
            "tokens": [
              {
                "id": "0",
                "value": "factor("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", levels = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "4",
                "value": ", labels = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "6",
                "value": ", exclude = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "8",
                "value": ", ordered = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "10",
                "value": ", nmax = "
              },
              {
                "id": "number",
                "value": "<number>"
              },
              {
                "id": "12",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "levels": "text",
              "labels": "text",
              "exclude": "text",
              "ordered": "logical",
              "nmax": "number"
            },
            "html": "factor(<b><i>column</i></b>, levels = <b><i>text</i></b>, labels = <b><i>text</i></b>, exclude = <b><i>text</i></b>, ordered = <b><i>logical</i></b>, nmax = <b><i>number</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "levels (Optional)",
            "text": [
              "Set a set of levels (categories) explicitly. If not specified, the unique values of the given column will be used."
            ]
          },
          {
            "name": "labels (Optional)",
            "text": [
              "If not specified, level values will be used."
            ]
          },
          {
            "name": "exclude (Optional)",
            "text": [
              "The default is NA> Values to be excluded from the levels (categories). For a numeric column, set exclude = NULL to make NA an extra level (prints as <NA>); by default, this is the last level."
            ]
          },
          {
            "name": "ordered (Optional)",
            "text": [
              "The default is FALSE. Decide whether the level values are ordered or not."
            ]
          },
          {
            "name": "nmax (Optional)",
            "text": [
              "The default is NA. an upper bound on the number of levels."
            ]
          }
        ],
        "return_value": "Factor",
        "examples": [
          {
            "code": "as.factor(columnA)",
            "comment": "Returns iMac, iPod, iPhone, iPod, iPhone (It has Levels information of : iMac iPhone iPod)"
          }
        ],
        "tags": [
          "factor",
          "category",
          "enumerated type"
        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nEncode a column as a factor.</p>\n\n<p><strong>Syntax</strong><br>\nfactor(<code>&lt;column&gt;</code>, levels = <code>&lt;text&gt;</code>, labels = <code>&lt;text&gt;</code>, exclude = <code>&lt;text&gt;</code>, ordered = <code>&lt;logical&gt;</code>, nmax = <code>&lt;number&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>levels (Optional) - Set a set of levels (categories) explicitly. If not specified, the unique values of the given column will be used.</li>\n<li>labels (Optional) - If not specified, level values will be used.</li>\n<li>exclude (Optional) - The default is NA&gt; Values to be excluded from the levels (categories). For a numeric column, set exclude = NULL to make NA an extra level (prints as <NA>); by default, this is the last level.</li>\n<li>ordered (Optional) - The default is FALSE. Decide whether the level values are ordered or not.</li>\n<li>nmax (Optional) - The default is NA. an upper bound on the number of levels.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nFactor  </p>\n\n<p><strong>Example</strong><br>\ncolumnA - &quot;iMac&quot;, &quot;iPod&quot;, &quot;iPhone&quot;, &quot;iPod&quot;, &quot;iPhone&quot;<br>\nas.factor(columnA)<br>\n<em>Returns iMac, iPod, iPhone, iPod, iPhone (It has Levels information of : iMac iPhone iPod)</em></p>\n"
      },
      {
        "name": "as.integer",
        "package": "base",
        "source": "exploratory doc",
        "description": "Convert data to integer number data type.",
        "usage": [
          {
            "syntax": "as.integer(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "as.integer("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "as.integer(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Integer",
        "examples": [
          {
            "code": "as.integer(\"12345\")",
            "comment": "Returns 12345"
          },
          {
            "code": "as.integer(\"12345.10\")",
            "comment": "Returns 12345"
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to integer number data type.</p>\n\n<p><strong>Syntax</strong><br>\nas.integer(<code>&lt;column&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nInteger  </p>\n\n<p><strong>Example</strong><br>\nas.integer(&quot;12345&quot;)<br>\n<em>Returns 12345</em><br>\nas.integer(&quot;12345.10&quot;)<br>\n<em>Returns 12345</em>  </p>\n"
      },
      {
        "name": "as.logical",
        "package": "base",
        "source": "exploratory doc",
        "description": "Convert data to Logical (Boolean) data type.",
        "usage": [
          {
            "syntax": "as.logical(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "as.logical("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "as.logical(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "as.logical(\"TRUE\")",
            "comment": "Returns TRUE"
          },
          {
            "code": "as.logical(\"true\")",
            "comment": "Returns TRUE"
          },
          {
            "code": "as.logical(\"T\")",
            "comment": "Returns TRUE"
          },
          {
            "code": "as.logical(\"True\")",
            "comment": "Returns TRUE"
          },
          {
            "code": "as.logical(1)",
            "comment": "Returns TRUE"
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to Logical (Boolean) data type.</p>\n\n<p><strong>Syntax</strong><br>\nas.logical(<code>&lt;column&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nas.logical(&quot;TRUE&quot;)<br>\n<em>Returns TRUE</em><br>\nas.logical(&quot;true&quot;)<br>\n<em>Returns TRUE</em><br>\nas.logical(&quot;T&quot;)<br>\n<em>Returns TRUE</em><br>\nas.logical(&quot;True&quot;)<br>\n<em>Returns TRUE</em><br>\nas.logical(1)<br>\n<em>Returns TRUE</em>  </p>\n"
      },
      {
        "name": "as.numeric",
        "package": "base",
        "source": "exploratory doc",
        "description": "Convert data to",
        "usage": [
          {
            "syntax": "as.numeric(```<column>```, units = ```<difftime_units>```)",
            "tokens": [
              {
                "id": "0",
                "value": "as.numeric("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", units = "
              },
              {
                "id": "difftime_units",
                "value": "<difftime_units>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "units": "difftime_units"
            },
            "html": "as.numeric(<b><i>column</i></b>, units = <b><i>difftime_units</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "units (Optional)",
            "text": [
              "this can be used only for difftime data type columns or values."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "as.numeric(\"12345\")",
            "comment": "Returns 12345"
          },
          {
            "code": "as.numeric(\"12345.10\")",
            "comment": "Returns 12345.1"
          },
          {
            "code": "as.numeric(as.Date(\"2015-01-30\") - as.Date(\"2015-01-15\"), units = \"days\")",
            "comment": "Returns 15"
          },
          {
            "code": "as.numeric(as.Date(\"2015-01-30\") - as.Date(\"2015-01-15\"), units = \"weeks\")",
            "comment": "Returns 2.142857"
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to</p>\n\n<p><strong>Syntax</strong><br>\nas.numeric(<code>&lt;column&gt;</code>, units = <code>&lt;difftime_units&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>units (Optional) - this can be used only for difftime data type columns or values.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nas.numeric(&quot;12345&quot;)<br>\n<em>Returns 12345</em><br>\nas.numeric(&quot;12345.10&quot;)<br>\n<em>Returns 12345.1</em><br>\nas.numeric(as.Date(&quot;2015-01-30&quot;) - as.Date(&quot;2015-01-15&quot;), units = &quot;days&quot;)<br>\n<em>Returns 15</em><br>\nas.numeric(as.Date(&quot;2015-01-30&quot;) - as.Date(&quot;2015-01-15&quot;), units = &quot;weeks&quot;)<br>\n<em>Returns 2.142857</em>  </p>\n"
      },
      {
        "name": "parse_character",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert a given data to character data type.",
        "usage": [
          {
            "syntax": "parse_character(```<column>```, na = c(\"\", \"NA\"), locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_character("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na = c(\"\", \"NA\"), locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "locale": "locale"
            },
            "html": "parse_character(<b><i>column</i></b>, na = c(\"\", \"NA\"), locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na",
            "text": [
              "The default is null and \"NA\". Provide a list of text to be registered as NA."
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session locale."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "parse_character(123.11)",
            "comment": "Returns \"123.11\" as character."
          }
        ],
        "tags": [
          "Parse",
          "Convert",
          "Character"
        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a given data to character data type.</p>\n\n<p><strong>Syntax</strong><br>\nparse_character(<code>&lt;column&gt;</code>, na = c(&quot;&quot;, &quot;NA&quot;), locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na - The default is null and &quot;NA&quot;. Provide a list of text to be registered as NA.</li>\n<li>locale - The default is the session locale.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter    </p>\n\n<p><strong>Example</strong><br>\nparse_character(123.11)<br>\n<em>Returns &quot;123.11&quot; as character.</em>  </p>\n"
      },
      {
        "name": "parse_date",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert a given data to Date data type. Date data type doesn't include Time. The default formats follow the rules of the ISO 8601 international standard which expresses a day as \"%Y-%m-%d\" (e.g. \"2001-02-03\").",
        "usage": [
          {
            "syntax": "parse_date(```<column>```, format = ```<date_format>```, local = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_date("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", format = "
              },
              {
                "id": "date_format",
                "value": "<date_format>"
              },
              {
                "id": "4",
                "value": ", local = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "format": "date_format",
              "local": "locale"
            },
            "html": "parse_date(<b><i>column</i></b>, format = <b><i>date_format</i></b>, local = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "format (Optional)",
            "text": [
              "specify a date format to read the given data. If not specified, it will try \"%Y-%m-%d\" then \"%Y/%m/%d\"",
              "- %d - Day of the month (decimal number)",
              "- %m - \tMonth (decimal number)",
              "- %b - \tMonth (abbreviated)",
              "- %B - \tMonth (full name)",
              "- %y - \tYear (2 digit)",
              "- %Y - \tYear (4 digit)"
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session default locale. Set the date related configuration like time zone, encoding, decimal mark, and day/month names."
            ]
          }
        ],
        "return_value": "Date",
        "examples": [
          {
            "code": "parse_date(\"2015-10-10\")",
            "comment": "Returns \"2015-10-10\""
          },
          {
            "code": "parse_date(\"2015-10-10\", locale = locale(tz = \"America/Los_Angeles\"))",
            "comment": "Returns \"2015-10-10\""
          },
          {
            "code": "parse_date(\"10-10-10\", format = \"%d-%m-%y\")",
            "comment": "Returns \"2015-10-10\""
          },
          {
            "code": "parse_date(\"10-JAN-10\", format = \"%d-%b-%y\")",
            "comment": "Returns \"2015-01-10\""
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion",
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert a given data to Date data type. Date data type doesn&#39;t include Time. The default formats follow the rules of the ISO 8601 international standard which expresses a day as &quot;%Y-%m-%d&quot; (e.g. &quot;2001-02-03&quot;).</p>\n\n<p><strong>Syntax</strong><br>\nparse_date(<code>&lt;column&gt;</code>, format = <code>&lt;date_format&gt;</code>, local = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>format (Optional) - specify a date format to read the given data. If not specified, it will try &quot;%Y-%m-%d&quot; then &quot;%Y/%m/%d&quot;\n\n<ul>\n<li>%d - Day of the month (decimal number)</li>\n<li>%m -    Month (decimal number)</li>\n<li>%b -    Month (abbreviated)</li>\n<li>%B -    Month (full name)</li>\n<li>%y -    Year (2 digit)</li>\n<li>%Y -    Year (4 digit)</li>\n</ul></li>\n<li>locale - The default is the session default locale. Set the date related configuration like time zone, encoding, decimal mark, and day/month names.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nDate  </p>\n\n<p><strong>Example</strong><br>\nparse_date(&quot;2015-10-10&quot;)<br>\n<em>Returns &quot;2015-10-10&quot;</em>\nparse_date(&quot;2015-10-10&quot;, locale = locale(tz = &quot;America/Los_Angeles&quot;))\n<em>Returns &quot;2015-10-10&quot;</em>\nparse_date(&quot;10-10-10&quot;, format = &quot;%d-%m-%y&quot;)\n<em>Returns &quot;2015-10-10&quot;</em>\nparse_date(&quot;10-JAN-10&quot;, format = &quot;%d-%b-%y&quot;)\n<em>Returns &quot;2015-01-10&quot;</em></p>\n"
      },
      {
        "name": "parse_datetime",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert data to Date/Time data type.",
        "usage": [
          {
            "syntax": "parse_datetime(```<column>```, format = ```<date_time_format>```, locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_datetime("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", format = "
              },
              {
                "id": "date_time_format",
                "value": "<date_time_format>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "format": "date_time_format",
              "locale": "locale"
            },
            "html": "parse_datetime(<b><i>column</i></b>, format = <b><i>date_time_format</i></b>, locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "format (Optional)",
            "text": [
              "specify a date format to read the given data. If not specified, it will try \"%Y-%m-%d\" then \"%Y/%m/%d\"",
              "- %Y - 4-digit year",
              "- %y - 2-digit year",
              "- %m - Decimal month",
              "- %b - Abbreviated month",
              "- %B - Full month",
              "- %d - Decimal date",
              "- %H - Decimal hours (24 hour)",
              "- %I - Decimal hours (12 hour)",
              "- %M - Decimal minute",
              "- %z - Offset from GMT",
              "- %Z - Time zone (character)",
              "- %a - Abbreviated weekday",
              "- %A - Full weekday",
              "- %j - Decimal day of the year",
              "- %p - Locale-specific AM/PM",
              "- %S - Decimal second",
              "- %U - Decimal week of the year (starting on Sunday)",
              "- %w - Decimal Weekday (0=Sunday)",
              "- %W - Decimal week of the year (starting on Monday)",
              "- %x - Locale-specific Date",
              "- %X - Locale-specific Time",
              "- %c - Locale-specific date and time"
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session default locale. Set the date/time related configuration like time zone, encoding, decimal mark, and day/month names."
            ]
          }
        ],
        "return_value": "POSIXct",
        "examples": [
          {
            "code": "parse_datetime(\"2015-10-10 13:10:05\")",
            "comment": "Returns \"2015-10-10 13:10:05 PDT\""
          },
          {
            "code": "parse_datetime(\"2015-10-10 13:10:05\", locale = locale(tz = \"America/Los_Angeles\"))",
            "comment": "Returns \"2015-10-10 13:10:05 PDT\""
          },
          {
            "code": "parse_datetime(\"2015-10-10 13:10:05\", locale = locale(tz = \"Asia/Tokyo\"))",
            "comment": "Returns \"2015-10-10 13:10:05 JST\""
          },
          {
            "code": "parse_datetime(\"2015-10-15T13:10:05\")",
            "comment": "Returns \"2015-10-05 13:10:00 PDT\""
          },
          {
            "code": "parse_datetime(\"05-10-15T13:10:05\", format = \"%d-%m-%yT%H:%M:%S\")",
            "comment": "Returns \"2015-10-05 13:10:00 PDT\""
          },
          {
            "code": "parse_datetime(\"2010/01/01 12:00\", \"%Y/%m/%d %H:%M\", locale = locale(tz = \"US/Central\"))",
            "comment": "Returns \"2010-01-01 12:00:00 CST\""
          },
          {
            "code": "parse_datetime(\"2010/01/01 12:00\", \"%Y/%m/%d %H:%M\", locale = locale(tz = \"US/Eastern\"))",
            "comment": "Returns \"2010-01-01 12:00:00 EST\""
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion",
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to Date/Time data type.</p>\n\n<p><strong>Syntax</strong><br>\nparse_datetime(<code>&lt;column&gt;</code>, format = <code>&lt;date_time_format&gt;</code>, locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>format (Optional) - specify a date format to read the given data. If not specified, it will try &quot;%Y-%m-%d&quot; then &quot;%Y/%m/%d&quot;\n\n<ul>\n<li>%Y - 4-digit year<br></li>\n<li>%y - 2-digit year<br></li>\n<li>%m - Decimal month<br></li>\n<li>%b - Abbreviated month<br></li>\n<li>%B - Full month<br></li>\n<li>%d - Decimal date<br></li>\n<li>%H - Decimal hours (24 hour)<br></li>\n<li>%I - Decimal hours (12 hour)<br></li>\n<li>%M - Decimal minute<br></li>\n<li>%z - Offset from GMT</li>\n<li>%Z - Time zone (character)</li>\n<li>%a - Abbreviated weekday<br></li>\n<li>%A - Full weekday<br></li>\n<li>%j - Decimal day of the year<br></li>\n<li>%p - Locale-specific AM/PM<br></li>\n<li>%S - Decimal second<br></li>\n<li>%U - Decimal week of the year (starting on Sunday)<br></li>\n<li>%w - Decimal Weekday (0=Sunday)<br></li>\n<li>%W - Decimal week of the year (starting on Monday)<br></li>\n<li>%x - Locale-specific Date<br></li>\n<li>%X - Locale-specific Time</li>\n<li>%c - Locale-specific date and time<br></li>\n</ul></li>\n<li>locale - The default is the session default locale. Set the date/time related configuration like time zone, encoding, decimal mark, and day/month names.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nPOSIXct  </p>\n\n<p><strong>Example</strong><br>\nparse_datetime(&quot;2015-10-10 13:10:05&quot;)\n<em>Returns &quot;2015-10-10 13:10:05 PDT&quot;</em><br>\nparse_datetime(&quot;2015-10-10 13:10:05&quot;, locale = locale(tz = &quot;America/Los_Angeles&quot;))\n<em>Returns &quot;2015-10-10 13:10:05 PDT&quot;</em><br>\nparse_datetime(&quot;2015-10-10 13:10:05&quot;, locale = locale(tz = &quot;Asia/Tokyo&quot;))\n<em>Returns &quot;2015-10-10 13:10:05 JST&quot;</em><br>\nparse_datetime(&quot;2015-10-15T13:10:05&quot;)\n<em>Returns &quot;2015-10-05 13:10:00 PDT&quot;</em><br>\nparse_datetime(&quot;05-10-15T13:10:05&quot;, format = &quot;%d-%m-%yT%H:%M:%S&quot;)\n<em>Returns &quot;2015-10-05 13:10:00 PDT&quot;</em><br>\nparse_datetime(&quot;2010/01/01 12:00&quot;, &quot;%Y/%m/%d %H:%M&quot;, locale = locale(tz = &quot;US/Central&quot;))\n<em>Returns &quot;2010-01-01 12:00:00 CST&quot;</em>\nparse_datetime(&quot;2010/01/01 12:00&quot;, &quot;%Y/%m/%d %H:%M&quot;, locale = locale(tz = &quot;US/Eastern&quot;))\n<em>Returns &quot;2010-01-01 12:00:00 EST&quot;</em></p>\n"
      },
      {
        "name": "parse_double",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert data to double precision number data type.",
        "usage": [
          {
            "syntax": "parse_double(```<column>```, na = c(\"\", \"NA\"), locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_double("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na = c(\"\", \"NA\"), locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "locale": "locale"
            },
            "html": "parse_double(<b><i>column</i></b>, na = c(\"\", \"NA\"), locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na",
            "text": [
              "The default is null and \"NA\". Provide a list of text to be registered as NA."
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session locale."
            ]
          }
        ],
        "return_value": "Double",
        "examples": [
          {
            "code": "parse_double(\"12345\")",
            "comment": "Returns 12345"
          },
          {
            "code": "parse_double(\"12345.10\")",
            "comment": "Returns 12345.1"
          }
        ],
        "tags": [
          "Type Conversion",
          "Double",
          "Parse"
        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to double precision number data type.</p>\n\n<p><strong>Syntax</strong><br>\nparse_double(<code>&lt;column&gt;</code>, na = c(&quot;&quot;, &quot;NA&quot;), locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na - The default is null and &quot;NA&quot;. Provide a list of text to be registered as NA.</li>\n<li>locale - The default is the session locale.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nDouble    </p>\n\n<p><strong>Example</strong><br>\nparse_double(&quot;12345&quot;)<br>\n<em>Returns 12345</em><br>\nparse_double(&quot;12345.10&quot;)<br>\n<em>Returns 12345.1</em></p>\n"
      },
      {
        "name": "parse_euro_double",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert data to double precision number data type.",
        "usage": [
          {
            "syntax": "parse_euro_double(```<column>```, na = c(\"\", \"NA\"))",
            "tokens": [
              {
                "id": "0",
                "value": "parse_euro_double("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na = c(\"\", \"NA\"))"
              }
            ],
            "arguments": {
              "0": "column"
            },
            "html": "parse_euro_double(<b><i>column</i></b>, na = c(\"\", \"NA\"))"
          }
        ],
        "arguments": [
          {
            "name": "na",
            "text": [
              "The default is null and \"NA\". Provide a list of text to be registered as NA."
            ]
          }
        ],
        "return_value": "Double",
        "examples": [
          {
            "code": "parse_euro_double(\"12345\")",
            "comment": "Returns 12345"
          },
          {
            "code": "parse_euro_double(\"12345.10\")",
            "comment": "Returns 12345.1"
          }
        ],
        "tags": [
          "Type Conversion",
          "Double",
          "Euro",
          "Parse"
        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to double precision number data type.</p>\n\n<p><strong>Syntax</strong><br>\nparse_euro_double(<code>&lt;column&gt;</code>, na = c(&quot;&quot;, &quot;NA&quot;))</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na - The default is null and &quot;NA&quot;. Provide a list of text to be registered as NA.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nDouble    </p>\n\n<p><strong>Example</strong><br>\nparse_euro_double(&quot;12345&quot;)<br>\n<em>Returns 12345</em><br>\nparse_euro_double(&quot;12345.10&quot;)<br>\n<em>Returns 12345.1</em></p>\n"
      },
      {
        "name": "parse_factor",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Parse data and convert to factor data tyep.",
        "usage": [
          {
            "syntax": "parse_factor(x, levels, ordered = ```<logical>```, na = c(\"\", \"NA\"), locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_factor(x, levels, ordered = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "2",
                "value": ", na = c(\"\", \"NA\"), locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "ordered": "logical",
              "locale": "locale"
            },
            "html": "parse_factor(x, levels, ordered = <b><i>logical</i></b>, na = c(\"\", \"NA\"), locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "levels (Optional)",
            "text": [
              "Set a set of levels (categories) explicitly. If not specified, the unique values of the given column will be used."
            ]
          },
          {
            "name": "ordered",
            "text": [
              "The default is FALSE. Set if this should be an ordered factor or not."
            ]
          },
          {
            "name": "na",
            "text": [
              "The default is null and \"NA\". Provide a list of text to be registered as NA."
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session locale."
            ]
          }
        ],
        "return_value": "Factor",
        "examples": [
          {
            "code": "parse_factor(columnA)",
            "comment": "Returns iMac, iPod, iPhone, iPod, iPhone (It has Levels information of : iMac iPhone iPod)"
          }
        ],
        "tags": [
          "factor",
          "category",
          "enumerated type"
        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nParse data and convert to factor data tyep.</p>\n\n<p><strong>Syntax</strong><br>\nparse_factor(x, levels, ordered = <code>&lt;logical&gt;</code>, na = c(&quot;&quot;, &quot;NA&quot;), locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>levels (Optional) - Set a set of levels (categories) explicitly. If not specified, the unique values of the given column will be used.</li>\n<li>ordered - The default is FALSE. Set if this should be an ordered factor or not.</li>\n<li>na - The default is null and &quot;NA&quot;. Provide a list of text to be registered as NA.</li>\n<li>locale - The default is the session locale.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nFactor  </p>\n\n<p><strong>Example</strong><br>\ncolumnA - &quot;iMac&quot;, &quot;iPod&quot;, &quot;iPhone&quot;, &quot;iPod&quot;, &quot;iPhone&quot;<br>\nparse_factor(columnA)<br>\n<em>Returns iMac, iPod, iPhone, iPod, iPhone (It has Levels information of : iMac iPhone iPod)</em></p>\n"
      },
      {
        "name": "parse_integer",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert data to integer number data type.",
        "usage": [
          {
            "syntax": "parse_integer(```<column>```, na = c(\"\", \"NA\"), locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_integer("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na = c(\"\", \"NA\"), locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "locale": "locale"
            },
            "html": "parse_integer(<b><i>column</i></b>, na = c(\"\", \"NA\"), locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na",
            "text": [
              "The default is null and \"NA\". Provide a list of text to be registered as NA."
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session locale."
            ]
          }
        ],
        "return_value": "Integer",
        "examples": [
          {
            "code": "parse_integer(\"12345\")",
            "comment": "Returns 12345"
          },
          {
            "code": "parse_integer(\"12345.10\")",
            "comment": "Returns 12345"
          }
        ],
        "tags": [

        ],
        "categories": [
          "Type Conversion"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to integer number data type.</p>\n\n<p><strong>Syntax</strong><br>\nparse_integer(<code>&lt;column&gt;</code>, na = c(&quot;&quot;, &quot;NA&quot;), locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na - The default is null and &quot;NA&quot;. Provide a list of text to be registered as NA.</li>\n<li>locale - The default is the session locale.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nInteger  </p>\n\n<p><strong>Example</strong><br>\nparse_integer(&quot;12345&quot;)<br>\n<em>Returns 12345</em><br>\nparse_integer(&quot;12345.10&quot;)<br>\n<em>Returns 12345</em>  </p>\n"
      },
      {
        "name": "parse_logical",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert data to Logical (Boolean) data type.",
        "usage": [
          {
            "syntax": "parse_logical(```<column>```, na = c(\"\", \"NA\"), locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_logical("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na = c(\"\", \"NA\"), locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "locale": "locale"
            },
            "html": "parse_logical(<b><i>column</i></b>, na = c(\"\", \"NA\"), locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na",
            "text": [
              "The default is null and \"NA\". Provide a list of text to be registered as NA."
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session locale."
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "parse_logical(\"TRUE\")",
            "comment": "Returns TRUE"
          },
          {
            "code": "parse_logical(\"T\")",
            "comment": "Returns TRUE"
          }
        ],
        "tags": [
          "logical",
          "convert"
        ],
        "categories": [
          "Type Conversion",
          "Logical"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to Logical (Boolean) data type.</p>\n\n<p><strong>Syntax</strong><br>\nparse_logical(<code>&lt;column&gt;</code>, na = c(&quot;&quot;, &quot;NA&quot;), locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na - The default is null and &quot;NA&quot;. Provide a list of text to be registered as NA.</li>\n<li>locale - The default is the session locale.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nparse_logical(&quot;TRUE&quot;)<br>\n<em>Returns TRUE</em><br>\nparse_logical(&quot;T&quot;)<br>\n<em>Returns TRUE</em>  </p>\n"
      },
      {
        "name": "parse_number",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Parse characters, extract numeric values, and convert to number data type including",
        "usage": [
          {
            "syntax": "parse_number(```<column>```, na = c(\"\", \"NA\"), locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_number("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na = c(\"\", \"NA\"), locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "locale": "locale"
            },
            "html": "parse_number(<b><i>column</i></b>, na = c(\"\", \"NA\"), locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na",
            "text": [
              "The default is null and \"NA\". Provide a list of text to be registered as NA."
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session locale using default_locale() function."
            ]
          }
        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "parse_number(\"12345\")",
            "comment": "Returns 12345"
          },
          {
            "code": "parse_number(\"12345.10\")",
            "comment": "Returns 12345.1"
          },
          {
            "code": "parse_number(\"$12,345.10\")",
            "comment": "Returns 12345.1"
          },
          {
            "code": "parse_number(\"$12.20M\")",
            "comment": "Returns 12.2"
          },
          {
            "code": "parse_number(as.Date(\"2015-01-30\") - as.Date(\"2015-01-15\"))",
            "comment": "Returns 15"
          }
        ],
        "tags": [
          "Type Conversion",
          "Parse",
          "Numeric",
          "Number"
        ],
        "categories": [
          "Type Conversion",
          "Text"
        ],
        "html": "<p><strong>Summary</strong><br>\nParse characters, extract numeric values, and convert to number data type including</p>\n\n<p><strong>Syntax</strong><br>\nparse_number(<code>&lt;column&gt;</code>, na = c(&quot;&quot;, &quot;NA&quot;), locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na - The default is null and &quot;NA&quot;. Provide a list of text to be registered as NA.</li>\n<li>locale - The default is the session locale using default_locale() function.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nNumeric  </p>\n\n<p><strong>Example</strong><br>\nparse_number(&quot;12345&quot;)<br>\n<em>Returns 12345</em><br>\nparse_number(&quot;12345.10&quot;)<br>\n<em>Returns 12345.1</em><br>\nparse_number(&quot;$12,345.10&quot;)<br>\n<em>Returns 12345.1</em><br>\nparse_number(&quot;$12.20M&quot;)<br>\n<em>Returns 12.2</em><br>\nparse_number(as.Date(&quot;2015-01-30&quot;) - as.Date(&quot;2015-01-15&quot;))<br>\n<em>Returns 15</em>  </p>\n"
      },
      {
        "name": "parse_time",
        "package": "readr",
        "source": "exploratory doc",
        "description": "Convert data to Time data type.",
        "usage": [
          {
            "syntax": "parse_time(```<column>```, format = ```<time_format>```, locale = ```<locale>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parse_time("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", format = "
              },
              {
                "id": "time_format",
                "value": "<time_format>"
              },
              {
                "id": "4",
                "value": ", locale = "
              },
              {
                "id": "locale",
                "value": "<locale>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "format": "time_format",
              "locale": "locale"
            },
            "html": "parse_time(<b><i>column</i></b>, format = <b><i>time_format</i></b>, locale = <b><i>locale</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "format (Optional)",
            "text": [
              "specify a date format to read the given data. If not specified, it will try \"%Y-%m-%d\" then \"%Y/%m/%d\"",
              "- %H - Decimal hours (24 hour)",
              "- %I - Decimal hours (12 hour)",
              "- %M - Decimal minute",
              "- %S - Decimal second",
              "- %z - Offset from GMT",
              "- %Z - Time zone (character)",
              "- %p - Locale-specific AM/PM"
            ]
          },
          {
            "name": "locale",
            "text": [
              "The default is the session default locale. Set the date/time related configuration like time zone, encoding, decimal mark, and day/month names."
            ]
          }
        ],
        "return_value": "time",
        "examples": [
          {
            "code": "parse_time(\"13:10:05\")",
            "comment": "Returns \"13:10:05\""
          },
          {
            "code": "parse_time(\"13:10:05\", locale = locale(tz = \"America/Los_Angeles\"))",
            "comment": "Returns \"13:10:05\""
          },
          {
            "code": "parse_time(\"10:20:15 PM\")",
            "comment": "Returns \"22:20:15\""
          },
          {
            "code": "parse_time(\"10:20:15 午後\", local = locale(\"ja\"))",
            "comment": "Returns \"22:20:15\""
          }
        ],
        "tags": [
          "Time",
          "Convert"
        ],
        "categories": [
          "Type Conversion",
          "Date"
        ],
        "html": "<p><strong>Summary</strong><br>\nConvert data to Time data type.</p>\n\n<p><strong>Syntax</strong><br>\nparse_time(<code>&lt;column&gt;</code>, format = <code>&lt;time_format&gt;</code>, locale = <code>&lt;locale&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>format (Optional) - specify a date format to read the given data. If not specified, it will try &quot;%Y-%m-%d&quot; then &quot;%Y/%m/%d&quot;\n\n<ul>\n<li>%H - Decimal hours (24 hour)<br></li>\n<li>%I - Decimal hours (12 hour)<br></li>\n<li>%M - Decimal minute<br></li>\n<li>%S - Decimal second<br></li>\n<li>%z - Offset from GMT</li>\n<li>%Z - Time zone (character)</li>\n<li>%p - Locale-specific AM/PM<br></li>\n</ul></li>\n<li>locale - The default is the session default locale. Set the date/time related configuration like time zone, encoding, decimal mark, and day/month names.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\ntime   </p>\n\n<p><strong>Example</strong><br>\nparse_time(&quot;13:10:05&quot;)<br>\n<em>Returns &quot;13:10:05&quot;</em><br>\nparse_time(&quot;13:10:05&quot;, locale = locale(tz = &quot;America/Los_Angeles&quot;))<br>\n<em>Returns &quot;13:10:05&quot;</em><br>\nparse_time(&quot;10:20:15 PM&quot;)\n<em>Returns &quot;22:20:15&quot;</em><br>\nparse_time(&quot;10:20:15 午後&quot;, local = locale(&quot;ja&quot;))<br>\n<em>Returns &quot;22:20:15&quot;</em>  </p>\n"
      }
    ]
  },
  {
    "category": "Column",
    "functions": [
      {
        "name": "-",
        "package": "base",
        "source": "exploratory doc",
        "description": "Removes column(s). It can be used along with any column(s) selection operation like select(), gather(), etc.",
        "usage": [
          {
            "syntax": "-<column>",
            "tokens": [
              {
                "id": "0",
                "value": "-<column>"
              }
            ],
            "arguments": {
            },
            "html": "-<column>"
          }
        ],
        "arguments": [

        ],
        "return_value": null,
        "examples": [
          {
            "code": "select(-Country)",
            "comment": "Remove Country column."
          },
          {
            "code": "select(-starts_with(\"user\"))",
            "comment": "Remove all the columns whose names start with \"user\"."
          },
          {
            "code": "gather(Year, Population, -Country)",
            "comment": "Gather all the columns except Country column into Year and Population columns."
          }
        ],
        "tags": [

        ],
        "categories": [
          "Column"
        ],
        "html": "<p><strong>Summary</strong><br>\nRemoves column(s). It can be used along with any column(s) selection operation like select(), gather(), etc.</p>\n\n<p><strong>Syntax</strong><br>\n-<column></p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong>  </p>\n\n<p><strong>Example</strong><br>\nselect(-Country)<br>\n<em>Remove Country column.</em><br>\nselect(-starts_with(&quot;user&quot;))<br>\n<em>Remove all the columns whose names start with &quot;user&quot;.</em><br>\ngather(Year, Population, -Country)<br>\n<em>Gather all the columns except Country column into Year and Population columns.</em>  </p>\n"
      },
      {
        "name": "contains",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns the column names that contain a given text.",
        "usage": [
          {
            "syntax": "contains(```<text>```, ignore.case = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "contains("
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "2",
                "value": ", ignore.case = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "text",
              "ignore.case": "logical"
            },
            "html": "contains(<b><i>text</i></b>, ignore.case = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "ignore.case",
            "text": [
              "The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "select(contains(\"ABR\", ignore.case = TRUE))",
            "comment": "Select only columns whose name contains with \"ABR\""
          }
        ],
        "tags": [
          "contains"
        ],
        "categories": [
          "Column"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the column names that contain a given text.</p>\n\n<p><strong>Syntax</strong><br>\ncontains(<code>&lt;text&gt;</code>, ignore.case = <code>&lt;logical&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>ignore.case - The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nselect(contains(&quot;ABR&quot;, ignore.case = TRUE))<br>\n<em>Select only columns whose name contains with &quot;ABR&quot;</em>  </p>\n"
      },
      {
        "name": "ends_with",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns the column names that ends with a given text.",
        "usage": [
          {
            "syntax": "ends_with(```<text>```, ignore.case = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "ends_with("
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "2",
                "value": ", ignore.case = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "text",
              "ignore.case": "logical"
            },
            "html": "ends_with(<b><i>text</i></b>, ignore.case = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "ignore.case",
            "text": [
              "The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "select(ends_with(\"ABR\", ignore.case = TRUE))",
            "comment": "Select only columns whose name ends with \"ABR\""
          }
        ],
        "tags": [
          "ends"
        ],
        "categories": [
          "Column"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the column names that ends with a given text.</p>\n\n<p><strong>Syntax</strong><br>\nends_with(<code>&lt;text&gt;</code>, ignore.case = <code>&lt;logical&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>ignore.case - The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nselect(ends_with(&quot;ABR&quot;, ignore.case = TRUE))<br>\n<em>Select only columns whose name ends with &quot;ABR&quot;</em>  </p>\n"
      },
      {
        "name": "everything",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns all the column names. It's useful when you want to have particular column(s) first before everything else.",
        "usage": [
          {
            "syntax": "everything()",
            "tokens": [
              {
                "id": "0",
                "value": "everything()"
              }
            ],
            "arguments": {
            },
            "html": "everything()"
          }
        ],
        "arguments": [
          {
            "name": "ignore.case",
            "text": [
              "The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "select(X, everything())",
            "comment": "Reorder columns: keep the column “X\" before all the other columns."
          }
        ],
        "tags": [
          "everything",
          "all"
        ],
        "categories": [
          "Column"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns all the column names. It&#39;s useful when you want to have particular column(s) first before everything else.  </p>\n\n<p><strong>Syntax</strong><br>\neverything()  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>ignore.case - The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nselect(X, everything())<br>\n<em>Reorder columns: keep the column “X&quot; before all the other columns.</em>  </p>\n"
      },
      {
        "name": "matches",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns the column names that matches with a given text.",
        "usage": [
          {
            "syntax": "matches(```<text>```, ignore.case = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "matches("
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "2",
                "value": ", ignore.case = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "text",
              "ignore.case": "logical"
            },
            "html": "matches(<b><i>text</i></b>, ignore.case = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "ignore.case",
            "text": [
              "The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "select(matches(\"[:digit:]+\", ignore.case = TRUE))",
            "comment": "Select only columns whose names contains digits (regular expression)"
          }
        ],
        "tags": [
          "Column"
        ],
        "categories": [
          "Column"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the column names that matches with a given text.</p>\n\n<p><strong>Syntax</strong><br>\nmatches(<code>&lt;text&gt;</code>, ignore.case = <code>&lt;logical&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>ignore.case - The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nselect(matches(&quot;[:digit:]+&quot;, ignore.case = TRUE))<br>\n<em>Select only columns whose names contains digits (regular expression)</em></p>\n"
      },
      {
        "name": "num_range",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns the column names that starts with a given text with numbers that are within a given range. It's useful especially when you have column names like X1, X2, X3, X4, etc.",
        "usage": [
          {
            "syntax": "num_range(```<text>```, ```<start_num>```:```<end_num>```)",
            "tokens": [
              {
                "id": "0",
                "value": "num_range("
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "start_num",
                "value": "<start_num>"
              },
              {
                "id": "4",
                "value": ":"
              },
              {
                "id": "end_num",
                "value": "<end_num>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "text",
              "1": "start_num"
            },
            "html": "num_range(<b><i>text</i></b>, <b><i>start_num</i></b>:<b><i>end_num</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "ignore.case",
            "text": [
              "The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "select(num_range(\"X\", 1:6))",
            "comment": "Selects all columns (numerically) from X1 to X5.￼￼"
          }
        ],
        "tags": [
          "number",
          "range"
        ],
        "categories": [
          "Column"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the column names that starts with a given text with numbers that are within a given range. It&#39;s useful especially when you have column names like X1, X2, X3, X4, etc.</p>\n\n<p><strong>Syntax</strong><br>\nnum_range(<code>&lt;text&gt;</code>, <code>&lt;start_num&gt;</code>:<code>&lt;end_num&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>ignore.case - The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nselect(num_range(&quot;X&quot;, 1:6))<br>\n<em>Selects all columns (numerically) from X1 to X5.￼￼</em>  </p>\n"
      },
      {
        "name": "one_of",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns the column names that are one of the given names.",
        "usage": [
          {
            "syntax": "one_of(```<text1>```, ```<text2>```, ...)",
            "tokens": [
              {
                "id": "0",
                "value": "one_of("
              },
              {
                "id": "text1",
                "value": "<text1>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "text2",
                "value": "<text2>"
              },
              {
                "id": "4",
                "value": ", ...)"
              }
            ],
            "arguments": {
              "0": "text1",
              "1": "text2"
            },
            "html": "one_of(<b><i>text1</i></b>, <b><i>text2</i></b>, ...)"
          }
        ],
        "arguments": [
          {
            "name": "ignore.case",
            "text": [
              "The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "select(one_of(\"x\", \"y\", \"z”))",
            "comment": "Selects columns whose names are \"x\", \"y\", and \"z\"."
          }
        ],
        "tags": [
          "one of"
        ],
        "categories": [
          "Column"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the column names that are one of the given names.</p>\n\n<p><strong>Syntax</strong><br>\none_of(<code>&lt;text1&gt;</code>, <code>&lt;text2&gt;</code>, ...)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>ignore.case - The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nselect(one_of(&quot;x&quot;, &quot;y&quot;, &quot;z”))<br>\n<em>Selects columns whose names are &quot;x&quot;, &quot;y&quot;, and &quot;z&quot;.</em>  </p>\n"
      },
      {
        "name": "starts_with",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Returns the column names that starts with a given text.",
        "usage": [
          {
            "syntax": "starts_with(```<text>```, ignore.case = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "starts_with("
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "2",
                "value": ", ignore.case = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "text",
              "ignore.case": "logical"
            },
            "html": "starts_with(<b><i>text</i></b>, ignore.case = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "ignore.case",
            "text": [
              "The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not."
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "select(starts_with(\"X\", ignore.case = TRUE))",
            "comment": "Select only columns whose name starts with \"X\""
          }
        ],
        "tags": [
          "starts"
        ],
        "categories": [
          "Column"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns the column names that starts with a given text.</p>\n\n<p><strong>Syntax</strong><br>\nstarts_with(<code>&lt;text&gt;</code>, ignore.case = <code>&lt;logical&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>ignore.case - The default is TRUE. Decides whether it should ignore the text case (uppercase/lowercase) or not.</li>\n</ul>\n\n<p><strong>Example</strong><br>\nselect(starts_with(&quot;X&quot;, ignore.case = TRUE))<br>\n<em>Select only columns whose name starts with &quot;X&quot;</em>  </p>\n"
      }
    ]
  },
  {
    "category": "List",
    "functions": [
      {
        "name": "list_concat",
        "package": "tam",
        "source": "exploratory doc",
        "description": "Concatenates members inside multiple lists. It can be used inside summarize() command.",
        "usage": [
          {
            "syntax": "list_concat(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "list_concat("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_list"
            },
            "html": "list_concat(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "list",
        "examples": [
          {
            "code": "summarize(categories = list_concat(category))",
            "comment": "Returns the following."
          }
        ],
        "tags": [

        ],
        "categories": [
          "List"
        ],
        "html": "<p><strong>Summary</strong>\nConcatenates members inside multiple lists. It can be used inside summarize() command.</p>\n\n<p><strong>Syntax</strong>\nlist_concat(<code>&lt;column_list&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong>\nlist</p>\n\n<p><strong>Example</strong>\nsummarize(categories = list_concat(category))\n<em>Returns the following.</em></p>\n\n<p>Before:</p>\n\n<table><thead>\n<tr>\n<th>region</th>\n<th>category</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>East</td>\n<td>c(&quot;Doctors&quot;, &quot;Health &amp; Medical&quot;)</td>\n</tr>\n<tr>\n<td>East</td>\n<td>Nightlife</td>\n</tr>\n<tr>\n<td>East</td>\n<td>c(&quot;Active Life&quot;, &quot;Mini Golf&quot;, &quot;Golf&quot;)</td>\n</tr>\n<tr>\n<td>West</td>\n<td>c(&quot;Bars&quot;, &quot;American (New)&quot;, &quot;Nightlife&quot;)</td>\n</tr>\n<tr>\n<td>West</td>\n<td>c(&quot;Bars&quot;, &quot;American (Traditional)&quot;, &quot;Nightlife&quot;)</td>\n</tr>\n</tbody></table>\n\n<p>After:</p>\n\n<table><thead>\n<tr>\n<th>region</th>\n<th>category</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>East</td>\n<td>c(&quot;Doctors&quot;, &quot;Health &amp; Medical&quot;, &quot;Nightlife&quot;, &quot;Active Life&quot;, &quot;Mini Golf&quot;, &quot;Golf&quot;)</td>\n</tr>\n<tr>\n<td>West</td>\n<td>c(&quot;Bars&quot;, &quot;American (New)&quot;, &quot;Nightlife&quot;, &quot;Bars&quot;, &quot;American (Traditional)&quot;, &quot;Nightlife&quot;)</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "list_extract",
        "package": "tam",
        "source": "exploratory doc",
        "description": "Extract a value of a given list data type column based on a position or name when the data inside the list is data frame.",
        "usage": [
          {
            "syntax": "list_extract(```<column>```, position = ```<numeric_text>```, rownum = ```<numeric>```)",
            "tokens": [
              {
                "id": "0",
                "value": "list_extract("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", position = "
              },
              {
                "id": "numeric_text",
                "value": "<numeric_text>"
              },
              {
                "id": "4",
                "value": ", rownum = "
              },
              {
                "id": "numeric",
                "value": "<numeric>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_list",
              "position": "numeric_text",
              "rownum": "numeric"
            },
            "html": "list_extract(<b><i>column</i></b>, position = <b><i>numeric_text</i></b>, rownum = <b><i>numeric</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "position",
            "text": [
              "The default is 1. Set a position of the element inside the list you want to extract a value from."
            ]
          },
          {
            "name": "rownum",
            "text": [
              "The default is 1. Set a row number of the data frame inside the list you want to extract a value from. It's in effect only when the data is a list of data frames."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "mutate(text = list_extract(categories, 1))",
            "comment": "Returns the following."
          },
          {
            "code": "mutate(text = list_extract(labels, 1))",
            "comment": "Returns the value of the 1st column and 1st row. The default is 1st row when not specified."
          },
          {
            "code": "mutate(text = list_extract(labels, 1, 2))",
            "comment": "Returns the value of the 1st column and 2nd row."
          },
          {
            "code": "mutate(text = list_extract(labels, \"name\"))",
            "comment": "Returns the value of a column, 'name', and the 1st row. The default is 1st row when not specified."
          }
        ],
        "tags": [
          "list",
          "extract",
          "position"
        ],
        "categories": [
          "List"
        ],
        "html": "<p><strong>Summary</strong>\nExtract a value of a given list data type column based on a position or name when the data inside the list is data frame.</p>\n\n<p><strong>Syntax</strong>\nlist_extract(<code>&lt;column_list&gt;</code>, position = <code>&lt;numeric_text&gt;</code>, rownum = <code>&lt;numeric&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>position - The default is 1. Set a position of the element inside the list you want to extract a value from.</li>\n<li>rownum - The default is 1. Set a row number of the data frame inside the list you want to extract a value from. It&#39;s in effect only when the data is a list of data frames.</li>\n</ul>\n\n<p><strong>Return Value</strong>\nCharacter</p>\n\n<p><strong>Example</strong></p>\n\n<p>1) Column is List of Character</p>\n\n<p>mutate(text = list_extract(categories, 1))\n<em>Returns the following.</em></p>\n\n<table><thead>\n<tr>\n<th>category</th>\n<th>text</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>c(&quot;Doctors&quot;, &quot;Health &amp; Medical&quot;)</td>\n<td>Doctors</td>\n</tr>\n<tr>\n<td>c(&quot;Bars&quot;, &quot;American (New)&quot;, &quot;Nightlife&quot;)</td>\n<td>Bars</td>\n</tr>\n</tbody></table>\n\n<p>2) Column is List of Data Frame</p>\n\n<p>mutate(text = list_extract(labels, 1))\n<em>Returns the value of the 1st column and 1st row. The default is 1st row when not specified.</em></p>\n\n<table><thead>\n<tr>\n<th>labels</th>\n<th>text</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>list(name = c(&quot;Regression&quot;, &quot;UI&quot;), color = c(&quot;5319e7&quot;, &quot;207de5&quot;))</td>\n<td>Regression</td>\n</tr>\n</tbody></table>\n\n<p>mutate(text = list_extract(labels, 1, 2))\n<em>Returns the value of the 1st column and 2nd row.</em></p>\n\n<table><thead>\n<tr>\n<th>labels</th>\n<th>text</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>list(name = c(&quot;Regression&quot;, &quot;UI&quot;), color = c(&quot;5319e7&quot;, &quot;207de5&quot;))</td>\n<td>UI</td>\n</tr>\n</tbody></table>\n\n<p>mutate(text = list_extract(labels, &quot;name&quot;))\n<em>Returns the value of a column, &#39;name&#39;, and the 1st row. The default is 1st row when not specified.</em></p>\n\n<table><thead>\n<tr>\n<th>labels</th>\n<th>text</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>list(name = c(&quot;Regression&quot;, &quot;UI&quot;), color = c(&quot;5319e7&quot;, &quot;207de5&quot;))</td>\n<td>Regression</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "list_n",
        "package": "tam",
        "source": "exploratory doc",
        "description": "Returns number of elements inside a given list data type column for each row.",
        "usage": [
          {
            "syntax": "list_n(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "list_n("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_list"
            },
            "html": "list_n(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Numeric",
        "examples": [
          {
            "code": "mutate(count = list_n(categories))",
            "comment": "Returns the following."
          }
        ],
        "tags": [
          "list",
          "count",
          "elements"
        ],
        "categories": [
          "List"
        ],
        "html": "<p><strong>Summary</strong>\nReturns number of elements inside a given list data type column for each row.</p>\n\n<p><strong>Syntax</strong>\nlist_n(<code>&lt;column_list&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong>\nNumeric</p>\n\n<p><strong>Example</strong>\nmutate(count = list_n(categories))\n<em>Returns the following.</em></p>\n\n<table><thead>\n<tr>\n<th>category</th>\n<th>count</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>c(&quot;Doctors&quot;, &quot;Health &amp; Medical&quot;)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>Nightlife</td>\n<td>1</td>\n</tr>\n<tr>\n<td>c(&quot;Active Life&quot;, &quot;Mini Golf&quot;, &quot;Golf&quot;)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>c(&quot;Bars&quot;, &quot;American (New)&quot;, &quot;Nightlife&quot;, &quot;Lounges&quot;, &quot;Restaurants&quot;)</td>\n<td>5</td>\n</tr>\n<tr>\n<td>c(&quot;Bars&quot;, &quot;American (Traditional)&quot;, &quot;Nightlife&quot;, &quot;Restaurants&quot;)</td>\n<td>4</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "list_to_text",
        "package": "tam",
        "source": "exploratory doc",
        "description": "Concatenates texts from all the elements of a given list data type column.",
        "usage": [
          {
            "syntax": "list_concat(```<column>``` [, sep = ```<text>```])",
            "tokens": [
              {
                "id": "0",
                "value": "list_concat("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": " [, sep = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "4",
                "value": "])"
              }
            ],
            "arguments": {
              "0": "column_list",
              "sep": "text"
            },
            "html": "list_concat(<b><i>column</i></b> [, sep = <b><i>text</i></b>])"
          }
        ],
        "arguments": [
          {
            "name": "sep",
            "text": [
              "The default is ', ' (comma and space). Set character(s) to connect concatenating texts."
            ]
          }
        ],
        "return_value": "character",
        "examples": [
          {
            "code": "mutate(count = list_text(category))",
            "comment": "Returns the following."
          }
        ],
        "tags": [

        ],
        "categories": [
          "List"
        ],
        "html": "<p><strong>Summary</strong>\nConcatenates texts from all the elements of a given list data type column.</p>\n\n<p><strong>Syntax</strong>\nlist_concat(<code>&lt;column_list&gt;</code> [, sep = <code>&lt;text&gt;</code>])</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>sep - The default is &#39;, &#39; (comma and space). Set character(s) to connect concatenating texts.</li>\n</ul>\n\n<p><strong>Return Value</strong>\ncharacter</p>\n\n<p><strong>Example</strong>\nmutate(count = list_text(category))\n<em>Returns the following.</em></p>\n\n<table><thead>\n<tr>\n<th>category</th>\n<th>count</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>c(&quot;Doctors&quot;, &quot;Health &amp; Medical&quot;)</td>\n<td>Doctors, Health &amp; Medical</td>\n</tr>\n<tr>\n<td>Nightlife</td>\n<td>Nightlife</td>\n</tr>\n<tr>\n<td>c(&quot;Active Life&quot;, &quot;Mini Golf&quot;, &quot;Golf&quot;)</td>\n<td>Active Life, Mini Golf, Golf</td>\n</tr>\n<tr>\n<td>c(&quot;Bars&quot;, &quot;American (New)&quot;, &quot;Nightlife&quot;)</td>\n<td>Bars, American (New), Nightlife</td>\n</tr>\n<tr>\n<td>c(&quot;Bars&quot;, &quot;American (Traditional)&quot;, &quot;Nightlife&quot;)</td>\n<td>Bars, American (Traditional), Nightlife</td>\n</tr>\n</tbody></table>\n"
      },
      {
        "name": "str_detect",
        "package": "stringr",
        "source": "exploratory doc",
        "description": "Return TRUE or FALSE based on whether Text data contains a given text or not",
        "usage": [
          {
            "syntax": "str_detect(```<column>```, ```<pattern>```)",
            "tokens": [
              {
                "id": "0",
                "value": "str_detect("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "pattern",
                "value": "<pattern>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "1": "pattern"
            },
            "html": "str_detect(<b><i>column</i></b>, <b><i>pattern</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "pattern",
            "text": [
              "text or regular expression to look for."
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "str_detect(\"New York\", \"New\")",
            "comment": "returns TRUE because there is 'New' in the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"[:alpha:]\")",
            "comment": "returns TRUE because there are alphabet letters in the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"[:digit:]\")",
            "comment": "returns TRUE because there are numeric (digit) letters in the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"^New\")",
            "comment": "returns TRUE because there is \"New\" text at the beginning of the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"New$\")",
            "comment": "returns TRUE because there is no \"New\" text at the end of the data."
          },
          {
            "code": "str_detect(\"New York on 1/1.\", \"N.w\")",
            "comment": "returns TRUE because 'New' starts with 'N' and ends with 'w'"
          },
          {
            "code": "str_detect(\"New York on 1/1.\", fixed(\"N.w\"))",
            "comment": "returns FALSE because 'N.w' exact matching letters don't exist"
          },
          {
            "code": "str_detect(\"New York on 1/1.\", c(\"New\", \"Old\"))",
            "comment": "returns TRUE because a given text matches with one of matching texts"
          }
        ],
        "tags": [
          "matching",
          "detect",
          "find",
          "exist"
        ],
        "categories": [
          "Text",
          "Logical",
          "List"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn TRUE or FALSE based on whether Text data contains a given text or not</p>\n\n<p><strong>Syntax</strong><br>\nstr_detect(<code>&lt;column&gt;</code>, <code>&lt;pattern&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>pattern - text or regular expression to look for.<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nstr_detect(&quot;New York&quot;, &quot;New&quot;)<br>\n<em>returns TRUE because there is &#39;New&#39; in the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;[:alpha:]&quot;)<br>\n<em>returns TRUE because there are alphabet letters in the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;[:digit:]&quot;)<br>\n<em>returns TRUE because there are numeric (digit) letters in the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;^New&quot;)<br>\n<em>returns TRUE because there is &quot;New&quot; text at the beginning of the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;New$&quot;)<br>\n<em>returns TRUE because there is no &quot;New&quot; text at the end of the data.</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, &quot;N.w&quot;)<br>\n<em>returns TRUE because &#39;New&#39; starts with &#39;N&#39; and ends with &#39;w&#39;</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, fixed(&quot;N.w&quot;))<br>\n<em>returns FALSE because &#39;N.w&#39; exact matching letters don&#39;t exist</em><br>\nstr_detect(&quot;New York on 1/1.&quot;, c(&quot;New&quot;, &quot;Old&quot;))<br>\n<em>returns TRUE because a given text matches with one of matching texts</em>  </p>\n"
      }
    ]
  },
  {
    "category": "Range",
    "functions": [
      {
        "name": "between",
        "package": "dplyr",
        "source": "exploratory doc",
        "description": "Return TRUE or FALSE based on a given value is within a given range (between).",
        "usage": [
          {
            "syntax": "between(```<column>```, ```<left>```, ```<right>```)",
            "tokens": [
              {
                "id": "0",
                "value": "between("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", "
              },
              {
                "id": "left",
                "value": "<left>"
              },
              {
                "id": "4",
                "value": ", "
              },
              {
                "id": "right",
                "value": "<right>"
              },
              {
                "id": "6",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_num_date",
              "1": "left",
              "2": "right"
            },
            "html": "between(<b><i>column</i></b>, <b><i>left</i></b>, <b><i>right</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "left",
            "text": [
              "the minimum value of the range between"
            ]
          },
          {
            "name": "right",
            "text": [
              "the max value of the range between"
            ]
          }
        ],
        "return_value": "Logical",
        "examples": [
          {
            "code": "filter(between(revenue, 1000, 6000))",
            "comment": "Keep data whose revenue is between 1000 and 6000."
          }
        ],
        "tags": [
          "between",
          "range",
          "filter"
        ],
        "categories": [
          "Range"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturn TRUE or FALSE based on a given value is within a given range (between).</p>\n\n<p><strong>Syntax</strong><br>\nbetween(<code>&lt;column_num_date&gt;</code>, <code>&lt;left&gt;</code>, <code>&lt;right&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>left - the minimum value of the range between<br></li>\n<li>right - the max value of the range between<br></li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nLogical  </p>\n\n<p><strong>Example</strong><br>\nfilter(between(revenue, 1000, 6000))<br>\n<em>Keep data whose revenue is between 1000 and 6000.</em>  </p>\n"
      },
      {
        "name": "range",
        "package": "base",
        "source": "exploratory doc",
        "description": "Returns a min and max values of a given data.",
        "usage": [
          {
            "syntax": "range(```<column>```, na.rm = ```<logical>```)",
            "tokens": [
              {
                "id": "0",
                "value": "range("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", na.rm = "
              },
              {
                "id": "logical",
                "value": "<logical>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column",
              "na.rm": "logical"
            },
            "html": "range(<b><i>column</i></b>, na.rm = <b><i>logical</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "na.rm",
            "text": [
              "logical. Should missing values (including NaN) be removed?"
            ]
          }
        ],
        "return_value": null,
        "examples": [
          {
            "code": "// x <- c(1, 2, 3, 4, 5)",
            "comment": "Returns 1  5"
          },
          {
            "code": "filter(ARR_DELAY %in% range(DEP_DELAY, na.rm = TRUE))",
            "comment": "Keep only rows with ARR_DELAY is in a range of DEP_DELAY. This is same as the below."
          }
        ],
        "tags": [
          "range"
        ],
        "categories": [
          "Range"
        ],
        "html": "<p><strong>Summary</strong><br>\nReturns a min and max values of a given data.</p>\n\n<p><strong>Syntax</strong><br>\nrange(<code>&lt;column&gt;</code>, na.rm = <code>&lt;logical&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>na.rm - logical. Should missing values (including NaN) be removed?</li>\n</ul>\n\n<p><strong>Return Value</strong>  </p>\n\n<p><strong>Example</strong><br>\n// x &lt;- c(1, 2, 3, 4, 5)<br>\n<em>Returns 1  5</em><br>\nfilter(ARR_DELAY %in% range(DEP_DELAY, na.rm = TRUE))<br>\n<em>Keep only rows with ARR_DELAY is in a range of DEP_DELAY. This is same as the below.</em>\nfilter(between(ARR_DELAY, range(DEP_DELAY, na.rm = TRUE)[1], range(DEP_DELAY, na.rm = TRUE)[2]))</p>\n"
      }
    ]
  },
  {
    "category": "URL",
    "functions": [
      {
        "name": "domain",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Extract a domain name from a given URL.",
        "usage": [
          {
            "syntax": "domain(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "domain("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "domain(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "domain(\"https://developer.github.com/v3/search/#search-code\")",
            "comment": "Returns \"developer.github.com\""
          }
        ],
        "tags": [
          "domain",
          "url",
          "hostname"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtract a domain name from a given URL.</p>\n\n<p><strong>Syntax</strong><br>\ndomain(<code>&lt;column_text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\ndomain(&quot;<a href=\"https://developer.github.com/v3/search/#search-code%22\">https://developer.github.com/v3/search/#search-code&quot;</a>)<br>\n<em>Returns &quot;developer.github.com&quot;</em>  </p>\n"
      },
      {
        "name": "fragment",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Extracts a fragment from a given URL.",
        "usage": [
          {
            "syntax": "fragment(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "fragment("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "fragment(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "fragment(\"https://developer.github.com/v3/search/#search-code\")",
            "comment": "Returns \"search-code\""
          }
        ],
        "tags": [
          "fragment",
          "anchor",
          "url"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtracts a fragment from a given URL.  </p>\n\n<p><strong>Syntax</strong><br>\nfragment(<code>&lt;column_text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nfragment(&quot;<a href=\"https://developer.github.com/v3/search/#search-code%22\">https://developer.github.com/v3/search/#search-code&quot;</a>)<br>\n<em>Returns &quot;search-code&quot;</em></p>\n"
      },
      {
        "name": "param_get",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Extracts a value for a given URL parameter name.",
        "usage": [
          {
            "syntax": "param_get(```<column>```, parameter_names = ```<text>```)",
            "tokens": [
              {
                "id": "0",
                "value": "param_get("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", parameter_names = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "parameter_names": "text"
            },
            "html": "param_get(<b><i>column</i></b>, parameter_names = <b><i>text</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "parameter_names",
            "text": [
              "a name of the URL parameter."
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "as.character(param_get(\"https://github.com/hideaki/tam/issues?ticket=open\", \"ticket\"))",
            "comment": "Returns \"open\""
          }
        ],
        "tags": [
          "parameter",
          "value",
          "url"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtracts a value for a given URL parameter name.  </p>\n\n<p><strong>Syntax</strong><br>\nparam_get(<code>&lt;column_text&gt;</code>, parameter_names = <code>&lt;text&gt;</code>)  </p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>parameter_names - a name of the URL parameter.</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nas.character(param_get(&quot;<a href=\"https://github.com/hideaki/tam/issues?ticket=open\">https://github.com/hideaki/tam/issues?ticket=open</a>&quot;, &quot;ticket&quot;))<br>\n<em>Returns &quot;open&quot;</em>  </p>\n"
      },
      {
        "name": "param_remove",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Removes parameters from a given URL.",
        "usage": [
          {
            "syntax": "param_remove(```<column>```, keys = ```<text>```)",
            "tokens": [
              {
                "id": "0",
                "value": "param_remove("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ", keys = "
              },
              {
                "id": "text",
                "value": "<text>"
              },
              {
                "id": "4",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text",
              "keys": "text"
            },
            "html": "param_remove(<b><i>column</i></b>, keys = <b><i>text</i></b>)"
          }
        ],
        "arguments": [
          {
            "name": "keys",
            "text": [
              "parameter names to be removed. Use c() to remove multiple parameters together. E.g. c(\"q\", \"issue\")"
            ]
          }
        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "param_remove(urls = \"https://github.com/hideaki/tam/issues?q=is%3Aopen&ticket=open\", keys = c(\"q\",\"ticket\"))",
            "comment": "Returns \"https://github.com/hideaki/tam/issues\""
          }
        ],
        "tags": [
          "parameter",
          "remove",
          "url"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nRemoves parameters from a given URL.  </p>\n\n<p><strong>Syntax</strong><br>\nparam_remove(<code>&lt;column_text&gt;</code>, keys = <code>&lt;text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<ul>\n<li>keys - parameter names to be removed. Use c() to remove multiple parameters together. E.g. c(&quot;q&quot;, &quot;issue&quot;)</li>\n</ul>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nparam_remove(urls = &quot;<a href=\"https://github.com/hideaki/tam/issues?q=is%3Aopen&amp;ticket=open\">https://github.com/hideaki/tam/issues?q=is%3Aopen&amp;ticket=open</a>&quot;, keys = c(&quot;q&quot;,&quot;ticket&quot;))<br>\n<em>Returns &quot;<a href=\"https://github.com/hideaki/tam/issues\">https://github.com/hideaki/tam/issues</a>&quot;</em></p>\n"
      },
      {
        "name": "parameters",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Extracts a parameter part of a given URL.",
        "usage": [
          {
            "syntax": "parameters(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "parameters("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "parameters(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "parameters(\"https://github.com/hideaki/tam/issues?q=is%3Aopen+is%3Aissue\")",
            "comment": "Returns \"q=is%3aopen+is%3aissue\""
          },
          {
            "code": "parameters(\"https://github.com/hideaki/tam/issues?q=is%3Aopen+is%3Aissue&ticket=open\")",
            "comment": "Returns \"q=is%3aopen+is%3aissue&ticket=open\""
          }
        ],
        "tags": [
          "parameter",
          "url"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtracts a parameter part of a given URL.  </p>\n\n<p><strong>Syntax</strong><br>\nparameters(<code>&lt;column_text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nparameters(&quot;<a href=\"https://github.com/hideaki/tam/issues?q=is%3Aopen+is%3Aissue%22\">https://github.com/hideaki/tam/issues?q=is%3Aopen+is%3Aissue&quot;</a>)<br>\n<em>Returns &quot;q=is%3aopen+is%3aissue&quot;</em><br>\nparameters(&quot;<a href=\"https://github.com/hideaki/tam/issues?q=is%3Aopen+is%3Aissue&amp;ticket=open%22\">https://github.com/hideaki/tam/issues?q=is%3Aopen+is%3Aissue&amp;ticket=open&quot;</a>)<br>\n<em>Returns &quot;q=is%3aopen+is%3aissue&amp;ticket=open&quot;</em>   </p>\n"
      },
      {
        "name": "path",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Extracts a path part of a given URL.",
        "usage": [
          {
            "syntax": "path(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "path("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "path(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "path(\"https://developer.github.com/v3/search/#search-code\")",
            "comment": "Returns \"v3/search/\""
          }
        ],
        "tags": [
          "path",
          "url"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtracts a path part of a given URL.  </p>\n\n<p><strong>Syntax</strong><br>\npath(<code>&lt;column_text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\npath(&quot;<a href=\"https://developer.github.com/v3/search/#search-code%22\">https://developer.github.com/v3/search/#search-code&quot;</a>)<br>\n<em>Returns &quot;v3/search/&quot;</em></p>\n"
      },
      {
        "name": "port",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Extracts a port part of a given URL.",
        "usage": [
          {
            "syntax": "fragment(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "fragment("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "fragment(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "port(\"https://developer.github.com:80/v3/search/#search-code\")",
            "comment": "Returns \"80\""
          }
        ],
        "tags": [
          "port",
          "url"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtracts a port part of a given URL.  </p>\n\n<p><strong>Syntax</strong><br>\nfragment(<code>&lt;column_text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nport(&quot;<a href=\"https://developer.github.com:80/v3/search/#search-code%22\">https://developer.github.com:80/v3/search/#search-code&quot;</a>)<br>\n<em>Returns &quot;80&quot;</em>  </p>\n"
      },
      {
        "name": "scheme",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Extracts a scheme from a given URL.",
        "usage": [
          {
            "syntax": "scheme(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "scheme("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "scheme(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "scheme(\"https://developer.github.com:80/v3/search/#search-code\")",
            "comment": "Returns \"https\""
          }
        ],
        "tags": [
          "scheme",
          "prefix",
          "url",
          "http",
          "https"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtracts a scheme from a given URL.  </p>\n\n<p><strong>Syntax</strong><br>\nscheme(<code>&lt;column_text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nscheme(&quot;<a href=\"https://developer.github.com:80/v3/search/#search-code%22\">https://developer.github.com:80/v3/search/#search-code&quot;</a>)<br>\n<em>Returns &quot;https&quot;</em></p>\n"
      },
      {
        "name": "suffix_extract",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Extracts suffix (e.g. \"com\", \"org\", \"au.com\") or subdomain from a given URL.",
        "usage": [
          {
            "syntax": "suffix_extract(domain(```<column>```))$suffix",
            "tokens": [
              {
                "id": "0",
                "value": "suffix_extract(domain("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": "))$suffix"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "suffix_extract(domain(<b><i>column</i></b>))$suffix"
          },
          {
            "syntax": "suffix_extract(domain(```<column>```))$subdomain",
            "tokens": [
              {
                "id": "0",
                "value": "suffix_extract(domain("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": "))$subdomain"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "suffix_extract(domain(<b><i>column</i></b>))$subdomain"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "suffix_extract(domain(\"https://developer.github.com/v3/search/#search-code\"))$suffix",
            "comment": "Returns \"com\""
          },
          {
            "code": "suffix_extract(domain(\"https://developer.github.com/v3/search/#search-code\"))$subdomain",
            "comment": "Returns \"developer\""
          },
          {
            "code": "suffix_extract(domain(\"http://weather.yahoo.co.jp/weather/\"))$suffix",
            "comment": "Returns \"co.jp\""
          },
          {
            "code": "suffix_extract(domain(\"http://weather.yahoo.co.jp/weather/\"))$subdomain",
            "comment": "Returns \"weather\""
          }
        ],
        "tags": [
          "suffix",
          "domain",
          "url"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nExtracts suffix (e.g. &quot;com&quot;, &quot;org&quot;, &quot;au.com&quot;) or subdomain from a given URL.  </p>\n\n<p><strong>Syntax</strong><br>\nsuffix_extract(domain(<code>&lt;column_text&gt;</code>))$suffix<br>\nsuffix_extract(domain(<code>&lt;column_text&gt;</code>))$subdomain  </p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nsuffix_extract(domain(&quot;<a href=\"https://developer.github.com/v3/search/#search-code%22))$suffix\">https://developer.github.com/v3/search/#search-code&quot;))$suffix</a><br>\n<em>Returns &quot;com&quot;</em><br>\nsuffix_extract(domain(&quot;<a href=\"https://developer.github.com/v3/search/#search-code%22))$subdomain\">https://developer.github.com/v3/search/#search-code&quot;))$subdomain</a><br>\n<em>Returns &quot;developer&quot;</em><br>\nsuffix_extract(domain(&quot;<a href=\"http://weather.yahoo.co.jp/weather/%22))$suffix\">http://weather.yahoo.co.jp/weather/&quot;))$suffix</a><br>\n<em>Returns &quot;co.jp&quot;</em><br>\nsuffix_extract(domain(&quot;<a href=\"http://weather.yahoo.co.jp/weather/%22))$subdomain\">http://weather.yahoo.co.jp/weather/&quot;))$subdomain</a><br>\n<em>Returns &quot;weather&quot;</em>  </p>\n"
      },
      {
        "name": "url_decode",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Decodes a given encoded URL.",
        "usage": [
          {
            "syntax": "url_decode(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "url_decode("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "url_decode(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "url_decode(\"http://exploratory.io%3fname%3dflight%20data%20analysis%20%28V1%29\")",
            "comment": "Returns \"http://exploratory.io?name=flight data analysis (V1)\""
          }
        ],
        "tags": [
          "url",
          "decode",
          "encode"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nDecodes a given encoded URL.  </p>\n\n<p><strong>Syntax</strong><br>\nurl_decode(<code>&lt;column_text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nurl_decode(&quot;<a href=\"http://exploratory.io%3fname%3dflight%20data%20analysis%20%28V1%29%22\">http://exploratory.io%3fname%3dflight%20data%20analysis%20%28V1%29&quot;</a>)<br>\n<em>Returns &quot;<a href=\"http://exploratory.io?name=flight\">http://exploratory.io?name=flight</a> data analysis (V1)&quot;</em></p>\n"
      },
      {
        "name": "url_encode",
        "package": "urltools",
        "source": "exploratory doc",
        "description": "Encodes a given URL.",
        "usage": [
          {
            "syntax": "url_encode(```<column>```)",
            "tokens": [
              {
                "id": "0",
                "value": "url_encode("
              },
              {
                "id": "column",
                "value": "<column>"
              },
              {
                "id": "2",
                "value": ")"
              }
            ],
            "arguments": {
              "0": "column_text"
            },
            "html": "url_encode(<b><i>column</i></b>)"
          }
        ],
        "arguments": [

        ],
        "return_value": "Character",
        "examples": [
          {
            "code": "url_encode(\"http://exploratory.io?name=flight data analysis (V1)\")",
            "comment": "Returns \"http://exploratory.io%3fname%3dflight%20data%20analysis%20%28V1%29\""
          }
        ],
        "tags": [
          "url",
          "encode",
          "decode"
        ],
        "categories": [
          "URL"
        ],
        "html": "<p><strong>Summary</strong><br>\nEncodes a given URL.  </p>\n\n<p><strong>Syntax</strong><br>\nurl_encode(<code>&lt;column_text&gt;</code>)</p>\n\n<p><strong>Arguments</strong></p>\n\n<p><strong>Return Value</strong><br>\nCharacter  </p>\n\n<p><strong>Example</strong><br>\nurl_encode(&quot;<a href=\"http://exploratory.io?name=flight\">http://exploratory.io?name=flight</a> data analysis (V1)&quot;)<br>\n<em>Returns &quot;<a href=\"http://exploratory.io%3fname%3dflight%20data%20analysis%20%28V1%29\">http://exploratory.io%3fname%3dflight%20data%20analysis%20%28V1%29</a>&quot;</em></p>\n"
      }
    ]
  }
]
